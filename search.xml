<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一个简单的估计</title>
    <url>/2021/07/22/1-/</url>
    <content><![CDATA[<span id="more"></span>

<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>我们不妨思考这样的一个问题</p>
<p>对于有$n$个点，$m$条边的无向图$G$（不妨认为它没有重边和自环），记$V$为其点集，$E$为其边集，给予每个点一个权值$c_i$，定义函数$f(G) = \sum_{uv \in E} [c_u &gt; c_v]$</p>
<p>现在，不妨设初始状态为$G_0$，并且我们有$q$次修改，每次修改将提升一个点的权值，设前$i$次修改后的图为$G_i$，那么$S = f(G_0) + \sum_{i=0}^{q-1} |f(G_{i+1}) - f(G_i)|$大概有多大呢？</p>
<p>这个式子相当于描述每个点维护比自己大的邻点集合时的一种复杂程度</p>
<h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>我们可以先构造一类特殊的操作：$\sqrt m$个点的完全图，初始时的权值为$1, 2, 3, …, \sqrt m$，之后从$1$到$\sqrt m$循环操作，每次将$i$号节点的值增加$\sqrt m$，这样，每次大小关系的平均变动数量将是一个$\sqrt m$级的大小</p>
<p>上述构造可以揭示$\sqrt m$是一个下限，下面我们证明它也是一个上限</p>
<p>我们不妨根据点度分类，称度数$&gt; \sqrt m$的点为大点，而度数$ \leq \sqrt  m$的点为小点</p>
<p>显然，我们对小点操作时，其带来的变动不可能超过$\sqrt m$，而度数$&gt; \sqrt m$的大点也只可能有$\sqrt m$个，因此操作大点时，对大点之间的大小关系的变动也不可能超过$\sqrt m$个，那么我们只需要估计大点和小点之间的关系变动情况了</p>
<p>对于这部分，我们设想有这样的一个势函数$\phi(G)$，当操作小点时，每改变一次其与大点之间的关系，那么这个势函数增加$1$，而当操作大点时，每改变一次其与小点之间的关系，则减小$1$</p>
<p>每次操作小点时，$\phi(G)$不会增加超过$\sqrt m$，而操作大点时，$\phi(G)$总是减小的，并且$\phi(G)$非负是显而易见的，用$\phi(G)$来刻画大点和小点之间的关系变动情况</p>
<p>我们可以知道题述函数大概具有$O(m + q \sqrt m)$的复杂程度…</p>
]]></content>
      <categories>
        <category>thoughts</category>
      </categories>
      <tags>
        <tag>complexity</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵分析 1</title>
    <url>/2021/07/23/matrix-analysis-1/</url>
    <content><![CDATA[<span id="more"></span>

<h4 id="矩阵之间的关系"><a href="#矩阵之间的关系" class="headerlink" title="矩阵之间的关系"></a>矩阵之间的关系</h4><ul>
<li><strong>相抵</strong>：存在非奇异矩阵$P, Q$，使得$B = PAQ$时，则称$A$与$B$相抵</li>
<li><strong>相似</strong>：存在非奇异方阵$P$，使得$B = P^{-1}AP$时，称$A$与$B$相似</li>
<li><strong>合同</strong>：存在非奇异方阵$P$，使得$B = P^TAP$时，称$A$与$B$合同</li>
</ul>
<h4 id="特征值"><a href="#特征值" class="headerlink" title="特征值"></a>特征值</h4><ul>
<li><p>对于方阵$A$，如果存在$\lambda \in P$以及非零向量$x \in V^n$，使得$Ax = \lambda x$，则称$\lambda$为$A$的<strong>特征值</strong>，$x$为$A$的<strong>特征向量</strong></p>
</li>
<li><p>$Ax = \lambda x \Leftrightarrow (\lambda I - A)x = 0$，因此非零向量$x$存在，要求$|\lambda I - A| = 0$，称$f(\lambda) = |\lambda I - A|$为矩阵$A$的<strong>特征多项式</strong></p>
<ul>
<li>$|\lambda I - A| = \lambda^n + \sum_{k=1}^n (-1)^k A_k \lambda^{n-k} = \prod(\lambda - \lambda_i)$，其中$A_k$表示矩阵$A$的所有$k$阶主子式的和，$\lambda_1, …, \lambda_n$表示矩阵$A$的所有特征值</li>
<li>对于上式中的$A_1$，即$a_{11} + a_{22} + … + a_{nn}$，我们称其为矩阵的迹，记做$tr(A)$，由根与系数的关系，我们知道$A_1 = tr(A) = \sum \lambda_i$，$A_n = |A| = \prod\lambda_i$</li>
</ul>
</li>
<li><p>example</p>
<p>矩阵</p>
<p>$$A = \begin{pmatrix}<br>0 &amp;  0&amp; 0 &amp; \dots &amp; 0 &amp;-a_{n} \\<br>1&amp; 0 &amp; 0 &amp; \dots &amp; 0 &amp; -a_{n-1}\\<br>0 &amp; 1 &amp; 0 &amp; \dots &amp;  0&amp; -a_{n-2}\\<br>\dots &amp;\dots  &amp; \dots &amp; \dots &amp;  \dots&amp; \dots \\<br>0&amp; 0 &amp;0  &amp; \dots &amp; 1&amp;-a_1<br>\end{pmatrix}$$</p>
<p>的特征多项式为$f(\lambda) = \lambda^n + a_1 \lambda^{n-1} + … + a_n$</p>
</li>
<li><p>对可逆矩阵$A, B \in C^{n*n}$，由$|\lambda I - B| = |A^{-1}| |\lambda I - B| |A| = |\lambda I - A^{-1}BA|$，可以知道相似矩阵之间有相同的特征的多项式，从而由相同的特征值，相同的迹</p>
</li>
<li><p>对$A \in C^{m * n}, B \in C^{n * m}$，由$\lambda^n | \lambda I_m - AB| = \lambda^m |\lambda I_n - BA|$，我们可以知道$AB$与$BA$有相同的非零特征值</p>
</li>
<li><p>设$\lambda_i$是$|\lambda I - A|$的$m_i$重根，则称$m_i$是$\lambda_i$的<strong>代数重复度</strong>，注意到$\sum m_i = n$</p>
</li>
<li><p>记$V_{\lambda_i} = {x:(\lambda_i I - A)x = 0}$为$A$的属于$\lambda_i$的<strong>特征子空间</strong>，并称$\dim (V_{\lambda_i})$为$\lambda_i$的<strong>几何重复度</strong></p>
</li>
<li><p><strong>几何重复度</strong>不大于<strong>代数重复度</strong></p>
<ul>
<li>通过代数重复度构造出一组包含$(\lambda_i I - A)x = 0$的基础解系的基，记这组基的坐标为$C$，考虑$C^{-1}AC$的特征多项式</li>
</ul>
</li>
<li><p>设$\lambda_1, …, \lambda_r$是矩阵$A$的不同的特征值，$x_{1}^{(i)}, …, x_{s_i}^{(i)}$是属于$\lambda_i$的线性无关的特征向量，那么$x_1^{(1)}, …, x_{s_1}^{(1)}, …, x_1^{(r)}, …, x_{s_r}^{(r)}$也是线性无关的</p>
<ul>
<li>利用线性无关的充要条件为零向量的组合系数仅有$0$，对于$kx^{(i)}$，注意到乘以$\lambda_j$和$Ax^{(i)} = \lambda_i x^{(i)}$将是两种不一样的变化即可</li>
</ul>
</li>
<li><p>矩阵$A$可对角化（和对角矩阵相似）的充要条件为$A$为$n$个线性无关的特征向量</p>
<ul>
<li><p>注意到以这$n$个特征向量为基即可，也因此，相似中的转移矩阵即为这$n$个特征向量的坐标</p>
</li>
<li><p>注意和对角矩阵相似时，相似中的转移矩阵和对角矩阵一定会对应于特征值和相应的特征向量</p>
</li>
<li><p>如果$A$有$n$个线性无关的特征向量，则称$A$有完备的特征向量系</p>
<p>否则，称$A$为<strong>亏损矩阵</strong></p>
</li>
<li><p>如果每个代数重复度和几何重复度相等，则称$A$为<strong>单纯矩阵</strong></p>
</li>
<li><p>$A$可对角化的充要条件有其他不同的表述，比如$V^n = V_{\lambda_1} \oplus … \oplus V_{\lambda_r}$</p>
</li>
</ul>
</li>
</ul>
<h4 id="不变子空间"><a href="#不变子空间" class="headerlink" title="不变子空间"></a>不变子空间</h4><ul>
<li>对于线性变换$\mathscr{A}$，如果$\mathscr{A}W \subseteq W$，则称$W$为$\mathscr{A}$的<strong>不变子空间</strong></li>
<li>有两类较为容易发现的子空间<ul>
<li>$\ker \mathscr{A} = \mathscr{A}^{-1}(0)  = {x:\mathscr{A}x = 0}$，核空间</li>
<li>$\text{Im} \mathscr{A} = \mathscr{A}V$，值域</li>
<li>联系方程组，我们可以知道，若线性变换$\mathscr{A}$对应于矩阵$A$，核空间实际上对应于$A$的解空间，我们记$\dim \ker \mathscr{A} = \text{null } A$，而值域实际上是$A$的列向量张成的空间，因此其维数应该是$\text{rank} A$</li>
<li><strong>维数公式</strong>：$\text{rank} A +\text{null } A = n $</li>
</ul>
</li>
</ul>
<h4 id="Schur-TH"><a href="#Schur-TH" class="headerlink" title="Schur TH"></a>Schur TH</h4><ul>
<li><p>任何$n$阶矩阵都酉相似于一个上三角阵，即存在一个$n$阶酉矩阵$U$和一个上三角阵$R$，使得</p>
<p>$$A = UTU^H$$</p>
<p>式中$T$的主对角元为$A$的特征值</p>
<ul>
<li>每一次选择一个特征向量后进行归纳</li>
</ul>
</li>
<li><p>如果$A^H = A$，则称$A$为<strong>埃米尔特矩阵</strong></p>
<ul>
<li>对埃米尔特矩阵运用Schur TH：$A = UTU^H$，从而$A^H  = UT^HU^H$，由$A=A^H$，我们得到$T = T^H$，也就是说，$T$是对角矩阵，并且$A$的特征值都是实数</li>
</ul>
</li>
</ul>
<h4 id="正定矩阵"><a href="#正定矩阵" class="headerlink" title="正定矩阵"></a>正定矩阵</h4><ul>
<li><p>对于埃米尔特矩阵$A$，如果$x^HAx\geq 0$，则称$A$为半正定矩阵，记作$A\geq 0$；类似的，如果$x^HAx &gt; 0$，则称$A$为正定矩阵，记作$A&gt;0$</p>
<ul>
<li>如果$A&gt;0$，$k&gt;0$，那么$kA&gt;0$</li>
<li>如果$A \geq 0, B \geq 0$，那么$A+B\geq 0$</li>
</ul>
</li>
<li><p>矩阵$A$正定（半正定）的充要条件是其特征值都是正数（非负数）</p>
<ul>
<li>神奇恒等式：设$\lambda$为$A$的特征值，$\xi$为对应的单位特征向量，那么$\lambda = \xi^HA\xi$</li>
</ul>
</li>
<li><p>矩阵$A$为正定（半正定）矩阵的充要条件为存在非奇异矩阵（矩阵）$P$，使得$A=P^HP$</p>
<ul>
<li>如果$A&gt;0$，那么$A^{-1}&gt;0$</li>
<li>如果$A&gt;0$，且$C$非奇异，则$C^HAC&gt;0$</li>
<li>如果$A \geq 0$，则$C^HAC \geq 0$</li>
</ul>
</li>
<li><p>设$A,B$都是$n$阶埃米尔特矩阵，且$B&gt;0$，则存在非奇异矩阵$Q$，使得$Q^HBQ=I, Q^HAQ=\text{diag}\{\lambda_1, …, \lambda_n\}$（可同时对角化），且$\lambda_1,…,\lambda_n$为$AB^{-1}$的特征值</p>
</li>
<li><p>如果$A-B\geq 0$，那么称$A$大于等于$B$，记做$A\geq B$</p>
<ul>
<li><p>这不是一个well order…</p>
</li>
<li><p>$A \geq B$等价于$x^HAx\geq x^HBx$恒成立</p>
<p>以下性质几乎是显然的</p>
<ul>
<li><p>如果$A, B$是对角阵，那么条件也等价于$a_{ii} \geq b_{ii}$</p>
</li>
<li><p>$A \geq B, B \geq C$可得$A \geq C$</p>
</li>
<li><p>$A \geq B$，且$k&gt;0$，那么$kA \geq kB$</p>
</li>
<li><p>若$A_1 \geq B_1, A_2 \geq B_2$，那么$A_1 + A_2 \geq B_1 + B_2$</p>
</li>
<li><p>若$A \geq B$，那么$P^HAP\geq P^HBP$</p>
</li>
</ul>
</li>
<li><p>若$A \geq 0$，则$A \leq tr(A)I$（利用$tr(A)\geq \lambda_i$）</p>
</li>
<li><p>若$A\geq B$，则$B^{-1} \geq A^{-1}$</p>
</li>
<li><p>若$A, B$可交换，且$A \geq B$，那么$A^2 \geq B^2$</p>
</li>
<li><p>$Schwartz$不等式：若$A,B$分别为$n\times m, m \times l$的矩阵，且$AA^H$非奇异，则$B^HB \geq (AB)^H(AA^H)^{-1}(AB)$，等号成立当且仅当存在$n \times l$的矩阵$C$，使$B=A^HC$</p>
</li>
</ul>
</li>
<li><p>对埃尔米特矩阵$A$，有$\lambda_{min} I \leq A \leq \lambda_{max} I$</p>
</li>
<li><p>定义：记$R(x) = \frac{x^HAx}{x^Hx}$，称其为<strong>诶尔米特矩阵</strong>$A$的瑞利商</p>
<ul>
<li>瑞利商是实数（注意到$R(x) = R(x)^H$）</li>
<li>$\forall k \neq 0, R(kx) = R(x)$</li>
<li>$\lambda_{min} \leq R(x) \leq \lambda_{max}$，并且可以取得等号</li>
</ul>
</li>
<li><p><strong>极大极小定理</strong>：设$A$是$n$阶埃尔米特矩阵，其特征值为$\lambda_1 \geq \lambda_2 … \geq \lambda_n$，$V_i$是$C^n$中$i$维子空间，那么</p>
<p>$$\lambda_i = \max_{V_i} \min_{x \in V_i, x \neq 0} R(x)$$</p>
<p>$$\lambda_{n-i+1} = \min_{V_i} \max_{x \in V_i, x \neq 0} R(x)$$</p>
<ul>
<li>这个定理初看可能相当地令人疑惑，我们可以这么考虑，取$x_1, x_2, …, x_n$为分别属于$\lambda_1, …, \lambda_n$的特征向量，并且其构成标准正交向量基，那么对于$\lambda_i$而言，当我们考虑$Span(x_1, …, x_i)$时，这个空间中的最小值恰好就是$\lambda_i$，而对于其他的$i$维空间，必然跟$Span(x_{i+1}, …, x_n)$有交，此时$Span(x_{i+1}, …, x_n)$中向量的存在将使最小值比$\lambda_i$小，从而取到等号</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>matrix_analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Btree</title>
    <url>/2021/07/23/Btree/</url>
    <content><![CDATA[<span id="more"></span>

<pre><code class="C++">#include &lt;bits/stdc++.h&gt;
using namespace std;

const int M = 5; // 几路的B树
const int INF = 1e9 + 5;

struct BTree &#123;
    
    struct Bnode;
    Bnode *root;
    
    struct Bnode &#123;
        int size, val[M + 1];
        Bnode *parent, *son[M + 2];
        Bnode(Bnode* parent_ = nullptr) &#123; 
            size = 0; parent = parent_;
            for(int i = 0; i &lt;= M; i ++) son[i] = nullptr;
        &#125;
        int &amp;begin_val() &#123; return val[0]; &#125;
        Bnode *&amp;begin_son() &#123; return son[0]; &#125;
        int &amp;end_val() &#123; return val[size - 1]; &#125;
        Bnode *end_son() &#123; return son[size]; &#125;
        bool empty() &#123; return !size; &#125;
        bool is_full() &#123; return size &gt;= M; &#125;
        bool is_enough() &#123; return size &gt;= ceil(M / 2.0); &#125;
        bool not_enough() &#123; return size &lt; ceil(M / 2.0) - 1; &#125;
        bool is_leaf() &#123; return !size || (son[0] == nullptr); &#125;
        bool is_root() &#123; return parent == nullptr; &#125;
        void set_parent(Bnode *nson) &#123; if(nson) nson -&gt; parent = this; &#125;
        void print() &#123;
            if(!size) printf(&quot;empty!\n&quot;);
            for(int i = 0; i &lt; size; i ++) printf(&quot;%d &quot;, val[i]); 
            printf(&quot;\n&quot;);
        &#125;
        int find(int val_) &#123; // if in (val[i], val[i + 1] ], then in son[i + 1]
            for(int i = 0; i &lt; size; i ++) if(val_ &lt;= val[i]) return i;
            return size;
        &#125;
        int get_val_id(int val_) &#123;
            for(int i = 0; i &lt; size; i ++) if(val[i] == val_) return i;
            return -1;
        &#125;
        int get_son_id(Bnode *son_) &#123;
            for(int i = 0; i &lt;= size; i ++) if(son[i] == son_) return i;
            return -1;
        &#125;
        void rightshift(int pos) &#123; // move son[pos],val[pos],...son[size], thus son[pos], val[pos] are empty, noticing size ++
            for(int i = size - 1; i &gt;= pos; i --) val[i + 1] = val[i];
            for(int i = size; i &gt;= pos; i --) son[i + 1] = son[i];
            size ++;
        &#125;
        void rightshift2(int pos) &#123; // move val[pos],...,son[size], thus val[pos],son[pos+1] are empty, noticing size ++
            rightshift(pos + 1); val[pos + 1] = val[pos];
        &#125;
        void leftshift(int pos) &#123; // move son[pos],val[pos],...,son[size], thus son[pos], val[pos] can be deleted, noticing size --
            size --;
            for(int i = pos; i &lt;= size - 1; i ++) val[i] = val[i + 1];
            for(int i = pos; i &lt;= size; i ++) son[i] = son[i + 1];
        &#125;
        void leftshift2(int pos) &#123; // empty val[pos], son[pos + 1], noticing size --
            val[pos] = val[pos + 1]; leftshift(pos + 1); 
        &#125;
        void insert_begin(int val_, Bnode *son_ = nullptr) &#123;  
            rightshift(0);
            val[0] = val_;
            son[0] = son_; set_parent(son_);
        &#125;
        void insert_end(int val_, Bnode *son_ = nullptr) &#123;
            val[size ++] = val_; 
            son[size] = son_; set_parent(son_);
        &#125;
        void insert_mid_before(int pos_, int val_, Bnode *son_ = nullptr) &#123; // insert son[pos], val[pos]
            rightshift(pos_);
            val[pos_] = val_;
            son[pos_] = son_; set_parent(son_);
        &#125;
        void insert_mid_after(int pos_, int val_, Bnode *son_ = nullptr) &#123; // insert val[pos], son[pos + 1]
            rightshift2(pos_);
            val[pos_] = val_;
            son[pos_ + 1] = son_; set_parent(son_);
        &#125;
        void delete_begin() &#123; // delete son[0], val[0]
            leftshift(0);
        &#125;
        void delete_end() &#123; // delete val[size - 1], son[size]
            size --;
        &#125;
        void delete_mid_before(int pos_) &#123; // delete son[pos], val[pos]
            leftshift(pos_);
        &#125;
        void delete_mid_after(int pos_) &#123; //delete val[pos], son[pos + 1]
            leftshift2(pos_);
        &#125;
        void insert_leaf(int val_) &#123; // leaf case
            int pos_ = find(val_);
            insert_mid_before(pos_, val_);
        &#125;
        void Move(int L_, Bnode* Rnode) &#123; //move val[L_],son[L+1]...,val[size-1],son[size] from (this) to Rnode
            int R_ = this -&gt; size - 1;
            for(int i = L_; i &lt;= R_; i ++) Rnode -&gt; insert_end(val[i], son[i + 1]);
             size -= R_ - L_ + 1; // equals to &quot;for(int i = L_; i &lt;= R_; i ++) delete_end();&quot;
        &#125;
        void split() &#123;
            if(parent == nullptr) &#123;
                parent = new Bnode();
                parent -&gt; son[0] = this;
            &#125;
            Bnode* brother = new Bnode(parent);
            int lr = ceil(M / 2.0) - 2, rl = lr + 2, pos = parent -&gt; get_son_id(this);
            parent -&gt; insert_mid_after(pos, val[lr + 1], brother);
            Move(rl, brother); 
            brother -&gt; son[0] = this -&gt; end_son(); 
            brother -&gt; set_parent(brother -&gt; son[0]);
            this -&gt; delete_end();
        &#125;
    &#125;;
    void Insert(int val) &#123; // use this function to insert v
        if(root == nullptr) root = new Bnode();
        Bnode *now = root;
        while(!now -&gt; is_leaf())
            now = now -&gt; son[now -&gt; find(val)];
        now -&gt; insert_leaf(val);
        while(!now -&gt; is_root()) &#123;
            if(!now -&gt; is_full()) return;
            now -&gt; split();
            now = now -&gt; parent;
        &#125;
        if(!now -&gt; is_full()) return;
        now -&gt; split(); root = now -&gt; parent;
    &#125;
    
    void val_locate(int val, Bnode* &amp;now, int &amp;pos) &#123;
        while(now != nullptr) &#123;
            pos = now -&gt; find(val);
            if(pos != now -&gt; size &amp;&amp; now -&gt; val[pos] == val) return;
            now = now -&gt; son[pos];
        &#125;
        pos = - 1;
    &#125;;
    void precursor(Bnode* &amp;now, int &amp;pos, int first_step) &#123;
        now = now -&gt; son[first_step];
        while(!now -&gt; is_leaf()) now = now -&gt; son[now -&gt; size];
        pos = now -&gt; size - 1;
    &#125;
    bool Adjust(Bnode* &amp;now) &#123;
        Bnode* parent = now -&gt; parent;
        if(!now -&gt; not_enough()) return 1;
        int pos = parent -&gt; get_son_id(now);
        if(!pos) &#123;
             // adjust with son[pos](now), val[pos], son[pos+1](bro)
             Bnode *bro = parent -&gt; son[pos + 1];
             if(bro -&gt; is_enough()) &#123; // the move case
                now -&gt; insert_end(parent -&gt; val[pos], bro -&gt; begin_son());
                parent -&gt; val[pos] = bro -&gt; begin_val();
                bro -&gt; delete_begin();
             &#125;
             else &#123; // the merge case
                now -&gt; insert_end(parent -&gt; val[pos], bro -&gt; begin_son());
                bro -&gt; Move(0, now);
                parent -&gt; delete_mid_after(pos);
                delete bro;
             &#125;
        &#125;
        else &#123;
            // adjust with son[pos-1](bro), val[pos-1], son[pos](now)
             Bnode *bro = parent -&gt; son[pos - 1];
             if(bro -&gt; is_enough()) &#123;
                now -&gt; insert_begin(parent -&gt; val[pos - 1], bro -&gt; end_son());
                parent -&gt; val[pos - 1] = bro -&gt; end_val();
                bro -&gt; delete_end();
             &#125;
             else &#123;
                bro -&gt; insert_end(parent -&gt; val[pos - 1], now -&gt; begin_son());
                now -&gt; Move(0, bro);
                parent -&gt; delete_mid_after(pos - 1);
                delete now;
                now = bro;
             &#125;
        &#125;
        if(root -&gt; empty()) &#123;
            root = now;
            root -&gt; parent = nullptr;
            return 1;
        &#125;
        now = now -&gt; parent;
        return 0;
    &#125;
    void Delete(int val) &#123; // use this function to delete v
        int pos; Bnode* now = root;
        val_locate(val, now, pos);
        if(now == nullptr) return;
        if(!now -&gt; is_leaf()) &#123;
            int ppos; Bnode* pre = now;
            precursor(pre, ppos, pos);
            swap(pre -&gt; val[ppos], now -&gt; val[pos]);
            now = pre; pos = ppos;
        &#125;
        now -&gt; delete_mid_before(pos); // leaf case, deleted
        if(now -&gt; is_root() &amp;&amp; now -&gt; empty()) &#123;
            delete root;
            root = nullptr;
            return;
        &#125;
        while(!now -&gt; is_root() &amp;&amp; !Adjust(now));
    &#125;
    
    
    // use for debugging
    int len, dep;
    char output[123456];
    int ck[123456], tmp[123];
    void write(int x) &#123;
        int tlen = 0;
        if(!x) tmp[++ tlen] = 0;
        while(x) tmp[++ tlen] = x % 10, x /= 10;
        for(int i = tlen; i; i --) output[++ len] = tmp[i] + &#39;0&#39;;
    &#125;
    void dfs(Bnode* now) &#123;
        if(now == nullptr) return;
        output[++ len] = &#39; &#39;; ck[len] = 1;
        dfs(now -&gt; son[0]);
        output[++ len] = &#39; &#39;; ck[len] = -1;
        for(int i = 0; i &lt; now -&gt; size; i ++) &#123;
            write(now -&gt; val[i]);
            output[++ len] = &#39; &#39;; ck[len] = 1;
            dfs(now -&gt; son[i + 1]); 
            output[++ len] = &#39; &#39;; ck[len] = -1;
        &#125;
    &#125;
    void print() &#123;
        len = 0; dep = 0;
        for(int i = 0; i &lt;= 100000; i ++) ck[i] = 0;
        dfs(root);
        for(int i = 1; i &lt;= len; i ++) printf(&quot;%c&quot;, output[i]); 
        // the next part is using for special output
         
        //int maxdep = 0;
        //for(int i = 1; i &lt;= len; i ++) dep += ck[i], maxdep = max(maxdep, dep);
        //for(int D = 0; D &lt;= maxdep; D ++) &#123;
        //    for(int i = 1; i &lt;= len; i ++) dep += ck[i], printf(&quot;%c&quot;, (dep == D) ? output[i] : &#39; &#39;); 
        //    printf(&quot;\n&quot;);
        //&#125;
    &#125;
&#125; T;


int main() &#123;
    for(int i = 1; i &lt;= 10; i ++) T.Insert(i ^ 7);
    T.print();
    return 0;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>codes</category>
      </categories>
      <tags>
        <tag>ds</tag>
      </tags>
  </entry>
  <entry>
    <title>2021杭电多校第二场T9</title>
    <url>/2021/07/23/problem-1/</url>
    <content><![CDATA[<span id="more"></span>

<h4 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h4><p>杭电多校的好题太少了，出题人要么是水平问题，要么是态度问题…</p>
<h4 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h4><p>给定$n$个数$a_1, …, a_n$，询问有多少个三元有序对$(i, j, k)$满足$i &lt; j &lt; k$，并且$a_i a_j a_k$是一个完全平方数</p>
<p>$n \leq 10^5, \max a_i \leq 10^5$</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>首先，我们将$a_i$质因数分解为$p_1^{r_1}…p_k^{r_k}$，不难发现只有$r_1$的奇偶影响答案的统计，因此我们只需要考虑形如$p_1…p_k$的数即可</p>
<p>记$M = 10^5$，分最大质因子$ &gt; \sqrt M$的数和最大质因子$\leq \sqrt M$的数考虑</p>
<p>三元组只可能是下列两种情况之一：</p>
<ul>
<li>三个数的最大质因子都$\leq \sqrt M$，形如这样的数可以爆搜，大概有1600000组</li>
<li>三个数中有两个数的最大质因子$ &gt; \sqrt M$，我们可以枚举最大质因子$p$，如果最大质因子为$p$的数有$&lt; \sqrt M$个，那么我们直接暴力枚举，否则，最大质因子为$p$的数对应的值只会有$&lt; \sqrt M$个，我们按照权值来暴力，此时，由于每个最大质因子$p$的平均复杂度$&lt; \sqrt M$，因此总复杂度小于$M \sqrt M$</li>
</ul>
<p>做法挺明显的….码的时候有一点点细节</p>
<pre><code class="C++">#include &lt;bits/stdc++.h&gt;
using namespace std;

#define ll long long
#define gc getchar
inline int read() &#123;
    int p = 0, w = 1; char c = gc();
    while(c &gt; &#39;9&#39; || c &lt; &#39;0&#39;) &#123; if(c == &#39;-&#39;) w = -1; c = gc(); &#125;
    while(c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;) p = p * 10 + c - &#39;0&#39;, c = gc();
    return p * w;
&#125;

#define rep(io, st, ed) for(int io = st; io &lt;= ed; io ++)
#define drep(io, ed, st) for(int io = ed; io &gt;= st; io --)

const int sid = 1e5 + 5;

int n, M = 1e5;
vector &lt;int&gt; arr[sid];
int _gcd[500][500], mul[500][500];
int maxfac[sid], tr[sid], pr[sid], nop[sid], cnt;
int num[sid], tnum[sid];

int gcd(int a, int b) &#123;
    return b ? gcd(b, a % b) : a;
&#125;

void init() &#123;
    rep(i, 2, M) &#123;
        if(!nop[i]) pr[++ cnt] = i;
        for(int j = 1; j &lt;= cnt; j ++) &#123;
            int p = i * pr[j];
            if(p &gt; M) break; nop[p] = 1;
            if(i % pr[j] == 0) break;
        &#125;
    &#125;
    int sqrt_M = sqrt(M) + 1;
    rep(i, 0, sqrt_M) rep(j, 0, sqrt_M) _gcd[i][j] = gcd(i, j);
    rep(i, 0, sqrt_M) rep(j, 0, sqrt_M) 
        if(i || j) mul[i][j] = i * j / _gcd[i][j] / _gcd[i][j];
        else mul[i][j] = 0;
    rep(i, 1, M) &#123;
        int t = i; tr[i] = 1;
        for(int j = 1; pr[j] * pr[j] &lt;= t; j ++)
            if(t % pr[j] == 0) &#123;
                int num = 0;
                while(t % pr[j] == 0) t /= pr[j], num ++;
                if(num &amp; 1) tr[i] *= pr[j];
            &#125;
        if(t &gt; sqrt_M) maxfac[i] = t;
        else tr[i] *= t;
    &#125;
&#125;

long long ans;
void dfs(int dep, int v1, int v2, int v3) &#123;
    if(dep == 0) &#123;
        if(v1 == v2 &amp;&amp; v1 == v3) ans += 1ll * num[v1] * (num[v1] - 1) * (num[v1] - 2) / 6;
        else if(v1 == v2) ans += 1ll * num[v1] * (num[v1] - 1) / 2 * num[v3];
        else ans += 1ll * num[v1] * num[v2] * num[v3];
        return;
        
    &#125;
    dfs(dep - 1, v1, v2, v3);
    if(v1 == v2 &amp;&amp; v1 == v3) &#123;
        int v1_ = v1 * pr[dep];
        if(v1_ &lt;= M) dfs(dep - 1, v1_, v1_, v1);
        return;
    &#125;
    if(v1 == v2) &#123;
        int v1_ = v1 * pr[dep], v3_ = v3 * pr[dep];
        if(v1_ &lt;= M) dfs(dep - 1, v1_, v1_, v3);
        if(v1_ &lt;= M &amp;&amp; v3_ &lt;= M) dfs(dep - 1, v1, v1_, v3_);
        return;
    &#125;
    int v1_ = v1 * pr[dep], v2_ = v2 * pr[dep], v3_ = v3 * pr[dep];
    if(v1_ &lt;= M &amp;&amp; v2_ &lt;= M) dfs(dep - 1, v1_, v2_, v3);
    if(v1_ &lt;= M &amp;&amp; v3_ &lt;= M) dfs(dep - 1, v1_, v2, v3_);
    if(v2_ &lt;= M &amp;&amp; v3_ &lt;= M) dfs(dep - 1, v1, v2_, v3_);
&#125;

void solve() &#123;
    n = read();
    ans = 0;
    rep(i, 1, M) num[i] = 0;
    rep(i, 1, n) &#123;
        int x = read();
        if(!maxfac[x]) num[ tr[x] ] ++;
        else arr[ maxfac[x] ].push_back(tr[x]);
    &#125;
    
    int sqrt_M = sqrt(M), lim = 0;
    while(pr[lim] &lt;= sqrt_M) lim ++;
    
    dfs(lim, 1, 1, 1);
    rep(i, lim + 1, cnt) &#123;
        int p = pr[i];
        if(arr[p].size() &lt; sqrt_M) &#123;
            rep(i, 0, (int)arr[p].size() - 1) rep(j, 0, i - 1)
                ans += num[ mul[ arr[p][i] ][ arr[p][j] ] ];
        &#125;
        else &#123;
            int Lim = M / pr[i];
            rep(i, 1, Lim) tnum[i] = 0;
            for(auto x : arr[p]) tnum[x] ++;
            rep(i, 1, Lim) if(tnum[i]) rep(j, 1, i) if(tnum[j]) &#123;
                if(i == j) ans += 1ll * tnum[i] * (tnum[i] - 1) / 2 * num[ mul[i][j] ];
                else ans += 1ll * tnum[i] * tnum[j] * num[ mul[i][j] ];
            &#125;
        &#125;
        arr[p].clear();
    &#125;
    
    printf(&quot;%lld\n&quot;, ans);
&#125;

int main() &#123;
    init();
    int T = read();
    while(T --) solve();
    return 0;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>problems</category>
      </categories>
      <tags>
        <tag>number_theory</tag>
      </tags>
  </entry>
</search>
