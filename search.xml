<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021暑期hdu多校3</title>
    <url>/2021/08/01/2021%E6%9A%91%E6%9C%9Fhdu%E5%A4%9A%E6%A0%A13/</url>
    <content><![CDATA[<span id="more"></span>
<p>老鸽子了</p>
<h4 id="a">A</h4>
<h5 id="吐槽">吐槽</h5>
<p>出题人的符号管理乱七八遭</p>
<h4 id="e-didnt-i-say-to-make-my-abilities-average-in-the-next-life">E Didn't I Say to Make My Abilities Average in the Next Life?!</h4>
<h5 id="吐槽-1">吐槽</h5>
<p>二次元题目</p>
<p>看完题解感觉自己是...</p>
<h5 id="题意">题意</h5>
<p>给定一个序列，<span class="math inline">\(q\)</span>组询问，每次询问一个区间的所有子区间的最大值的和</p>
<h5 id="题解">题解</h5>
<p>题解的两个做法感觉都有点复杂，看不太懂，自己写一个</p>
<p>离线从左到右扫描线，当我们扫到点<span class="math inline">\(r\)</span>时，我们对于每个点<span class="math inline">\(l\)</span>，维护<span class="math inline">\(max_r[l]\)</span>表示<span class="math inline">\([l,r]\)</span>中的最大值，那么<span class="math inline">\(\sum max_i[l]\)</span>将表示<span class="math inline">\([l,l], [l,l+1],...,[l,r]\)</span>的答案的和，从而<span class="math inline">\(\sum_{l \leq L \leq r} \sum max_i[L]\)</span>将是答案</p>
<p>我们可以用线段树来做到这一点，理清之后还挺好写的</p>
<pre><code>#include &lt;bits/stdc++.h&gt;
using namespace std;
    
#define gc getchar
inline int read() &#123;
    int p = 0, w = 1; char c = gc();
    while(c &gt; &#39;9&#39; || c &lt; &#39;0&#39;) &#123; if(c == &#39;-&#39;) w = -1; c = gc(); &#125;
    while(c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;) &#123; p = p * 10 + c - &#39;0&#39;; c = gc(); &#125;
    return p * w;
&#125;

#define rep(io, st, ed) for(int io = st; io &lt;= ed; io ++)

const int mod = 1e9 + 7;
const int sid = 1e6 + 5;
const int inf = 1e9 + 5;

inline void inc(int &amp;a, int b) &#123; a += b; if(a &gt;= mod) a -= mod; &#125;
inline void dec(int &amp;a, int b) &#123; a -= b; if(a &lt; 0) a += mod; &#125;
inline int Inc(int a, int b) &#123; return (a + b &gt;= mod) ? a + b - mod : a + b; &#125;
inline int Dec(int a, int b) &#123; return (a - b &lt; 0) ? a - b + mod : a - b; &#125;
inline int mul(int a, int b) &#123; return 1ll * a * b % mod; &#125;
inline int fp(int a, int k) &#123; 
    int ret = 1; 
    while(k) &#123; 
        if(k &amp; 1) ret = mul(ret, a); 
        a = mul(a, a); k &gt;&gt;= 1; 
    &#125;
    return ret;
&#125;

struct query &#123;
    int l, id;
    query() &#123;&#125;
    query(int _l, int _id) : l(_l), id(_id) &#123;&#125;
&#125; ;
vector &lt;query&gt; Q[sid];

int n, m;
int a[sid],  ans[sid];
int lst_time[sid], sumtag[sid], sum[sid];
int nowv[sid], presum[sid], pret[sid], newt[sid];

#define ls (o &lt;&lt; 1)
#define rs (o &lt;&lt; 1 | 1)
void build(int o, int l, int r) &#123;
    lst_time[o] = sumtag[o] = sum[o] = 0;
    nowv[o] = presum[o] = pret[o] = newt[o] = 0;
    if(l == r) return;
    int mid = (l + r) &gt;&gt; 1;
    build(ls, l, mid);
    build(rs, mid + 1, r);
&#125;

void down(int o, int l, int r, int nv, int ps, int pt, int nt) &#123;
    inc(sum[o], 1ll * sumtag[o] * (pt - lst_time[o]) % mod);
    inc(sum[o], 1ll * ps * (r - l + 1) % mod);
    if(!nowv[o])  // 先前没有标记
        nowv[o] = nv, presum[o] = ps, pret[o] = pt, newt[o] = nt; 
    else &#123;
        inc(presum[o], ps);
        inc(presum[o], 1ll * nowv[o] * (pt - newt[o]) % mod);
        newt[o] = nt; nowv[o] = nv;
    &#125;
    lst_time[o] = nt; sumtag[o] = mul(r - l + 1, nv);
&#125;

void pushdown(int o, int l, int r) &#123;
    if(!nowv[o]) return;
    int mid = (l + r) &gt;&gt; 1;
    down(ls, l, mid, nowv[o], presum[o], pret[o], newt[o]);
    down(rs, mid + 1, r, nowv[o], presum[o], pret[o], newt[o]);
    nowv[o] = 0; presum[o] = 0;
&#125;

void pushup(int o, int l, int r, int t) &#123;
    inc(sum[o], 1ll * (t - lst_time[o]) * sumtag[o] % mod);
    sumtag[o] = Inc(sumtag[ls], sumtag[rs]);
    lst_time[o] = t;
&#125;

void mdf(int o, int l, int r, int ml, int mr, int v, int t) &#123;
    if(ml &gt; r || mr &lt; l) return;
    if(ml &lt;= l &amp;&amp; mr &gt;= r) &#123; down(o, l, r, v, 0, t, t); return; &#125;
    int mid = (l + r) &gt;&gt; 1;
    pushdown(o, l, r);
    mdf(ls, l, mid, ml, mr, v, t);
    mdf(rs, mid + 1, r, ml, mr, v, t);
    pushup(o, l, r, t);
&#125;

int qry(int o, int l, int r, int ml, int mr, int t) &#123;
    if(ml &gt; r || mr &lt; l) return 0;
    if(ml &lt;= l &amp;&amp; mr &gt;= r) return Inc(sum[o], 1ll * sumtag[o] * (t-lst_time[o]) % mod);
    int mid = (l + r) &gt;&gt; 1;
    pushdown(o, l, r);
    return Inc(qry(ls, l, mid, ml, mr, t), qry(rs, mid + 1, r, ml, mr, t));
&#125;

int st[sid], top;
void segment_work(int opt = 0) &#123;
    a[0] = -inf; top = 0;
    build(1, 1, n);
    rep(r, 1, n) &#123;
        while(top &amp;&amp; a[r] &gt;= a[ st[top] ]) top --;
        mdf(1, 1, n, st[top] + 1, r, (a[r] + mod) % mod, r - 1);
        st[++ top] = r;
        for(auto x : Q[r]) &#123;
            int l = x.l, id = x.id;
            if(!opt) inc(ans[id], qry(1, 1, n, l, r, r));
            else dec(ans[id], qry(1, 1, n, l, r, r));
            if(opt) &#123;
                int len = r - l + 1;
                ans[id] = mul(ans[id], fp(1ll * len * (len + 1) % mod, mod - 2));
            &#125;
        &#125;
    &#125;
&#125;

void solve() &#123;
    n = read(); m = read();
    rep(i, 1, n) a[i] = read(), Q[i].clear();
    rep(i, 1, m) &#123;
        int l = read(), r = read();
        Q[r].push_back( query(l, i) );
        ans[i] = 0;
    &#125;
    segment_work();
    rep(i, 1, n) a[i] = -a[i];
    segment_work(1);
    rep(i, 1, m) printf(&quot;%d\n&quot;, ans[i]);
&#125;

int main() &#123;
    int T = read();
    while(T --) solve();
    return 0;
&#125;</code></pre>
<h4 id="g-increasing-subsequence">G Increasing Subsequence</h4>
<h5 id="题意-1">题意</h5>
<p>给定一个排列，求极大上升子序列的数量</p>
<h5 id="题解-1">题解</h5>
<p><span class="math inline">\(n^2\)</span>做法不难想到，设<span class="math inline">\(f[i]\)</span>表示<span class="math inline">\(a_1,...,a_i\)</span>中的极大上升子序列的数量，考虑转移，<span class="math inline">\(j\)</span>能转移到<span class="math inline">\(i\)</span>，当且仅当<span class="math inline">\(a_j &lt; a_i\)</span>，并且区间<span class="math inline">\([j+1, i-1]\)</span>中，没有在<span class="math inline">\([a_j,a_i]\)</span>中的数</p>
<p>抽象一下，也即能转移到<span class="math inline">\(f[i]\)</span>的<span class="math inline">\(j\)</span>将构成一个满足下标<span class="math inline">\(j&lt;i\)</span>，权值<span class="math inline">\(a_j &lt; a_i\)</span>的数构成的单调栈</p>
<p>我们可以考虑用分治解决下标这一维，对于<span class="math inline">\([l, r]\)</span>，考虑<span class="math inline">\([l, mid]\)</span>对<span class="math inline">\([mid + 1, r]\)</span>的贡献</p>
<p>由于分治，<span class="math inline">\([mid + 1, r]\)</span>中的元素不存在下标上的影响，对权值上的影响，只需要预处理出<span class="math inline">\([mid + 1, r]\)</span>中每个数左边比它小的最大数即可</p>
<p>对于<span class="math inline">\([l, mid]\)</span>而言，我们按权值大小来建立单调栈，右边相应的按照权值在单调栈上二分即可</p>
]]></content>
      <categories>
        <category>problems</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>一个简单的估计</title>
    <url>/2021/07/22/1-/</url>
    <content><![CDATA[<span id="more"></span>
<h4 id="问题">问题</h4>
<p>我们不妨思考这样的一个问题</p>
<p>对于有<span class="math inline">\(n\)</span>个点，<span class="math inline">\(m\)</span>条边的无向图<span class="math inline">\(G\)</span>（不妨认为它没有重边和自环），记<span class="math inline">\(V\)</span>为其点集，<span class="math inline">\(E\)</span>为其边集，给予每个点一个权值<span class="math inline">\(c_i\)</span>，定义函数<span class="math inline">\(f(G) = \sum_{uv \in E} [c_u &gt; c_v]\)</span></p>
<p>现在，不妨设初始状态为<span class="math inline">\(G_0\)</span>，并且我们有<span class="math inline">\(q\)</span>次修改，每次修改将提升一个点的权值，设前<span class="math inline">\(i\)</span>次修改后的图为<span class="math inline">\(G_i\)</span>，那么<span class="math inline">\(S = f(G_0) + \sum_{i=0}^{q-1} |f(G_{i+1}) - f(G_i)|\)</span>大概有多大呢？</p>
<p>这个式子相当于描述每个点维护比自己大的邻点集合时的一种复杂程度</p>
<h4 id="思考">思考</h4>
<p>我们可以先构造一类特殊的操作：<span class="math inline">\(\sqrt m\)</span>个点的完全图，初始时的权值为<span class="math inline">\(1, 2, 3, ..., \sqrt m\)</span>，之后从<span class="math inline">\(1\)</span>到<span class="math inline">\(\sqrt m\)</span>循环操作，每次将<span class="math inline">\(i\)</span>号节点的值增加<span class="math inline">\(\sqrt m\)</span>，这样，每次大小关系的平均变动数量将是一个<span class="math inline">\(\sqrt m\)</span>级的大小</p>
<p>上述构造可以揭示<span class="math inline">\(\sqrt m\)</span>是一个下限，下面我们证明它也是一个上限</p>
<p>我们不妨根据点度分类，称度数<span class="math inline">\(&gt; \sqrt m\)</span>的点为大点，而度数$ m$的点为小点</p>
<p>显然，我们对小点操作时，其带来的变动不可能超过<span class="math inline">\(\sqrt m\)</span>，而度数<span class="math inline">\(&gt; \sqrt m\)</span>的大点也只可能有<span class="math inline">\(\sqrt m\)</span>个，因此操作大点时，对大点之间的大小关系的变动也不可能超过<span class="math inline">\(\sqrt m\)</span>个，那么我们只需要估计大点和小点之间的关系变动情况了</p>
<p>对于这部分，我们设想有这样的一个势函数<span class="math inline">\(\phi(G)\)</span>，当操作小点时，每改变一次其与大点之间的关系，那么这个势函数增加<span class="math inline">\(1\)</span>，而当操作大点时，每改变一次其与小点之间的关系，则减小<span class="math inline">\(1\)</span></p>
<p>每次操作小点时，<span class="math inline">\(\phi(G)\)</span>不会增加超过<span class="math inline">\(\sqrt m\)</span>，而操作大点时，<span class="math inline">\(\phi(G)\)</span>总是减小的，并且<span class="math inline">\(\phi(G)\)</span>非负是显而易见的，用<span class="math inline">\(\phi(G)\)</span>来刻画大点和小点之间的关系变动情况</p>
<p>我们可以知道题述函数大概具有<span class="math inline">\(O(m + q \sqrt m)\)</span>的复杂程度...</p>
]]></content>
      <categories>
        <category>thoughts</category>
      </categories>
      <tags>
        <tag>complexity</tag>
      </tags>
  </entry>
  <entry>
    <title>Btree</title>
    <url>/2021/07/23/Btree/</url>
    <content><![CDATA[<span id="more"></span>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;bits/stdc++.h&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> <span class="kw">namespace</span> std<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="dt">int</span> M <span class="op">=</span> <span class="dv">5</span><span class="op">;</span> <span class="co">// 几路的B树</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="dt">int</span> INF <span class="op">=</span> <span class="fl">1e9</span> <span class="op">+</span> <span class="dv">5</span><span class="op">;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> BTree <span class="op">&#123;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> Bnode<span class="op">;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    Bnode <span class="op">*</span>root<span class="op">;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> Bnode <span class="op">&#123;</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> size<span class="op">,</span> val<span class="op">[</span>M <span class="op">+</span> <span class="dv">1</span><span class="op">];</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>        Bnode <span class="op">*</span>parent<span class="op">,</span> <span class="op">*</span>son<span class="op">[</span>M <span class="op">+</span> <span class="dv">2</span><span class="op">];</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        Bnode<span class="op">(</span>Bnode<span class="op">*</span> <span class="va">parent_</span> <span class="op">=</span> <span class="kw">nullptr</span><span class="op">)</span> <span class="op">&#123;</span> </span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>            size <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> parent <span class="op">=</span> <span class="va">parent_</span><span class="op">;</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;=</span> M<span class="op">;</span> i <span class="op">++)</span> son<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> <span class="kw">nullptr</span><span class="op">;</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> <span class="op">&amp;</span>begin_val<span class="op">()</span> <span class="op">&#123;</span> <span class="cf">return</span> val<span class="op">[</span><span class="dv">0</span><span class="op">];</span> <span class="op">&#125;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>        Bnode <span class="op">*&amp;</span>begin_son<span class="op">()</span> <span class="op">&#123;</span> <span class="cf">return</span> son<span class="op">[</span><span class="dv">0</span><span class="op">];</span> <span class="op">&#125;</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> <span class="op">&amp;</span>end_val<span class="op">()</span> <span class="op">&#123;</span> <span class="cf">return</span> val<span class="op">[</span>size <span class="op">-</span> <span class="dv">1</span><span class="op">];</span> <span class="op">&#125;</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>        Bnode <span class="op">*</span>end_son<span class="op">()</span> <span class="op">&#123;</span> <span class="cf">return</span> son<span class="op">[</span>size<span class="op">];</span> <span class="op">&#125;</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>        <span class="dt">bool</span> empty<span class="op">()</span> <span class="op">&#123;</span> <span class="cf">return</span> <span class="op">!</span>size<span class="op">;</span> <span class="op">&#125;</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>        <span class="dt">bool</span> is_full<span class="op">()</span> <span class="op">&#123;</span> <span class="cf">return</span> size <span class="op">&gt;=</span> M<span class="op">;</span> <span class="op">&#125;</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>        <span class="dt">bool</span> is_enough<span class="op">()</span> <span class="op">&#123;</span> <span class="cf">return</span> size <span class="op">&gt;=</span> ceil<span class="op">(</span>M <span class="op">/</span> <span class="fl">2.0</span><span class="op">);</span> <span class="op">&#125;</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>        <span class="dt">bool</span> not_enough<span class="op">()</span> <span class="op">&#123;</span> <span class="cf">return</span> size <span class="op">&lt;</span> ceil<span class="op">(</span>M <span class="op">/</span> <span class="fl">2.0</span><span class="op">)</span> <span class="op">-</span> <span class="dv">1</span><span class="op">;</span> <span class="op">&#125;</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>        <span class="dt">bool</span> is_leaf<span class="op">()</span> <span class="op">&#123;</span> <span class="cf">return</span> <span class="op">!</span>size <span class="op">||</span> <span class="op">(</span>son<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">==</span> <span class="kw">nullptr</span><span class="op">);</span> <span class="op">&#125;</span></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>        <span class="dt">bool</span> is_root<span class="op">()</span> <span class="op">&#123;</span> <span class="cf">return</span> parent <span class="op">==</span> <span class="kw">nullptr</span><span class="op">;</span> <span class="op">&#125;</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> set_parent<span class="op">(</span>Bnode <span class="op">*</span>nson<span class="op">)</span> <span class="op">&#123;</span> <span class="cf">if</span><span class="op">(</span>nson<span class="op">)</span> nson <span class="op">-&gt;</span> parent <span class="op">=</span> <span class="kw">this</span><span class="op">;</span> <span class="op">&#125;</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> print<span class="op">()</span> <span class="op">&#123;</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span><span class="op">(!</span>size<span class="op">)</span> printf<span class="op">(</span><span class="st">&quot;empty!</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> size<span class="op">;</span> i <span class="op">++)</span> printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%d</span><span class="st"> &quot;</span><span class="op">,</span> val<span class="op">[</span>i<span class="op">]);</span> </span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>            printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> find<span class="op">(</span><span class="dt">int</span> <span class="va">val_</span><span class="op">)</span> <span class="op">&#123;</span> <span class="co">// if in (val[i], val[i + 1] ], then in son[i + 1]</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> size<span class="op">;</span> i <span class="op">++)</span> <span class="cf">if</span><span class="op">(</span><span class="va">val_</span> <span class="op">&lt;=</span> val<span class="op">[</span>i<span class="op">])</span> <span class="cf">return</span> i<span class="op">;</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> size<span class="op">;</span></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> get_val_id<span class="op">(</span><span class="dt">int</span> <span class="va">val_</span><span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> size<span class="op">;</span> i <span class="op">++)</span> <span class="cf">if</span><span class="op">(</span>val<span class="op">[</span>i<span class="op">]</span> <span class="op">==</span> <span class="va">val_</span><span class="op">)</span> <span class="cf">return</span> i<span class="op">;</span></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> get_son_id<span class="op">(</span>Bnode <span class="op">*</span><span class="va">son_</span><span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;=</span> size<span class="op">;</span> i <span class="op">++)</span> <span class="cf">if</span><span class="op">(</span>son<span class="op">[</span>i<span class="op">]</span> <span class="op">==</span> <span class="va">son_</span><span class="op">)</span> <span class="cf">return</span> i<span class="op">;</span></span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> rightshift<span class="op">(</span><span class="dt">int</span> pos<span class="op">)</span> <span class="op">&#123;</span> <span class="co">// move son[pos],val[pos],...son[size], thus son[pos], val[pos] are empty, noticing size ++</span></span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> size <span class="op">-</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&gt;=</span> pos<span class="op">;</span> i <span class="op">--)</span> val<span class="op">[</span>i <span class="op">+</span> <span class="dv">1</span><span class="op">]</span> <span class="op">=</span> val<span class="op">[</span>i<span class="op">];</span></span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> size<span class="op">;</span> i <span class="op">&gt;=</span> pos<span class="op">;</span> i <span class="op">--)</span> son<span class="op">[</span>i <span class="op">+</span> <span class="dv">1</span><span class="op">]</span> <span class="op">=</span> son<span class="op">[</span>i<span class="op">];</span></span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>            size <span class="op">++;</span></span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> rightshift2<span class="op">(</span><span class="dt">int</span> pos<span class="op">)</span> <span class="op">&#123;</span> <span class="co">// move val[pos],...,son[size], thus val[pos],son[pos+1] are empty, noticing size ++</span></span>
<span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>            rightshift<span class="op">(</span>pos <span class="op">+</span> <span class="dv">1</span><span class="op">);</span> val<span class="op">[</span>pos <span class="op">+</span> <span class="dv">1</span><span class="op">]</span> <span class="op">=</span> val<span class="op">[</span>pos<span class="op">];</span></span>
<span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> leftshift<span class="op">(</span><span class="dt">int</span> pos<span class="op">)</span> <span class="op">&#123;</span> <span class="co">// move son[pos],val[pos],...,son[size], thus son[pos], val[pos] can be deleted, noticing size --</span></span>
<span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a>            size <span class="op">--;</span></span>
<span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> pos<span class="op">;</span> i <span class="op">&lt;=</span> size <span class="op">-</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">++)</span> val<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> val<span class="op">[</span>i <span class="op">+</span> <span class="dv">1</span><span class="op">];</span></span>
<span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> pos<span class="op">;</span> i <span class="op">&lt;=</span> size<span class="op">;</span> i <span class="op">++)</span> son<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> son<span class="op">[</span>i <span class="op">+</span> <span class="dv">1</span><span class="op">];</span></span>
<span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> leftshift2<span class="op">(</span><span class="dt">int</span> pos<span class="op">)</span> <span class="op">&#123;</span> <span class="co">// empty val[pos], son[pos + 1], noticing size --</span></span>
<span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a>            val<span class="op">[</span>pos<span class="op">]</span> <span class="op">=</span> val<span class="op">[</span>pos <span class="op">+</span> <span class="dv">1</span><span class="op">];</span> leftshift<span class="op">(</span>pos <span class="op">+</span> <span class="dv">1</span><span class="op">);</span> </span>
<span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> insert_begin<span class="op">(</span><span class="dt">int</span> <span class="va">val_</span><span class="op">,</span> Bnode <span class="op">*</span><span class="va">son_</span> <span class="op">=</span> <span class="kw">nullptr</span><span class="op">)</span> <span class="op">&#123;</span>  </span>
<span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a>            rightshift<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span>
<span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a>            val<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> <span class="va">val_</span><span class="op">;</span></span>
<span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a>            son<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> <span class="va">son_</span><span class="op">;</span> set_parent<span class="op">(</span><span class="va">son_</span><span class="op">);</span></span>
<span id="cb1-67"><a href="#cb1-67" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-68"><a href="#cb1-68" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> insert_end<span class="op">(</span><span class="dt">int</span> <span class="va">val_</span><span class="op">,</span> Bnode <span class="op">*</span><span class="va">son_</span> <span class="op">=</span> <span class="kw">nullptr</span><span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-69"><a href="#cb1-69" aria-hidden="true" tabindex="-1"></a>            val<span class="op">[</span>size <span class="op">++]</span> <span class="op">=</span> <span class="va">val_</span><span class="op">;</span> </span>
<span id="cb1-70"><a href="#cb1-70" aria-hidden="true" tabindex="-1"></a>            son<span class="op">[</span>size<span class="op">]</span> <span class="op">=</span> <span class="va">son_</span><span class="op">;</span> set_parent<span class="op">(</span><span class="va">son_</span><span class="op">);</span></span>
<span id="cb1-71"><a href="#cb1-71" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-72"><a href="#cb1-72" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> insert_mid_before<span class="op">(</span><span class="dt">int</span> <span class="va">pos_</span><span class="op">,</span> <span class="dt">int</span> <span class="va">val_</span><span class="op">,</span> Bnode <span class="op">*</span><span class="va">son_</span> <span class="op">=</span> <span class="kw">nullptr</span><span class="op">)</span> <span class="op">&#123;</span> <span class="co">// insert son[pos], val[pos]</span></span>
<span id="cb1-73"><a href="#cb1-73" aria-hidden="true" tabindex="-1"></a>            rightshift<span class="op">(</span><span class="va">pos_</span><span class="op">);</span></span>
<span id="cb1-74"><a href="#cb1-74" aria-hidden="true" tabindex="-1"></a>            val<span class="op">[</span><span class="va">pos_</span><span class="op">]</span> <span class="op">=</span> <span class="va">val_</span><span class="op">;</span></span>
<span id="cb1-75"><a href="#cb1-75" aria-hidden="true" tabindex="-1"></a>            son<span class="op">[</span><span class="va">pos_</span><span class="op">]</span> <span class="op">=</span> <span class="va">son_</span><span class="op">;</span> set_parent<span class="op">(</span><span class="va">son_</span><span class="op">);</span></span>
<span id="cb1-76"><a href="#cb1-76" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-77"><a href="#cb1-77" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> insert_mid_after<span class="op">(</span><span class="dt">int</span> <span class="va">pos_</span><span class="op">,</span> <span class="dt">int</span> <span class="va">val_</span><span class="op">,</span> Bnode <span class="op">*</span><span class="va">son_</span> <span class="op">=</span> <span class="kw">nullptr</span><span class="op">)</span> <span class="op">&#123;</span> <span class="co">// insert val[pos], son[pos + 1]</span></span>
<span id="cb1-78"><a href="#cb1-78" aria-hidden="true" tabindex="-1"></a>            rightshift2<span class="op">(</span><span class="va">pos_</span><span class="op">);</span></span>
<span id="cb1-79"><a href="#cb1-79" aria-hidden="true" tabindex="-1"></a>            val<span class="op">[</span><span class="va">pos_</span><span class="op">]</span> <span class="op">=</span> <span class="va">val_</span><span class="op">;</span></span>
<span id="cb1-80"><a href="#cb1-80" aria-hidden="true" tabindex="-1"></a>            son<span class="op">[</span><span class="va">pos_</span> <span class="op">+</span> <span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="va">son_</span><span class="op">;</span> set_parent<span class="op">(</span><span class="va">son_</span><span class="op">);</span></span>
<span id="cb1-81"><a href="#cb1-81" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-82"><a href="#cb1-82" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> delete_begin<span class="op">()</span> <span class="op">&#123;</span> <span class="co">// delete son[0], val[0]</span></span>
<span id="cb1-83"><a href="#cb1-83" aria-hidden="true" tabindex="-1"></a>            leftshift<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span>
<span id="cb1-84"><a href="#cb1-84" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-85"><a href="#cb1-85" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> delete_end<span class="op">()</span> <span class="op">&#123;</span> <span class="co">// delete val[size - 1], son[size]</span></span>
<span id="cb1-86"><a href="#cb1-86" aria-hidden="true" tabindex="-1"></a>            size <span class="op">--;</span></span>
<span id="cb1-87"><a href="#cb1-87" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-88"><a href="#cb1-88" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> delete_mid_before<span class="op">(</span><span class="dt">int</span> <span class="va">pos_</span><span class="op">)</span> <span class="op">&#123;</span> <span class="co">// delete son[pos], val[pos]</span></span>
<span id="cb1-89"><a href="#cb1-89" aria-hidden="true" tabindex="-1"></a>            leftshift<span class="op">(</span><span class="va">pos_</span><span class="op">);</span></span>
<span id="cb1-90"><a href="#cb1-90" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-91"><a href="#cb1-91" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> delete_mid_after<span class="op">(</span><span class="dt">int</span> <span class="va">pos_</span><span class="op">)</span> <span class="op">&#123;</span> <span class="co">//delete val[pos], son[pos + 1]</span></span>
<span id="cb1-92"><a href="#cb1-92" aria-hidden="true" tabindex="-1"></a>            leftshift2<span class="op">(</span><span class="va">pos_</span><span class="op">);</span></span>
<span id="cb1-93"><a href="#cb1-93" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-94"><a href="#cb1-94" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> insert_leaf<span class="op">(</span><span class="dt">int</span> <span class="va">val_</span><span class="op">)</span> <span class="op">&#123;</span> <span class="co">// leaf case</span></span>
<span id="cb1-95"><a href="#cb1-95" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> <span class="va">pos_</span> <span class="op">=</span> find<span class="op">(</span><span class="va">val_</span><span class="op">);</span></span>
<span id="cb1-96"><a href="#cb1-96" aria-hidden="true" tabindex="-1"></a>            insert_mid_before<span class="op">(</span><span class="va">pos_</span><span class="op">,</span> <span class="va">val_</span><span class="op">);</span></span>
<span id="cb1-97"><a href="#cb1-97" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-98"><a href="#cb1-98" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> Move<span class="op">(</span><span class="dt">int</span> L_<span class="op">,</span> Bnode<span class="op">*</span> Rnode<span class="op">)</span> <span class="op">&#123;</span> <span class="co">//move val[L_],son[L+1]...,val[size-1],son[size] from (this) to Rnode</span></span>
<span id="cb1-99"><a href="#cb1-99" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> R_ <span class="op">=</span> <span class="kw">this</span> <span class="op">-&gt;</span> size <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-100"><a href="#cb1-100" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> L_<span class="op">;</span> i <span class="op">&lt;=</span> R_<span class="op">;</span> i <span class="op">++)</span> Rnode <span class="op">-&gt;</span> insert_end<span class="op">(</span>val<span class="op">[</span>i<span class="op">],</span> son<span class="op">[</span>i <span class="op">+</span> <span class="dv">1</span><span class="op">]);</span></span>
<span id="cb1-101"><a href="#cb1-101" aria-hidden="true" tabindex="-1"></a>             size <span class="op">-=</span> R_ <span class="op">-</span> L_ <span class="op">+</span> <span class="dv">1</span><span class="op">;</span> <span class="co">// equals to &quot;for(int i = L_; i &lt;= R_; i ++) delete_end();&quot;</span></span>
<span id="cb1-102"><a href="#cb1-102" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-103"><a href="#cb1-103" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> split<span class="op">()</span> <span class="op">&#123;</span></span>
<span id="cb1-104"><a href="#cb1-104" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span><span class="op">(</span>parent <span class="op">==</span> <span class="kw">nullptr</span><span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-105"><a href="#cb1-105" aria-hidden="true" tabindex="-1"></a>                parent <span class="op">=</span> <span class="kw">new</span> Bnode<span class="op">();</span></span>
<span id="cb1-106"><a href="#cb1-106" aria-hidden="true" tabindex="-1"></a>                parent <span class="op">-&gt;</span> son<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> <span class="kw">this</span><span class="op">;</span></span>
<span id="cb1-107"><a href="#cb1-107" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span>
<span id="cb1-108"><a href="#cb1-108" aria-hidden="true" tabindex="-1"></a>            Bnode<span class="op">*</span> brother <span class="op">=</span> <span class="kw">new</span> Bnode<span class="op">(</span>parent<span class="op">);</span></span>
<span id="cb1-109"><a href="#cb1-109" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> lr <span class="op">=</span> ceil<span class="op">(</span>M <span class="op">/</span> <span class="fl">2.0</span><span class="op">)</span> <span class="op">-</span> <span class="dv">2</span><span class="op">,</span> rl <span class="op">=</span> lr <span class="op">+</span> <span class="dv">2</span><span class="op">,</span> pos <span class="op">=</span> parent <span class="op">-&gt;</span> get_son_id<span class="op">(</span><span class="kw">this</span><span class="op">);</span></span>
<span id="cb1-110"><a href="#cb1-110" aria-hidden="true" tabindex="-1"></a>            parent <span class="op">-&gt;</span> insert_mid_after<span class="op">(</span>pos<span class="op">,</span> val<span class="op">[</span>lr <span class="op">+</span> <span class="dv">1</span><span class="op">],</span> brother<span class="op">);</span></span>
<span id="cb1-111"><a href="#cb1-111" aria-hidden="true" tabindex="-1"></a>            Move<span class="op">(</span>rl<span class="op">,</span> brother<span class="op">);</span> </span>
<span id="cb1-112"><a href="#cb1-112" aria-hidden="true" tabindex="-1"></a>            brother <span class="op">-&gt;</span> son<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> <span class="kw">this</span> <span class="op">-&gt;</span> end_son<span class="op">();</span> </span>
<span id="cb1-113"><a href="#cb1-113" aria-hidden="true" tabindex="-1"></a>            brother <span class="op">-&gt;</span> set_parent<span class="op">(</span>brother <span class="op">-&gt;</span> son<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb1-114"><a href="#cb1-114" aria-hidden="true" tabindex="-1"></a>            <span class="kw">this</span> <span class="op">-&gt;</span> delete_end<span class="op">();</span></span>
<span id="cb1-115"><a href="#cb1-115" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-116"><a href="#cb1-116" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;;</span></span>
<span id="cb1-117"><a href="#cb1-117" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> Insert<span class="op">(</span><span class="dt">int</span> val<span class="op">)</span> <span class="op">&#123;</span> <span class="co">// use this function to insert v</span></span>
<span id="cb1-118"><a href="#cb1-118" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span>root <span class="op">==</span> <span class="kw">nullptr</span><span class="op">)</span> root <span class="op">=</span> <span class="kw">new</span> Bnode<span class="op">();</span></span>
<span id="cb1-119"><a href="#cb1-119" aria-hidden="true" tabindex="-1"></a>        Bnode <span class="op">*</span>now <span class="op">=</span> root<span class="op">;</span></span>
<span id="cb1-120"><a href="#cb1-120" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span><span class="op">(!</span>now <span class="op">-&gt;</span> is_leaf<span class="op">())</span></span>
<span id="cb1-121"><a href="#cb1-121" aria-hidden="true" tabindex="-1"></a>            now <span class="op">=</span> now <span class="op">-&gt;</span> son<span class="op">[</span>now <span class="op">-&gt;</span> find<span class="op">(</span>val<span class="op">)];</span></span>
<span id="cb1-122"><a href="#cb1-122" aria-hidden="true" tabindex="-1"></a>        now <span class="op">-&gt;</span> insert_leaf<span class="op">(</span>val<span class="op">);</span></span>
<span id="cb1-123"><a href="#cb1-123" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span><span class="op">(!</span>now <span class="op">-&gt;</span> is_root<span class="op">())</span> <span class="op">&#123;</span></span>
<span id="cb1-124"><a href="#cb1-124" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span><span class="op">(!</span>now <span class="op">-&gt;</span> is_full<span class="op">())</span> <span class="cf">return</span><span class="op">;</span></span>
<span id="cb1-125"><a href="#cb1-125" aria-hidden="true" tabindex="-1"></a>            now <span class="op">-&gt;</span> split<span class="op">();</span></span>
<span id="cb1-126"><a href="#cb1-126" aria-hidden="true" tabindex="-1"></a>            now <span class="op">=</span> now <span class="op">-&gt;</span> parent<span class="op">;</span></span>
<span id="cb1-127"><a href="#cb1-127" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-128"><a href="#cb1-128" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(!</span>now <span class="op">-&gt;</span> is_full<span class="op">())</span> <span class="cf">return</span><span class="op">;</span></span>
<span id="cb1-129"><a href="#cb1-129" aria-hidden="true" tabindex="-1"></a>        now <span class="op">-&gt;</span> split<span class="op">();</span> root <span class="op">=</span> now <span class="op">-&gt;</span> parent<span class="op">;</span></span>
<span id="cb1-130"><a href="#cb1-130" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-131"><a href="#cb1-131" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb1-132"><a href="#cb1-132" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> val_locate<span class="op">(</span><span class="dt">int</span> val<span class="op">,</span> Bnode<span class="op">*</span> <span class="op">&amp;</span>now<span class="op">,</span> <span class="dt">int</span> <span class="op">&amp;</span>pos<span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-133"><a href="#cb1-133" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span><span class="op">(</span>now <span class="op">!=</span> <span class="kw">nullptr</span><span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-134"><a href="#cb1-134" aria-hidden="true" tabindex="-1"></a>            pos <span class="op">=</span> now <span class="op">-&gt;</span> find<span class="op">(</span>val<span class="op">);</span></span>
<span id="cb1-135"><a href="#cb1-135" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span><span class="op">(</span>pos <span class="op">!=</span> now <span class="op">-&gt;</span> size <span class="op">&amp;&amp;</span> now <span class="op">-&gt;</span> val<span class="op">[</span>pos<span class="op">]</span> <span class="op">==</span> val<span class="op">)</span> <span class="cf">return</span><span class="op">;</span></span>
<span id="cb1-136"><a href="#cb1-136" aria-hidden="true" tabindex="-1"></a>            now <span class="op">=</span> now <span class="op">-&gt;</span> son<span class="op">[</span>pos<span class="op">];</span></span>
<span id="cb1-137"><a href="#cb1-137" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-138"><a href="#cb1-138" aria-hidden="true" tabindex="-1"></a>        pos <span class="op">=</span> <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-139"><a href="#cb1-139" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;;</span></span>
<span id="cb1-140"><a href="#cb1-140" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> precursor<span class="op">(</span>Bnode<span class="op">*</span> <span class="op">&amp;</span>now<span class="op">,</span> <span class="dt">int</span> <span class="op">&amp;</span>pos<span class="op">,</span> <span class="dt">int</span> first_step<span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-141"><a href="#cb1-141" aria-hidden="true" tabindex="-1"></a>        now <span class="op">=</span> now <span class="op">-&gt;</span> son<span class="op">[</span>first_step<span class="op">];</span></span>
<span id="cb1-142"><a href="#cb1-142" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span><span class="op">(!</span>now <span class="op">-&gt;</span> is_leaf<span class="op">())</span> now <span class="op">=</span> now <span class="op">-&gt;</span> son<span class="op">[</span>now <span class="op">-&gt;</span> size<span class="op">];</span></span>
<span id="cb1-143"><a href="#cb1-143" aria-hidden="true" tabindex="-1"></a>        pos <span class="op">=</span> now <span class="op">-&gt;</span> size <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-144"><a href="#cb1-144" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-145"><a href="#cb1-145" aria-hidden="true" tabindex="-1"></a>    <span class="dt">bool</span> Adjust<span class="op">(</span>Bnode<span class="op">*</span> <span class="op">&amp;</span>now<span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-146"><a href="#cb1-146" aria-hidden="true" tabindex="-1"></a>        Bnode<span class="op">*</span> parent <span class="op">=</span> now <span class="op">-&gt;</span> parent<span class="op">;</span></span>
<span id="cb1-147"><a href="#cb1-147" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(!</span>now <span class="op">-&gt;</span> not_enough<span class="op">())</span> <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-148"><a href="#cb1-148" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> pos <span class="op">=</span> parent <span class="op">-&gt;</span> get_son_id<span class="op">(</span>now<span class="op">);</span></span>
<span id="cb1-149"><a href="#cb1-149" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(!</span>pos<span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-150"><a href="#cb1-150" aria-hidden="true" tabindex="-1"></a>             <span class="co">// adjust with son[pos](now), val[pos], son[pos+1](bro)</span></span>
<span id="cb1-151"><a href="#cb1-151" aria-hidden="true" tabindex="-1"></a>             Bnode <span class="op">*</span>bro <span class="op">=</span> parent <span class="op">-&gt;</span> son<span class="op">[</span>pos <span class="op">+</span> <span class="dv">1</span><span class="op">];</span></span>
<span id="cb1-152"><a href="#cb1-152" aria-hidden="true" tabindex="-1"></a>             <span class="cf">if</span><span class="op">(</span>bro <span class="op">-&gt;</span> is_enough<span class="op">())</span> <span class="op">&#123;</span> <span class="co">// the move case</span></span>
<span id="cb1-153"><a href="#cb1-153" aria-hidden="true" tabindex="-1"></a>                now <span class="op">-&gt;</span> insert_end<span class="op">(</span>parent <span class="op">-&gt;</span> val<span class="op">[</span>pos<span class="op">],</span> bro <span class="op">-&gt;</span> begin_son<span class="op">());</span></span>
<span id="cb1-154"><a href="#cb1-154" aria-hidden="true" tabindex="-1"></a>                parent <span class="op">-&gt;</span> val<span class="op">[</span>pos<span class="op">]</span> <span class="op">=</span> bro <span class="op">-&gt;</span> begin_val<span class="op">();</span></span>
<span id="cb1-155"><a href="#cb1-155" aria-hidden="true" tabindex="-1"></a>                bro <span class="op">-&gt;</span> delete_begin<span class="op">();</span></span>
<span id="cb1-156"><a href="#cb1-156" aria-hidden="true" tabindex="-1"></a>             <span class="op">&#125;</span></span>
<span id="cb1-157"><a href="#cb1-157" aria-hidden="true" tabindex="-1"></a>             <span class="cf">else</span> <span class="op">&#123;</span> <span class="co">// the merge case</span></span>
<span id="cb1-158"><a href="#cb1-158" aria-hidden="true" tabindex="-1"></a>                now <span class="op">-&gt;</span> insert_end<span class="op">(</span>parent <span class="op">-&gt;</span> val<span class="op">[</span>pos<span class="op">],</span> bro <span class="op">-&gt;</span> begin_son<span class="op">());</span></span>
<span id="cb1-159"><a href="#cb1-159" aria-hidden="true" tabindex="-1"></a>                bro <span class="op">-&gt;</span> Move<span class="op">(</span><span class="dv">0</span><span class="op">,</span> now<span class="op">);</span></span>
<span id="cb1-160"><a href="#cb1-160" aria-hidden="true" tabindex="-1"></a>                parent <span class="op">-&gt;</span> delete_mid_after<span class="op">(</span>pos<span class="op">);</span></span>
<span id="cb1-161"><a href="#cb1-161" aria-hidden="true" tabindex="-1"></a>                <span class="kw">delete</span> bro<span class="op">;</span></span>
<span id="cb1-162"><a href="#cb1-162" aria-hidden="true" tabindex="-1"></a>             <span class="op">&#125;</span></span>
<span id="cb1-163"><a href="#cb1-163" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-164"><a href="#cb1-164" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="op">&#123;</span></span>
<span id="cb1-165"><a href="#cb1-165" aria-hidden="true" tabindex="-1"></a>            <span class="co">// adjust with son[pos-1](bro), val[pos-1], son[pos](now)</span></span>
<span id="cb1-166"><a href="#cb1-166" aria-hidden="true" tabindex="-1"></a>             Bnode <span class="op">*</span>bro <span class="op">=</span> parent <span class="op">-&gt;</span> son<span class="op">[</span>pos <span class="op">-</span> <span class="dv">1</span><span class="op">];</span></span>
<span id="cb1-167"><a href="#cb1-167" aria-hidden="true" tabindex="-1"></a>             <span class="cf">if</span><span class="op">(</span>bro <span class="op">-&gt;</span> is_enough<span class="op">())</span> <span class="op">&#123;</span></span>
<span id="cb1-168"><a href="#cb1-168" aria-hidden="true" tabindex="-1"></a>                now <span class="op">-&gt;</span> insert_begin<span class="op">(</span>parent <span class="op">-&gt;</span> val<span class="op">[</span>pos <span class="op">-</span> <span class="dv">1</span><span class="op">],</span> bro <span class="op">-&gt;</span> end_son<span class="op">());</span></span>
<span id="cb1-169"><a href="#cb1-169" aria-hidden="true" tabindex="-1"></a>                parent <span class="op">-&gt;</span> val<span class="op">[</span>pos <span class="op">-</span> <span class="dv">1</span><span class="op">]</span> <span class="op">=</span> bro <span class="op">-&gt;</span> end_val<span class="op">();</span></span>
<span id="cb1-170"><a href="#cb1-170" aria-hidden="true" tabindex="-1"></a>                bro <span class="op">-&gt;</span> delete_end<span class="op">();</span></span>
<span id="cb1-171"><a href="#cb1-171" aria-hidden="true" tabindex="-1"></a>             <span class="op">&#125;</span></span>
<span id="cb1-172"><a href="#cb1-172" aria-hidden="true" tabindex="-1"></a>             <span class="cf">else</span> <span class="op">&#123;</span></span>
<span id="cb1-173"><a href="#cb1-173" aria-hidden="true" tabindex="-1"></a>                bro <span class="op">-&gt;</span> insert_end<span class="op">(</span>parent <span class="op">-&gt;</span> val<span class="op">[</span>pos <span class="op">-</span> <span class="dv">1</span><span class="op">],</span> now <span class="op">-&gt;</span> begin_son<span class="op">());</span></span>
<span id="cb1-174"><a href="#cb1-174" aria-hidden="true" tabindex="-1"></a>                now <span class="op">-&gt;</span> Move<span class="op">(</span><span class="dv">0</span><span class="op">,</span> bro<span class="op">);</span></span>
<span id="cb1-175"><a href="#cb1-175" aria-hidden="true" tabindex="-1"></a>                parent <span class="op">-&gt;</span> delete_mid_after<span class="op">(</span>pos <span class="op">-</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb1-176"><a href="#cb1-176" aria-hidden="true" tabindex="-1"></a>                <span class="kw">delete</span> now<span class="op">;</span></span>
<span id="cb1-177"><a href="#cb1-177" aria-hidden="true" tabindex="-1"></a>                now <span class="op">=</span> bro<span class="op">;</span></span>
<span id="cb1-178"><a href="#cb1-178" aria-hidden="true" tabindex="-1"></a>             <span class="op">&#125;</span></span>
<span id="cb1-179"><a href="#cb1-179" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-180"><a href="#cb1-180" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span>root <span class="op">-&gt;</span> empty<span class="op">())</span> <span class="op">&#123;</span></span>
<span id="cb1-181"><a href="#cb1-181" aria-hidden="true" tabindex="-1"></a>            root <span class="op">=</span> now<span class="op">;</span></span>
<span id="cb1-182"><a href="#cb1-182" aria-hidden="true" tabindex="-1"></a>            root <span class="op">-&gt;</span> parent <span class="op">=</span> <span class="kw">nullptr</span><span class="op">;</span></span>
<span id="cb1-183"><a href="#cb1-183" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-184"><a href="#cb1-184" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-185"><a href="#cb1-185" aria-hidden="true" tabindex="-1"></a>        now <span class="op">=</span> now <span class="op">-&gt;</span> parent<span class="op">;</span></span>
<span id="cb1-186"><a href="#cb1-186" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-187"><a href="#cb1-187" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-188"><a href="#cb1-188" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> Delete<span class="op">(</span><span class="dt">int</span> val<span class="op">)</span> <span class="op">&#123;</span> <span class="co">// use this function to delete v</span></span>
<span id="cb1-189"><a href="#cb1-189" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> pos<span class="op">;</span> Bnode<span class="op">*</span> now <span class="op">=</span> root<span class="op">;</span></span>
<span id="cb1-190"><a href="#cb1-190" aria-hidden="true" tabindex="-1"></a>        val_locate<span class="op">(</span>val<span class="op">,</span> now<span class="op">,</span> pos<span class="op">);</span></span>
<span id="cb1-191"><a href="#cb1-191" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span>now <span class="op">==</span> <span class="kw">nullptr</span><span class="op">)</span> <span class="cf">return</span><span class="op">;</span></span>
<span id="cb1-192"><a href="#cb1-192" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(!</span>now <span class="op">-&gt;</span> is_leaf<span class="op">())</span> <span class="op">&#123;</span></span>
<span id="cb1-193"><a href="#cb1-193" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> ppos<span class="op">;</span> Bnode<span class="op">*</span> pre <span class="op">=</span> now<span class="op">;</span></span>
<span id="cb1-194"><a href="#cb1-194" aria-hidden="true" tabindex="-1"></a>            precursor<span class="op">(</span>pre<span class="op">,</span> ppos<span class="op">,</span> pos<span class="op">);</span></span>
<span id="cb1-195"><a href="#cb1-195" aria-hidden="true" tabindex="-1"></a>            swap<span class="op">(</span>pre <span class="op">-&gt;</span> val<span class="op">[</span>ppos<span class="op">],</span> now <span class="op">-&gt;</span> val<span class="op">[</span>pos<span class="op">]);</span></span>
<span id="cb1-196"><a href="#cb1-196" aria-hidden="true" tabindex="-1"></a>            now <span class="op">=</span> pre<span class="op">;</span> pos <span class="op">=</span> ppos<span class="op">;</span></span>
<span id="cb1-197"><a href="#cb1-197" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-198"><a href="#cb1-198" aria-hidden="true" tabindex="-1"></a>        now <span class="op">-&gt;</span> delete_mid_before<span class="op">(</span>pos<span class="op">);</span> <span class="co">// leaf case, deleted</span></span>
<span id="cb1-199"><a href="#cb1-199" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span>now <span class="op">-&gt;</span> is_root<span class="op">()</span> <span class="op">&amp;&amp;</span> now <span class="op">-&gt;</span> empty<span class="op">())</span> <span class="op">&#123;</span></span>
<span id="cb1-200"><a href="#cb1-200" aria-hidden="true" tabindex="-1"></a>            <span class="kw">delete</span> root<span class="op">;</span></span>
<span id="cb1-201"><a href="#cb1-201" aria-hidden="true" tabindex="-1"></a>            root <span class="op">=</span> <span class="kw">nullptr</span><span class="op">;</span></span>
<span id="cb1-202"><a href="#cb1-202" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span><span class="op">;</span></span>
<span id="cb1-203"><a href="#cb1-203" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-204"><a href="#cb1-204" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span><span class="op">(!</span>now <span class="op">-&gt;</span> is_root<span class="op">()</span> <span class="op">&amp;&amp;</span> <span class="op">!</span>Adjust<span class="op">(</span>now<span class="op">));</span></span>
<span id="cb1-205"><a href="#cb1-205" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-206"><a href="#cb1-206" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb1-207"><a href="#cb1-207" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb1-208"><a href="#cb1-208" aria-hidden="true" tabindex="-1"></a>    <span class="co">// use for debugging</span></span>
<span id="cb1-209"><a href="#cb1-209" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> len<span class="op">,</span> dep<span class="op">;</span></span>
<span id="cb1-210"><a href="#cb1-210" aria-hidden="true" tabindex="-1"></a>    <span class="dt">char</span> output<span class="op">[</span><span class="dv">123456</span><span class="op">];</span></span>
<span id="cb1-211"><a href="#cb1-211" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> ck<span class="op">[</span><span class="dv">123456</span><span class="op">],</span> tmp<span class="op">[</span><span class="dv">123</span><span class="op">];</span></span>
<span id="cb1-212"><a href="#cb1-212" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> write<span class="op">(</span><span class="dt">int</span> x<span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-213"><a href="#cb1-213" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> tlen <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-214"><a href="#cb1-214" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(!</span>x<span class="op">)</span> tmp<span class="op">[++</span> tlen<span class="op">]</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-215"><a href="#cb1-215" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span><span class="op">(</span>x<span class="op">)</span> tmp<span class="op">[++</span> tlen<span class="op">]</span> <span class="op">=</span> x <span class="op">%</span> <span class="dv">10</span><span class="op">,</span> x <span class="op">/=</span> <span class="dv">10</span><span class="op">;</span></span>
<span id="cb1-216"><a href="#cb1-216" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> tlen<span class="op">;</span> i<span class="op">;</span> i <span class="op">--)</span> output<span class="op">[++</span> len<span class="op">]</span> <span class="op">=</span> tmp<span class="op">[</span>i<span class="op">]</span> <span class="op">+</span> <span class="ch">&#39;0&#39;</span><span class="op">;</span></span>
<span id="cb1-217"><a href="#cb1-217" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-218"><a href="#cb1-218" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> dfs<span class="op">(</span>Bnode<span class="op">*</span> now<span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-219"><a href="#cb1-219" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span>now <span class="op">==</span> <span class="kw">nullptr</span><span class="op">)</span> <span class="cf">return</span><span class="op">;</span></span>
<span id="cb1-220"><a href="#cb1-220" aria-hidden="true" tabindex="-1"></a>        output<span class="op">[++</span> len<span class="op">]</span> <span class="op">=</span> <span class="ch">&#39; &#39;</span><span class="op">;</span> ck<span class="op">[</span>len<span class="op">]</span> <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-221"><a href="#cb1-221" aria-hidden="true" tabindex="-1"></a>        dfs<span class="op">(</span>now <span class="op">-&gt;</span> son<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb1-222"><a href="#cb1-222" aria-hidden="true" tabindex="-1"></a>        output<span class="op">[++</span> len<span class="op">]</span> <span class="op">=</span> <span class="ch">&#39; &#39;</span><span class="op">;</span> ck<span class="op">[</span>len<span class="op">]</span> <span class="op">=</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-223"><a href="#cb1-223" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> now <span class="op">-&gt;</span> size<span class="op">;</span> i <span class="op">++)</span> <span class="op">&#123;</span></span>
<span id="cb1-224"><a href="#cb1-224" aria-hidden="true" tabindex="-1"></a>            write<span class="op">(</span>now <span class="op">-&gt;</span> val<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb1-225"><a href="#cb1-225" aria-hidden="true" tabindex="-1"></a>            output<span class="op">[++</span> len<span class="op">]</span> <span class="op">=</span> <span class="ch">&#39; &#39;</span><span class="op">;</span> ck<span class="op">[</span>len<span class="op">]</span> <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-226"><a href="#cb1-226" aria-hidden="true" tabindex="-1"></a>            dfs<span class="op">(</span>now <span class="op">-&gt;</span> son<span class="op">[</span>i <span class="op">+</span> <span class="dv">1</span><span class="op">]);</span> </span>
<span id="cb1-227"><a href="#cb1-227" aria-hidden="true" tabindex="-1"></a>            output<span class="op">[++</span> len<span class="op">]</span> <span class="op">=</span> <span class="ch">&#39; &#39;</span><span class="op">;</span> ck<span class="op">[</span>len<span class="op">]</span> <span class="op">=</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-228"><a href="#cb1-228" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-229"><a href="#cb1-229" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-230"><a href="#cb1-230" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> print<span class="op">()</span> <span class="op">&#123;</span></span>
<span id="cb1-231"><a href="#cb1-231" aria-hidden="true" tabindex="-1"></a>        len <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> dep <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-232"><a href="#cb1-232" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;=</span> <span class="dv">100000</span><span class="op">;</span> i <span class="op">++)</span> ck<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-233"><a href="#cb1-233" aria-hidden="true" tabindex="-1"></a>        dfs<span class="op">(</span>root<span class="op">);</span></span>
<span id="cb1-234"><a href="#cb1-234" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&lt;=</span> len<span class="op">;</span> i <span class="op">++)</span> printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%c</span><span class="st">&quot;</span><span class="op">,</span> output<span class="op">[</span>i<span class="op">]);</span> </span>
<span id="cb1-235"><a href="#cb1-235" aria-hidden="true" tabindex="-1"></a>        <span class="co">// the next part is using for special output</span></span>
<span id="cb1-236"><a href="#cb1-236" aria-hidden="true" tabindex="-1"></a>         </span>
<span id="cb1-237"><a href="#cb1-237" aria-hidden="true" tabindex="-1"></a>        <span class="co">//int maxdep = 0;</span></span>
<span id="cb1-238"><a href="#cb1-238" aria-hidden="true" tabindex="-1"></a>        <span class="co">//for(int i = 1; i &lt;= len; i ++) dep += ck[i], maxdep = max(maxdep, dep);</span></span>
<span id="cb1-239"><a href="#cb1-239" aria-hidden="true" tabindex="-1"></a>        <span class="co">//for(int D = 0; D &lt;= maxdep; D ++) &#123;</span></span>
<span id="cb1-240"><a href="#cb1-240" aria-hidden="true" tabindex="-1"></a>        <span class="co">//  for(int i = 1; i &lt;= len; i ++) dep += ck[i], printf(&quot;%c&quot;, (dep == D) ? output[i] : &#39; &#39;); </span></span>
<span id="cb1-241"><a href="#cb1-241" aria-hidden="true" tabindex="-1"></a>        <span class="co">//  printf(&quot;\n&quot;);</span></span>
<span id="cb1-242"><a href="#cb1-242" aria-hidden="true" tabindex="-1"></a>        <span class="co">//&#125;</span></span>
<span id="cb1-243"><a href="#cb1-243" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-244"><a href="#cb1-244" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span> T<span class="op">;</span></span>
<span id="cb1-245"><a href="#cb1-245" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-246"><a href="#cb1-246" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-247"><a href="#cb1-247" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">&#123;</span></span>
<span id="cb1-248"><a href="#cb1-248" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&lt;=</span> <span class="dv">10</span><span class="op">;</span> i <span class="op">++)</span> T<span class="op">.</span>Insert<span class="op">(</span>i <span class="op">^</span> <span class="dv">7</span><span class="op">);</span></span>
<span id="cb1-249"><a href="#cb1-249" aria-hidden="true" tabindex="-1"></a>    T<span class="op">.</span>print<span class="op">();</span></span>
<span id="cb1-250"><a href="#cb1-250" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-251"><a href="#cb1-251" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div>
]]></content>
      <categories>
        <category>codes</category>
      </categories>
      <tags>
        <tag>ds</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵分析 1</title>
    <url>/2021/07/23/matrix-analysis-1/</url>
    <content><![CDATA[<span id="more"></span>
<h4 id="矩阵之间的关系">矩阵之间的关系</h4>
<ul>
<li><strong>相抵</strong>：存在非奇异矩阵<span class="math inline">\(P, Q\)</span>，使得<span class="math inline">\(B = PAQ\)</span>时，则称<span class="math inline">\(A\)</span>与<span class="math inline">\(B\)</span>相抵</li>
<li><strong>相似</strong>：存在非奇异方阵<span class="math inline">\(P\)</span>，使得<span class="math inline">\(B = P^{-1}AP\)</span>时，称<span class="math inline">\(A\)</span>与<span class="math inline">\(B\)</span>相似</li>
<li><strong>合同</strong>：存在非奇异方阵<span class="math inline">\(P\)</span>，使得<span class="math inline">\(B = P^TAP\)</span>时，称<span class="math inline">\(A\)</span>与<span class="math inline">\(B\)</span>合同</li>
</ul>
<h4 id="特征值">特征值</h4>
<ul>
<li><p>对于方阵<span class="math inline">\(A\)</span>，如果存在<span class="math inline">\(\lambda \in P\)</span>以及非零向量<span class="math inline">\(x \in V^n\)</span>，使得<span class="math inline">\(Ax = \lambda x\)</span>，则称<span class="math inline">\(\lambda\)</span>为<span class="math inline">\(A\)</span>的<strong>特征值</strong>，<span class="math inline">\(x\)</span>为<span class="math inline">\(A\)</span>的<strong>特征向量</strong></p></li>
<li><p><span class="math inline">\(Ax = \lambda x \Leftrightarrow (\lambda I - A)x = 0\)</span>，因此非零向量<span class="math inline">\(x\)</span>存在，要求<span class="math inline">\(|\lambda I - A| = 0\)</span>，称<span class="math inline">\(f(\lambda) = |\lambda I - A|\)</span>为矩阵<span class="math inline">\(A\)</span>的<strong>特征多项式</strong></p>
<ul>
<li><span class="math inline">\(|\lambda I - A| = \lambda^n + \sum_{k=1}^n (-1)^k A_k \lambda^{n-k} = \prod(\lambda - \lambda_i)\)</span>，其中<span class="math inline">\(A_k\)</span>表示矩阵<span class="math inline">\(A\)</span>的所有<span class="math inline">\(k\)</span>阶主子式的和，<span class="math inline">\(\lambda_1, ..., \lambda_n\)</span>表示矩阵<span class="math inline">\(A\)</span>的所有特征值</li>
<li>对于上式中的<span class="math inline">\(A_1\)</span>，即<span class="math inline">\(a_{11} + a_{22} + ... + a_{nn}\)</span>，我们称其为矩阵的迹，记做<span class="math inline">\(tr(A)\)</span>，由根与系数的关系，我们知道<span class="math inline">\(A_1 = tr(A) = \sum \lambda_i\)</span>，<span class="math inline">\(A_n = |A| = \prod\lambda_i\)</span></li>
</ul></li>
<li><p>example</p>
<p>矩阵</p>
<p><span class="math display">\[A = \begin{pmatrix}
0 &amp;  0&amp; 0 &amp; \dots &amp; 0 &amp;-a_{n} \\
1&amp; 0 &amp; 0 &amp; \dots &amp; 0 &amp; -a_{n-1}\\ 
0 &amp; 1 &amp; 0 &amp; \dots &amp;  0&amp; -a_{n-2}\\ 
\dots &amp;\dots  &amp; \dots &amp; \dots &amp;  \dots&amp; \dots \\\
0&amp; 0 &amp;0  &amp; \dots &amp; 1&amp;-a_1 
\end{pmatrix}\]</span></p>
<p>的特征多项式为<span class="math inline">\(f(\lambda) = \lambda^n + a_1 \lambda^{n-1} + ... + a_n\)</span></p></li>
<li><p>对可逆矩阵<span class="math inline">\(A, B \in C^{n*n}\)</span>，由<span class="math inline">\(|\lambda I - B| = |A^{-1}| |\lambda I - B| |A| = |\lambda I - A^{-1}BA|\)</span>，可以知道相似矩阵之间有相同的特征的多项式，从而由相同的特征值，相同的迹</p></li>
<li><p>对<span class="math inline">\(A \in C^{m \times n}, B \in C^{n \times m}\)</span>，由<span class="math inline">\(\lambda^n | \lambda I_m - AB| = \lambda^m |\lambda I_n - BA|\)</span>，我们可以知道<span class="math inline">\(AB\)</span>与<span class="math inline">\(BA\)</span>有相同的非零特征值</p></li>
<li><p>设<span class="math inline">\(\lambda_i\)</span>是<span class="math inline">\(|\lambda I - A|\)</span>的<span class="math inline">\(m_i\)</span>重根，则称<span class="math inline">\(m_i\)</span>是<span class="math inline">\(\lambda_i\)</span>的<strong>代数重复度</strong>，注意到<span class="math inline">\(\sum m_i = n\)</span></p></li>
<li><p>记<span class="math inline">\(V_{\lambda_i} = \{x:(\lambda_i I - A)x = 0\}\)</span>为<span class="math inline">\(A\)</span>的属于<span class="math inline">\(\lambda_i\)</span>的<strong>特征子空间</strong>，并称<span class="math inline">\(\dim (V_{\lambda_i})\)</span>为<span class="math inline">\(\lambda_i\)</span>的<strong>几何重复度</strong></p></li>
<li><p><strong>几何重复度</strong>不大于<strong>代数重复度</strong></p>
<ul>
<li>通过代数重复度构造出一组包含<span class="math inline">\((\lambda_i I - A)x = 0\)</span>的基础解系的基，记这组基的坐标为<span class="math inline">\(C\)</span>，考虑<span class="math inline">\(C^{-1}AC\)</span>的特征多项式</li>
</ul></li>
<li><p>设<span class="math inline">\(\lambda_1, ..., \lambda_r\)</span>是矩阵<span class="math inline">\(A\)</span>的不同的特征值，<span class="math inline">\(x_{1}^{(i)}, ..., x_{s_i}^{(i)}\)</span>是属于<span class="math inline">\(\lambda_i\)</span>的线性无关的特征向量，那么<span class="math inline">\(x_1^{(1)}, ..., x_{s_1}^{(1)}, ..., x_1^{(r)}, ..., x_{s_r}^{(r)}\)</span>也是线性无关的</p>
<ul>
<li>利用线性无关的充要条件为零向量的组合系数仅有<span class="math inline">\(0\)</span>，对于<span class="math inline">\(kx^{(i)}\)</span>，注意到乘以<span class="math inline">\(\lambda_j\)</span>和<span class="math inline">\(Ax^{(i)} = \lambda_i x^{(i)}\)</span>将是两种不一样的变化即可</li>
</ul></li>
<li><p>矩阵<span class="math inline">\(A\)</span>可对角化（和对角矩阵相似）的充要条件为<span class="math inline">\(A\)</span>为<span class="math inline">\(n\)</span>个线性无关的特征向量</p>
<ul>
<li><p>注意到以这<span class="math inline">\(n\)</span>个特征向量为基即可，也因此，相似中的转移矩阵即为这<span class="math inline">\(n\)</span>个特征向量的坐标</p></li>
<li><p>注意和对角矩阵相似时，相似中的转移矩阵和对角矩阵一定会对应于特征值和相应的特征向量</p></li>
<li><p>如果<span class="math inline">\(A\)</span>有<span class="math inline">\(n\)</span>个线性无关的特征向量，则称<span class="math inline">\(A\)</span>有完备的特征向量系</p>
<p>否则，称<span class="math inline">\(A\)</span>为<strong>亏损矩阵</strong></p></li>
<li><p>如果每个代数重复度和几何重复度相等，则称<span class="math inline">\(A\)</span>为<strong>单纯矩阵</strong></p></li>
<li><p><span class="math inline">\(A\)</span>可对角化的充要条件有其他不同的表述，比如<span class="math inline">\(V^n = V_{\lambda_1} \oplus ... \oplus V_{\lambda_r}\)</span></p></li>
</ul></li>
</ul>
<h4 id="不变子空间">不变子空间</h4>
<ul>
<li>对于线性变换<span class="math inline">\(\mathscr{A}\)</span>，如果<span class="math inline">\(\mathscr{A}W \subseteq W\)</span>，则称<span class="math inline">\(W\)</span>为<span class="math inline">\(\mathscr{A}\)</span>的<strong>不变子空间</strong></li>
<li>有两类较为容易发现的子空间
<ul>
<li><span class="math inline">\(\ker \mathscr{A} = \mathscr{A}^{-1}(0) = \{x:\mathscr{A}x = 0\}\)</span>，核空间</li>
<li><span class="math inline">\(\text{Im} \mathscr{A} = \mathscr{A}V\)</span>，值域</li>
<li>联系方程组，我们可以知道，若线性变换<span class="math inline">\(\mathscr{A}\)</span>对应于矩阵<span class="math inline">\(A\)</span>，核空间实际上对应于<span class="math inline">\(A\)</span>的解空间，我们记<span class="math inline">\(\dim \ker \mathscr{A} = \text{null } A\)</span>，而值域实际上是<span class="math inline">\(A\)</span>的列向量张成的空间，因此其维数应该是<span class="math inline">\(\text{rank} A\)</span></li>
<li><strong>维数公式</strong>：$ A + A = n $</li>
</ul></li>
</ul>
<h4 id="schur-th">Schur TH</h4>
<ul>
<li><p>任何<span class="math inline">\(n\)</span>阶矩阵都酉相似于一个上三角阵，即存在一个<span class="math inline">\(n\)</span>阶酉矩阵<span class="math inline">\(U\)</span>和一个上三角阵<span class="math inline">\(T\)</span>，使得</p>
<p><span class="math display">\[A = UTU^H\]</span></p>
<p>式中<span class="math inline">\(T\)</span>的主对角元为<span class="math inline">\(A\)</span>的特征值</p>
<ul>
<li>每一次选择一个特征向量后进行归纳</li>
</ul></li>
<li><p>如果<span class="math inline">\(A^H = A\)</span>，则称<span class="math inline">\(A\)</span>为<strong>埃米尔特矩阵</strong></p>
<ul>
<li>对埃米尔特矩阵运用Schur TH：<span class="math inline">\(A = UTU^H\)</span>，从而<span class="math inline">\(A^H = UT^HU^H\)</span>，由<span class="math inline">\(A=A^H\)</span>，我们得到<span class="math inline">\(T = T^H\)</span>，也就是说，<span class="math inline">\(T\)</span>是对角矩阵，并且<span class="math inline">\(A\)</span>的特征值都是实数</li>
</ul></li>
</ul>
<h4 id="正定矩阵">正定矩阵</h4>
<ul>
<li><p>对于埃米尔特矩阵<span class="math inline">\(A\)</span>，如果<span class="math inline">\(x^HAx\geq 0\)</span>，则称<span class="math inline">\(A\)</span>为半正定矩阵，记作<span class="math inline">\(A\geq 0\)</span>；类似的，如果<span class="math inline">\(x^HAx &gt; 0\)</span>，则称<span class="math inline">\(A\)</span>为正定矩阵，记作<span class="math inline">\(A&gt;0\)</span></p>
<ul>
<li>如果<span class="math inline">\(A&gt;0\)</span>，<span class="math inline">\(k&gt;0\)</span>，那么<span class="math inline">\(kA&gt;0\)</span></li>
<li>如果<span class="math inline">\(A \geq 0, B \geq 0\)</span>，那么<span class="math inline">\(A+B\geq 0\)</span></li>
</ul></li>
<li><p>矩阵<span class="math inline">\(A\)</span>正定（半正定）的充要条件是其特征值都是正数（非负数）</p>
<ul>
<li>神奇恒等式：设<span class="math inline">\(\lambda\)</span>为<span class="math inline">\(A\)</span>的特征值，<span class="math inline">\(\xi\)</span>为对应的单位特征向量，那么<span class="math inline">\(\lambda = \xi^HA\xi\)</span></li>
</ul></li>
<li><p>矩阵<span class="math inline">\(A\)</span>为正定（半正定）矩阵的充要条件为存在非奇异矩阵（矩阵）<span class="math inline">\(P\)</span>，使得<span class="math inline">\(A=P^HP\)</span></p>
<ul>
<li>如果<span class="math inline">\(A&gt;0\)</span>，那么<span class="math inline">\(A^{-1}&gt;0\)</span></li>
<li>如果<span class="math inline">\(A&gt;0\)</span>，且<span class="math inline">\(C\)</span>非奇异，则<span class="math inline">\(C^HAC&gt;0\)</span></li>
<li>如果<span class="math inline">\(A \geq 0\)</span>，则<span class="math inline">\(C^HAC \geq 0\)</span></li>
</ul></li>
<li><p>设<span class="math inline">\(A,B\)</span>都是<span class="math inline">\(n\)</span>阶埃米尔特矩阵，且<span class="math inline">\(B&gt;0\)</span>，则存在非奇异矩阵<span class="math inline">\(Q\)</span>，使得<span class="math inline">\(Q^HBQ=I, Q^HAQ=\text{diag}\{\lambda_1, ..., \lambda_n\}\)</span>（可同时对角化），且<span class="math inline">\(\lambda_1,...,\lambda_n\)</span>为<span class="math inline">\(AB^{-1}\)</span>的特征值</p></li>
<li><p>如果<span class="math inline">\(A-B\geq 0\)</span>，那么称<span class="math inline">\(A\)</span>大于等于<span class="math inline">\(B\)</span>，记做<span class="math inline">\(A\geq B\)</span></p>
<ul>
<li><p>这不是一个well order...</p></li>
<li><p><span class="math inline">\(A \geq B\)</span>等价于<span class="math inline">\(x^HAx\geq x^HBx\)</span>恒成立</p>
<p>以下性质几乎是显然的</p>
<ul>
<li><p>如果<span class="math inline">\(A, B\)</span>是对角阵，那么条件也等价于<span class="math inline">\(a_{ii} \geq b_{ii}\)</span></p></li>
<li><p><span class="math inline">\(A \geq B, B \geq C\)</span>可得<span class="math inline">\(A \geq C\)</span></p></li>
<li><p><span class="math inline">\(A \geq B\)</span>，且<span class="math inline">\(k&gt;0\)</span>，那么<span class="math inline">\(kA \geq kB\)</span></p></li>
<li><p>若<span class="math inline">\(A_1 \geq B_1, A_2 \geq B_2\)</span>，那么<span class="math inline">\(A_1 + A_2 \geq B_1 + B_2\)</span></p></li>
<li><p>若<span class="math inline">\(A \geq B\)</span>，那么<span class="math inline">\(P^HAP\geq P^HBP\)</span></p></li>
</ul></li>
<li><p>若<span class="math inline">\(A \geq 0\)</span>，则<span class="math inline">\(A \leq tr(A)I\)</span>（利用<span class="math inline">\(tr(A)\geq \lambda_i\)</span>）</p></li>
<li><p>若<span class="math inline">\(A\geq B\)</span>，则<span class="math inline">\(B^{-1} \geq A^{-1}\)</span></p></li>
<li><p>若<span class="math inline">\(A, B\)</span>可交换，且<span class="math inline">\(A \geq B\)</span>，那么<span class="math inline">\(A^2 \geq B^2\)</span></p></li>
<li><p><span class="math inline">\(Schwartz\)</span>不等式：若<span class="math inline">\(A,B\)</span>分别为<span class="math inline">\(n\times m, m \times l\)</span>的矩阵，且<span class="math inline">\(AA^H\)</span>非奇异，则<span class="math inline">\(B^HB \geq (AB)^H(AA^H)^{-1}(AB)\)</span>，等号成立当且仅当存在<span class="math inline">\(n \times l\)</span>的矩阵<span class="math inline">\(C\)</span>，使<span class="math inline">\(B=A^HC\)</span></p></li>
</ul></li>
<li><p>对埃尔米特矩阵<span class="math inline">\(A\)</span>，有<span class="math inline">\(\lambda_{min} I \leq A \leq \lambda_{max} I\)</span></p></li>
<li><p>定义：记<span class="math inline">\(R(x) = \frac{x^HAx}{x^Hx}\)</span>，称其为<strong>诶尔米特矩阵</strong><span class="math inline">\(A\)</span>的瑞利商</p>
<ul>
<li>瑞利商是实数（注意到<span class="math inline">\(R(x) = R(x)^H\)</span>）</li>
<li><span class="math inline">\(\forall k \neq 0, R(kx) = R(x)\)</span></li>
<li><span class="math inline">\(\lambda_{min} \leq R(x) \leq \lambda_{max}\)</span>，并且可以取得等号</li>
</ul></li>
<li><p><strong>极大极小定理</strong>：设<span class="math inline">\(A\)</span>是<span class="math inline">\(n\)</span>阶埃尔米特矩阵，其特征值为<span class="math inline">\(\lambda_1 \geq \lambda_2 ... \geq \lambda_n\)</span>，<span class="math inline">\(V_i\)</span>是<span class="math inline">\(C^n\)</span>中<span class="math inline">\(i\)</span>维子空间，那么</p>
<p><span class="math display">\[\lambda_i = \max_{V_i} \min_{x \in V_i, x \neq 0} R(x)\]</span></p>
<p><span class="math display">\[\lambda_{n-i+1} = \min_{V_i} \max_{x \in V_i, x \neq 0} R(x)\]</span></p>
<ul>
<li>这个定理初看可能相当地令人疑惑，我们可以这么考虑，取<span class="math inline">\(x_1, x_2, ..., x_n\)</span>为分别属于<span class="math inline">\(\lambda_1, ..., \lambda_n\)</span>的特征向量，并且其构成标准正交向量基，那么对于<span class="math inline">\(\lambda_i\)</span>而言，当我们考虑<span class="math inline">\(Span(x_1, ..., x_i)\)</span>时，这个空间中的最小值恰好就是<span class="math inline">\(\lambda_i\)</span>，而对于其他的<span class="math inline">\(i\)</span>维空间，必然跟<span class="math inline">\(Span(x_{i+1}, ..., x_n)\)</span>有交，此时<span class="math inline">\(Span(x_{i+1}, ..., x_n)\)</span>中向量的存在将使最小值比<span class="math inline">\(\lambda_i\)</span>小，从而取到等号</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>matrix_analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵分析 2</title>
    <url>/2021/07/23/matrix-analysis-2/</url>
    <content><![CDATA[<span id="more"></span>
<h4 id="lambda矩阵"><span class="math inline">\(\lambda\)</span>矩阵</h4>
<ul>
<li><span class="math inline">\(\lambda\)</span>矩阵：矩阵中的每一项都是关于<span class="math inline">\(\lambda\)</span>的多项式的矩阵称为<span class="math inline">\(\lambda\)</span>矩阵</li>
<li><span class="math inline">\(\lambda\)</span>矩阵的秩：若<span class="math inline">\(A(\lambda)\)</span>至少有一个<span class="math inline">\(r\)</span>阶子式不是零多项式，并且所有的<span class="math inline">\(r+1\)</span>阶子式都是零多项式，则称<span class="math inline">\(A(\lambda)\)</span>的秩为<span class="math inline">\(r\)</span>，记作<span class="math inline">\(\text{rank} A(\lambda)\)</span></li>
<li>可逆矩阵：<span class="math inline">\(A(\lambda)\)</span>称作可逆矩阵，当且仅当存在<span class="math inline">\(B(\lambda)\)</span>，使得<span class="math inline">\(A(\lambda) B(\lambda) = B(\lambda)A(\lambda) = I\)</span>，并且，记<span class="math inline">\(B(\lambda) = A(\lambda)^{-1}\)</span></li>
<li>可逆矩阵的充要条件：<span class="math inline">\(A(\lambda)\)</span>可逆，当且仅当<span class="math inline">\(|A(\lambda)|\)</span>是一个非零常数</li>
<li>如果存在可逆矩阵<span class="math inline">\(P(\lambda), Q(\lambda)\)</span>，使得<span class="math inline">\(B(\lambda) = P(\lambda) A(\lambda) Q(\lambda)\)</span>，则称<span class="math inline">\(B(\lambda)\)</span>与<span class="math inline">\(A(\lambda)\)</span>相抵，记作<span class="math inline">\(A(\lambda) \simeq B(\lambda)\)</span></li>
</ul>
<h4 id="lambda矩阵的标准形"><span class="math inline">\(\lambda\)</span>矩阵的标准形</h4>
<ul>
<li><p>每个<span class="math inline">\(A(\lambda)\)</span>都相抵与一个Smith标准形，即</p>
<p><span class="math display">\[A(\lambda) \simeq \text{diag} \{ d_1(\lambda), d_2(\lambda), ..., d_r(\lambda),0...0 \}\]</span></p>
<p>其中<span class="math inline">\(d_i(\lambda)\)</span>的首项系数为<span class="math inline">\(1\)</span>，并且<span class="math inline">\(d_{i - 1}(\lambda) \mid d_i(\lambda)\)</span></p>
<ul>
<li>考虑多项式的辗转相除，并利用归纳法</li>
</ul></li>
</ul>
<h4 id="不变因子行列式因子初等因子">不变因子，行列式因子，初等因子</h4>
<ul>
<li><p>不变因子：Smith标准形中的<span class="math inline">\(d_1(\lambda)\)</span>, <span class="math inline">\(d_2(\lambda)\)</span>, ..., <span class="math inline">\(d_r(\lambda)\)</span>称为<span class="math inline">\(A(\lambda)\)</span>的不变因子</p></li>
<li><p>行列式因子：<span class="math inline">\(A(\lambda)\)</span>的所有<span class="math inline">\(k\)</span>阶子式的最大公因式称为<span class="math inline">\(A(\lambda)\)</span>的<span class="math inline">\(k\)</span>阶行列式因子，记作<span class="math inline">\(D_k(\lambda)\)</span></p></li>
<li><p>初等因子：对于不变因子，不妨设<span class="math inline">\(d_i(\lambda) = \prod(\lambda - \lambda_j)^{r_{ij}}\)</span>，那么<span class="math inline">\((\lambda- \lambda_j)^{r_{ij}}\)</span>的全体称为初等因子</p></li>
<li><p>example</p>
<p><span class="math display">\[A(x) = \begin{pmatrix}
-x+1 &amp;x^2  &amp; x \\
 x&amp; x &amp;-x \\
 x^2+1 &amp; x^2 &amp; -x^2
\end{pmatrix}\]</span></p>
<p>的行列式因子为<span class="math inline">\(D_1(x) = 1, D_2(x) = x, D_3(x) = x^3+x^2\)</span></p>
<p>而其不变因子为<span class="math inline">\(d_1(x) = 1, d_2(x) = x, d_3(x) = x^2(x+1)\)</span></p>
<p>其初等因子则为<span class="math inline">\(x, x^2, (x+1)\)</span></p></li>
<li><p>相抵的矩阵有相同的秩和行列式因子</p>
<ul>
<li>只需要子式之间的整除关系即可</li>
</ul></li>
<li><p>在Smith标准形下，行列式因子和不变因子之间的关系是容易得出的：<span class="math inline">\(D_i(\lambda) = D_{i-1}(\lambda)d_i(\lambda)\)</span>，由此，我们得到结论：</p>
<ul>
<li>相抵的矩阵有相同的不变因子</li>
<li>相抵的矩阵有相同的Smith标准形，有相同的Smith标准形的矩阵相抵</li>
<li>一个矩阵的Smith标准形是唯一的</li>
</ul></li>
<li><p>初等因子和不变因子之间，在知晓秩的情况下，存在一一对应，因此在相抵变换下，初等因子也是不变的</p>
<ul>
<li>如果用初等因子来描述相抵，那么将是：两个有相同的初等因子和秩的矩阵相抵</li>
</ul></li>
<li><p>分块矩阵的初等因子是好求的：设<span class="math inline">\(A(\lambda) = \text{diag} \{ A_1(\lambda), A_2(\lambda), ..., A_m(\lambda)\}\)</span>，则<span class="math inline">\(A_i(\lambda)\)</span>的初等因子的全体的集合为<span class="math inline">\(A(\lambda)\)</span>的初等因子</p>
<ul>
<li>考虑两个分块子矩阵的Smith标准形和原矩阵的Smith标准形之间的系数关系</li>
</ul></li>
</ul>
<h4 id="若尔当标准形">若尔当标准形</h4>
<ul>
<li><p>若尔当块</p>
<p><span class="math display">\[J(x, k) = \begin{pmatrix}
x &amp;1  &amp; 0 &amp; 0 &amp; ... &amp; 0 \\
 0&amp; x &amp;1 &amp; 0 &amp; ... &amp; 0 \\
... &amp; ... &amp; ... &amp; ... &amp; ... &amp; ...\\ 0 &amp; 0&amp;0&amp;0&amp;...&amp;1\\ 0 &amp; 0&amp;0&amp;0&amp;...&amp;x\end{pmatrix}\]</span></p>
<p>考虑<span class="math inline">\(J(x, k)\)</span>的特征矩阵</p>
<p><span class="math display">\[\lambda I - J = \begin{pmatrix}
\lambda - x &amp; - 1  &amp; 0 &amp; 0 &amp; ... &amp; 0 \\
 0&amp; \lambda - x &amp; -1 &amp; 0 &amp; ... &amp; 0 \\
... &amp; ... &amp; ... &amp; ... &amp; ... &amp; ...\\ 0 &amp; 0&amp;0&amp;0&amp;...&amp;-1\\ 0 &amp; 0&amp;0&amp;0&amp;...&amp;\lambda - x\end{pmatrix}\]</span></p>
<p>由于去掉左边<span class="math inline">\(k\)</span>列和右边<span class="math inline">\(k\)</span>列的主子式的绝对值为<span class="math inline">\(1\)</span>，而<span class="math inline">\(|\lambda I - J| = (\lambda - x)^k\)</span></p>
<p>因此，其行列式因子为<span class="math inline">\(D_1(\lambda) = ... = D_{k-1}(\lambda) = 1\)</span>，而<span class="math inline">\(D_k(\lambda) = (\lambda - x)^k\)</span></p>
<p>那么，其不变因子为<span class="math inline">\(d_1(\lambda) = ... = d_{k-1}(\lambda) = 1\)</span>，而<span class="math inline">\(d_k(\lambda) = (\lambda - x)^k\)</span></p>
<p>初等因子则只有<span class="math inline">\((\lambda - x)^k\)</span></p></li>
<li><p>若尔当标准形</p>
<p>形如</p>
<p><span class="math display">\[J = \begin{pmatrix} J_1 &amp;&amp;&amp;\\ &amp;J_2&amp;&amp; \\&amp;&amp;...&amp; \\&amp;&amp;&amp;J_n \end{pmatrix}\]</span></p>
<p>的矩阵称为若尔当标准形，其中<span class="math inline">\(J_i\)</span>为若尔当块</p>
<p>由于<span class="math inline">\(J_i\)</span>的初等因子只有<span class="math inline">\((\lambda - \lambda_i)^{k_i}\)</span>，因此<span class="math inline">\(J\)</span>的初等因子为<span class="math inline">\((\lambda- \lambda_i)^{k_i}\)</span>的全体，并且<span class="math inline">\(\sum k_i = n\)</span></p></li>
<li><p>定理：矩阵<span class="math inline">\(A \sim B\)</span>的充要条件是<span class="math inline">\(\lambda I - A \cong \lambda I - B\)</span></p>
<p>这个定理的证明比较复杂，我们省去，关键在于利用<span class="math inline">\(\lambda I - A\)</span>是关于<span class="math inline">\(\lambda\)</span>的一次式进行次数限制</p></li>
<li><p>定理：每个<span class="math inline">\(A\)</span>都与一个若尔当标准形<span class="math inline">\(J\)</span>相似，并且这个若尔当标准形除了<span class="math inline">\(J\)</span>中若尔当块的排列顺序外，被<span class="math inline">\(A\)</span>所唯一决定</p>
<ul>
<li><p>由于<span class="math inline">\(|\lambda I - A|\)</span>的次数为<span class="math inline">\(n\)</span>，因此<span class="math inline">\(D_n(\lambda) = \prod (\lambda - \lambda_i)^{m_i}\)</span>，其中<span class="math inline">\(\sum m_i = n\)</span></p>
<p>由于<span class="math inline">\(D_n(\lambda) = \prod d_i(\lambda)\)</span>，因此初等因子的次数的和应该等于<span class="math inline">\(D_n(\lambda)\)</span>，也就是<span class="math inline">\(\lambda I - A\)</span>的初等因子的次数的和为<span class="math inline">\(n\)</span></p>
<p>不妨设<span class="math inline">\(\lambda I - A\)</span>的初等因子为<span class="math inline">\((\lambda - \lambda_i&#39;)^{m_i&#39;} (\sum m_i&#39; = n)\)</span>，对于每个<span class="math inline">\((\lambda - \lambda_i&#39;)^{m_i&#39;}\)</span>，存在若尔当块<span class="math inline">\(J_i\)</span>，使得<span class="math inline">\(\lambda I - J_i\)</span>以<span class="math inline">\((\lambda - \lambda_i&#39;)^{m_i&#39;}\)</span>作为初等因子</p>
<p>将这些<span class="math inline">\(J_i\)</span>组合在一起，得到一个若尔当标准形<span class="math inline">\(J\)</span></p>
<p><span class="math inline">\(\lambda I - J\)</span>与<span class="math inline">\(\lambda I - A\)</span>有相同的初等因子，并且秩相等，因此<span class="math inline">\(\lambda I - J \cong \lambda I - A\)</span>，而且<span class="math inline">\(J\)</span>是唯一确定的，由上一条定理知，<span class="math inline">\(A \sim J\)</span></p></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>matrix_analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵分析 6</title>
    <url>/2021/08/05/matrix-analysis-6/</url>
    <content><![CDATA[<span id="more"></span>
<ul>
<li>完备的赋范线性空间，称为Banach空间</li>
</ul>
<h3 id="矩阵序列的极限">矩阵序列的极限</h3>
<ul>
<li><p>定义：设有矩阵序列<span class="math inline">\(\{A_k\}\)</span>，其中<span class="math inline">\(A_k = (a_{ij}^{(k)})_{n*n}\)</span>，且当<span class="math inline">\(k \to \infty\)</span>时，<span class="math inline">\(a_{ij}^{(k)} \to a_{ij}\)</span>，则称<span class="math inline">\(\{A_k\}\)</span>收敛，并称<span class="math inline">\(A = (a_{ij})\)</span>为<span class="math inline">\(\{A_k\}\)</span>的极限，记做</p>
<p><span class="math display">\[\lim_{k \to \infty} A_k = A\]</span></p></li>
<li><p>不收敛的序列称为发散的</p></li>
</ul>
<p>这个定义研究起来并不是很方便，我们可以引出一个等价的定义</p>
<ul>
<li>在有限维巴拿赫空间中，矩阵序列<span class="math inline">\(\{A_k\}\)</span>收敛于<span class="math inline">\(A\)</span>等价于矩阵序列<span class="math inline">\(\{A_k\}\)</span>按范数收敛于<span class="math inline">\(A\)</span>
<ul>
<li>由于所有范数是等价的，我们不妨取矩阵的F-范数来研究，此时矩阵相等于<span class="math inline">\(n*m\)</span>维的一个向量，由向量范数的性质知道，对于F-范数而言，这个定理是成立的</li>
</ul></li>
</ul>
<p>同大多数极限一样，矩阵极限有相应的运算性质</p>
<ul>
<li><p>如果<span class="math inline">\(\lim_{k \to \infty} A_k = A\)</span>，那么序列<span class="math inline">\(\{||A_k||\}\)</span>有界</p></li>
<li><p>如果<span class="math inline">\(\lim_{k \to \infty} A_k = A, \lim_{k \to \infty} B_k = B\)</span>，那么</p>
<p><span class="math display">\[\lim_{k \to \infty} (aA_k + bB_k) = aA + bB\]</span></p></li>
<li><p>如果<span class="math inline">\(\lim_{k \to \infty} A_k = A. \lim_{k \to \infty} B_k = B\)</span>，那么</p>
<p><span class="math display">\[\lim_{k \to \infty} A_kB_k = AB\]</span></p>
<ul>
<li><span class="math inline">\(||A_kB_k - AB|| \leq ||(A_k- A)||*||B_k|| + ||(B_k-B)||*||A||\)</span></li>
</ul></li>
<li><p>如果<span class="math inline">\(\lim_{k \to \infty} A_k = A\)</span>，且<span class="math inline">\(A_k(k \in N^{+}), A\)</span>都可逆，那么</p>
<p><span class="math display">\[\lim_{k \to \infty} A_k^{=1} = A^{-1}\]</span></p>
<ul>
<li><p>注意到对于任意<span class="math inline">\(A_k\)</span>中的子式而言，它可以表示为<span class="math inline">\(A_k\)</span>中元素的连续函数，由连续性，<span class="math inline">\(A_k\)</span>的子式一定收敛于<span class="math inline">\(A\)</span>中对应的子式，特别的，<span class="math inline">\(|A_k| \to |A|\)</span></p>
<p>同样的，我们将有<span class="math inline">\(\text{adj} A_k \to \text{adj} A\)</span>，从而有<span class="math inline">\(A_k^{-1} \to A^{-1}\)</span></p></li>
</ul></li>
</ul>
<p>下面是一个基础的定理</p>
<ul>
<li><p><span class="math inline">\(\lim_{k \to \infty} A^k = 0\)</span>的充要条件是<span class="math inline">\(\rho(A) &lt; 1\)</span></p>
<ul>
<li><p>考虑矩阵<span class="math inline">\(A\)</span>的若尔当标准形<span class="math inline">\(J\)</span>，即<span class="math inline">\(A = TJT^{-1}\)</span>，那么<span class="math inline">\(A^k = T J^K T^{-1}\)</span></p>
<p>因此<span class="math inline">\(\lim_{k \to \infty} A^k = 0\)</span>，当且仅当<span class="math inline">\(\lim_{k \to \infty} J^k = 0\)</span></p>
<p>设<span class="math inline">\(J = diag\{J_1, ..., J_r\}\)</span>，那么<span class="math inline">\(J^k = diag\{J_1^k, ..., J_r^k\}\)</span></p>
<p>注意到<span class="math inline">\(J_i^k = \begin{pmatrix} \lambda_i^k &amp; \binom{k}{1} \lambda_i^{k-1} &amp; ... &amp; \binom{k}{n_i - 1} \lambda_i^{k - n_i + 1} \\ 0 &amp; \lambda_i^{k} &amp; ... &amp; \binom{k}{n_i-2} \lambda_{i}^{k-n_i+2} \\ ...&amp;... &amp; ... &amp;... \\ ... &amp; ... &amp; ... &amp; \lambda_i^k\end{pmatrix}\)</span>​</p>
<p>矩阵每个元素都形如<span class="math inline">\(f(k) * \lambda^k\)</span>，其中<span class="math inline">\(f(k)\)</span>是关于<span class="math inline">\(k\)</span>的多项式</p>
<p>因此，当<span class="math inline">\(|\lambda| &lt; \rho(A) &lt; 1\)</span>时，就有<span class="math inline">\(J_i^k \to O\)</span>，从而<span class="math inline">\(J^k \to O\)</span></p>
<p>反过来，当<span class="math inline">\(J^k \to O\)</span>时，<span class="math inline">\(J_i^k \to O\)</span>，因此<span class="math inline">\(\lambda_i^k \to 0\)</span>，从而<span class="math inline">\(|\lambda_i| &lt; 1\)</span>，<span class="math inline">\(\rho(A)&lt;1\)</span></p></li>
</ul></li>
</ul>
<h3 id="矩阵级数">矩阵级数</h3>
<ul>
<li><p>对矩阵序列<span class="math inline">\(\{A_k\}\)</span>，称<span class="math inline">\(\sum_{i=0}^{\infty} A_i\)</span>为矩阵级数，而<span class="math inline">\(A_k\)</span>称为矩阵级数的一般项</p></li>
<li><p>称<span class="math inline">\(S_k = \sum_{i=0}^k A_i\)</span>为部分和，如果<span class="math inline">\(\{S_k\}\)</span>收敛，那么称矩阵级数<span class="math inline">\(\sum_{i=0}^{\infty} A_i\)</span>收敛，否则称矩阵级数发散</p>
<ul>
<li>矩阵级数收敛的充要条件为<span class="math inline">\(n^2\)</span>个对应的数项级数收敛</li>
</ul></li>
<li><p><span class="math inline">\(\sum_{i=0}^{\infty} A_i\)</span>收敛，那么<span class="math inline">\(\lim_{n \to \infty} A_n = O\)</span></p>
<p><span class="math inline">\(\sum_{i=0}^{\infty} A_i, \sum_{i=0}^{\infty} B_i\)</span>都收敛时，<span class="math inline">\(\sum_{i=0}^{\infty} (A_i + B_i) = \sum_{i=0}^{\infty} A_i + \sum_{i=0}^{\infty} B_i\)</span></p>
<p><span class="math inline">\(\sum_{i=0}^{\infty} A_i\)</span>收敛时，<span class="math inline">\(\sum_{i=0}^{\infty} kA_i = k \sum_{i=0}^{\infty} A_i\)</span></p></li>
<li><p>如果<span class="math inline">\(n^2\)</span>个对应的数项级数都绝对收敛，那么称矩阵级数绝对收敛</p>
<ul>
<li><p>矩阵级数<span class="math inline">\(\sum_{i=0}^{\infty} A_i\)</span>绝对收敛的充要条件为<span class="math inline">\(\sum_{i=0}^{\infty} ||A_i||\)</span>收敛，其中<span class="math inline">\(||\cdot||\)</span>为任意一种矩阵级数</p>
<p>把矩阵想象成一个向量，利用<span class="math inline">\(F\)</span>-​范数不难证明</p></li>
</ul></li>
</ul>
<p>仿照数分中的结果，对于矩阵级数，我们有相似的结果</p>
<ul>
<li>如果<span class="math inline">\(\sum_{i=0}^{\infty} A_i, \sum_{i=0}^{\infty} B_i\)</span>绝对收敛于<span class="math inline">\(A, B\)</span>，那么<span class="math inline">\(\sum_{i=0}^{\infty} \sum_{j+k = i} A_jB_k\)</span>绝对收敛于<span class="math inline">\(AB\)</span></li>
<li>如果<span class="math inline">\(\sum_{i=0}^{\infty} A_i\)</span>绝对收敛，那么<span class="math inline">\(\sum_{i=0}^{\infty} A_i\)</span>收敛，并且<span class="math inline">\(\sum_{i=0}^{\infty} A_i\)</span>改变求和次序后，收敛结果不变</li>
</ul>
<p>也有一些和数分中有差异的结果</p>
<ul>
<li><p>如果<span class="math inline">\(\sum_{i=0}^{\infty} A_i\)</span>（绝对）收敛，那么对于非奇异矩阵<span class="math inline">\(P, Q\)</span>，有<span class="math inline">\(\sum_{i=0}^{\infty} PA_iQ\)</span>（绝对）收敛</p>
<ul>
<li><p>在绝对收敛的情况下，给出证明</p>
<p>注意到<span class="math inline">\(||PA_iQ|| \leq ||P||*||Q|| * ||A_i||\)</span>，而<span class="math inline">\(||P||*||Q||\)</span>为非零常数</p></li>
</ul></li>
</ul>
<p>接下来考虑矩阵幂级数</p>
<ul>
<li>形如<span class="math inline">\(\sum c_i A^i\)</span>的矩阵级数称为矩阵幂级数</li>
</ul>
<p>考虑到范数的相容性，我们有</p>
<ul>
<li><p>如果对于某一种矩阵范数，<span class="math inline">\(\sum c_i ||A||^i\)</span>收敛，那么对应的矩阵级数绝对收敛</p></li>
<li><p>如果对于某一种矩阵范数，<span class="math inline">\(||A||\)</span>落在<span class="math inline">\(\sum c_i z^i\)</span>的收敛圆中，那么对应的矩阵级数绝对收敛</p></li>
<li><p>如果<span class="math inline">\(A\)</span>​的谱半径<span class="math inline">\(\rho(A)\)</span>​落在纯量幂级数<span class="math inline">\(\sum c_ix^i\)</span>​的收敛圆中，那么对应的矩阵级数绝对收敛；如果<span class="math inline">\(A\)</span>​的特征值有一个落在<span class="math inline">\(\sum c_iz^i\)</span>​​的收敛圆外，那么对应的矩阵级数发散</p>
<ul>
<li>考虑若尔当标准形</li>
</ul></li>
</ul>
<h3 id="矩阵函数">矩阵函数</h3>
<ul>
<li><p>考虑以下三个矩阵级数</p>
<p><span class="math display">\[\exp(A) = \sum_{i=0}^{\infty} \frac{A^i}{i!}\]</span></p>
<p><span class="math display">\[\sin(A) = \sum_{i=0}^{\infty} (-1)^i \frac{A^{2i+1}}{(2i+1)!}\]</span></p>
<p><span class="math display">\[\cos(A) = \sum_{i=0}^{\infty} (-1)^i \frac{A^{2i}}{(2i)!}\]</span></p>
<p>它们都是绝对收敛的，具体而言，设<span class="math inline">\(z = ||A||\)</span>，那么，当<span class="math inline">\(i \geq 1\)</span>时，由<span class="math inline">\(||\frac{A^i}{i!}|| \leq z^i *(i!)^{-1}\)</span>，得到<span class="math inline">\(||\sum_{i=0}^{\infty} \frac{A^i}{i!}|| \leq ||I|| + \sum_{i=1}^{\infty} z^i * (i!)^{-1} = e^z - 1 + ||I||\)</span>，因此<span class="math inline">\(\exp(A)\)</span>绝对收敛</p>
<p><span class="math inline">\(\sin(A), \cos(A)\)</span>的绝对收敛性可以类似地证明</p></li>
</ul>
<p>即使是基础的矩阵函数，性质也和普通的函数有所不同</p>
<ul>
<li><p>如果<span class="math inline">\(A, B\)</span>可交换，即<span class="math inline">\(AB = BA\)</span>，则有<span class="math inline">\(e^A * e^B = e^B * e^A = e^{A+B}\)</span></p>
<p>证明：由于<span class="math inline">\(e^A, e^B\)</span>​绝对收敛，我们可以考虑两者的柯西乘积</p>
<p><span class="math display">\[\begin{align*}e^A * e^B &amp;= (I + A + \frac{1}{2!}A^2 + ...)(I + B + \frac{1}{2!}B^2 + ...) \\ &amp;= I + (A+B) + \frac{1}{2!}(A+B)^2 + ... \\ &amp;= e^{A+B}\end{align*}\]</span></p></li>
<li><p>如果<span class="math inline">\(A, B\)</span>可交换，那么<span class="math inline">\(\cos(A+B) = \cos A \cos B - \sin A \sin B\)</span></p>
<p>证明：对比两式同次数的项，显然奇次数项都为0，我们只需要证明</p>
<p><span class="math display">\[\begin{align*}RHS &amp;= \sum_{i+j = k} (-1)^{i+j} \frac{A^{2i}}{(2i)!} \frac{B^{2j}}{(2j)!} - \sum_{i+j = k-1} (-1)^{i+j} \frac{A^{2i+1}}{(2i+1)!} \frac{B^{2j+1}}{(2j+1)!}\\ &amp;= (-1)^k [\sum_{i+j = k}  \frac{A^{2i}}{(2i)!} \frac{B^{2j}}{(2j)!} + \sum_{i+j = k-1} \frac{A^{2i+1}}{(2i+1)!} \frac{B^{2j+1}}{(2j+1)!}] \\ &amp;= \frac{(-1)^k}{(2k)!} [\sum_{i} \binom{2k}{2i}A^{2i}B^{2k-2i} + \sum_i \binom{2k}{2i+1}A^{2i+1}B^{2k-2i-1}] \\ &amp;= \frac{(-1)^k}{(2k)!} \sum_i \binom{2k}{i} A^i B^{2k-i} \\ &amp;= \frac{(-1)^k}{(2k)!} (A+B)^{2k} \\ &amp;= LHS\end{align*}\]</span></p></li>
<li><p>如果<span class="math inline">\(A, B\)</span>可交换，那么<span class="math inline">\(\sin(A+B) = \sin A \cos B + \cos A \sin B\)</span>​</p></li>
</ul>
<p>当然，也有一些和普通函数相同的性质</p>
<ul>
<li><p><span class="math inline">\(\cos(-A) = \cos A, \sin (-A) = -\sin(A)\)</span>​</p></li>
<li><p>欧拉公式</p>
<p><span class="math display">\[\exp(iA) = \cos A + i \sin A\]</span></p></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>matrix_analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵分析 4</title>
    <url>/2021/07/31/matrix-analysis-4/</url>
    <content><![CDATA[<span id="more"></span>
<p>这一节来记一些乱七八糟的习题</p>
<blockquote>
<p><span class="math inline">\(AA^H\)</span>和<span class="math inline">\(A^HA\)</span>有相同的非零特征值</p>
</blockquote>
<p>我们可以考虑特征值的定义的角度来证明这一点</p>
<p>设<span class="math inline">\(\lambda\)</span>是<span class="math inline">\(AA^H\)</span>的特征向量，<span class="math inline">\(x\)</span>是对应的特征向量，即<span class="math inline">\(AA^Hx = \lambda x\)</span>，由于<span class="math inline">\(\lambda, x \neq 0\)</span>，因此<span class="math inline">\(\lambda x \neq 0\)</span>，从而<span class="math inline">\(A^Hx \neq 0\)</span>，那么由<span class="math inline">\((A^HA)(A^Hx) = \lambda(A^Hx)\)</span>知，<span class="math inline">\(\lambda\)</span>是<span class="math inline">\(A^HA\)</span>的特征值，那么，<span class="math inline">\(AA^H\)</span>的所有非零特征值都是<span class="math inline">\(A^HA\)</span>的非零特征值，反过来也是如此，因此两者非零特征值的集合是相同的</p>
<p>下面，我们还需要证明两者的特征值的代数重复度相同，由于<span class="math inline">\(AA^H, A^HA\)</span>都可对角化，我们只需要证明两者的几何重复度相同</p>
<p>设<span class="math inline">\(x_1, x_2, ..., x_n\)</span>是对应于<span class="math inline">\(AA^H\)</span>的特征值<span class="math inline">\(\lambda\)</span>的线性无关的特征向量，由之前推导的对应关系，我们考虑证明<span class="math inline">\(A^Hx_1, A^Hx_2,...,A^Hx_n\)</span>线性无关</p>
<p>设有<span class="math inline">\(\sum k_i A^H x_i = 0\)</span>，那么<span class="math inline">\(\sum k_i (AA^H) x_i = 0\)</span>，从而<span class="math inline">\(\lambda \sum k_ix_i = 0\)</span>，因此<span class="math inline">\(k_1=k_2=...=k_n=0\)</span></p>
<blockquote>
<p>对于<span class="math inline">\(n*n\)</span>的复矩阵<span class="math inline">\(A\)</span>，设<span class="math inline">\(\lambda_1, ..., \lambda_n\)</span>为其<span class="math inline">\(n\)</span>个特征值，那么<span class="math inline">\(\sum_{i=1}^n |\lambda_i|^2 \leq \sum_{1 \leq i, j \leq n} |a_{ij}|^2\)</span>，当且仅当<span class="math inline">\(A\)</span>是正规矩阵时取得等号</p>
</blockquote>
<p>考虑Schur TH，存在酉矩阵<span class="math inline">\(U\)</span>，使得<span class="math inline">\(A = U^HBU\)</span>，其中<span class="math inline">\(B\)</span>为上三角矩阵，并且对角线元素为<span class="math inline">\(A\)</span>的特征值</p>
<p>注意到<span class="math inline">\(AA^H = U^HBB^HU\)</span>，而<span class="math inline">\(tr(AA^H) = \sum |a_{ij}|^2\)</span>，<span class="math inline">\(tr(BB^H) = \sum |b_{ij}|^2 \geq \sum |\lambda_i|^2\)</span>，当且仅当<span class="math inline">\(B\)</span>是对角矩阵时，取到等号</p>
<p>由于相似矩阵的特征多项式相同，那么他们将有相同的迹，因此<span class="math inline">\(\sum |a_{ij}|^2 = tr(AA^H) = tr(BB^H)\geq \sum |\lambda_i|^2\)</span>，当且仅当<span class="math inline">\(A\)</span>是正规矩阵时取得等号</p>
<blockquote>
<p>设<span class="math inline">\(\sigma_1, ..., \sigma_n\)</span>是<span class="math inline">\(A\)</span>的奇异值，那么<span class="math inline">\(tr(A^HA) = tr(AA^H) = \sum_{i=1}^r \sigma_i^2\)</span></p>
</blockquote>
<p>设<span class="math inline">\(M = AA^H\)</span>，由上个定理证明过程，我们知道，只要证明<span class="math inline">\(M\)</span>可酉对角化即可</p>
<p>由于<span class="math inline">\(M\)</span>是埃尔米特矩阵，这是显然的</p>
<blockquote>
<p>矩阵<span class="math inline">\(A\)</span>的非零奇异值的个数是该矩阵的秩</p>
</blockquote>
<p>我们知道<span class="math inline">\(rank(A) = rank(AA^H)\)</span>，而对于<span class="math inline">\(AA^H\)</span>而言，其酉相似于一个对角矩阵<span class="math inline">\(B\)</span>，对角线上的元素为<span class="math inline">\(A\)</span>的奇异值的平方，因此<span class="math inline">\(rank(AA^H)\)</span>为<span class="math inline">\(A\)</span>的非零奇异值的个数</p>
<blockquote>
<p>设<span class="math inline">\(A\)</span>为可逆埃米尔特矩阵，且<span class="math inline">\(A\)</span>的谱分解为<span class="math inline">\(\sum \lambda_i x_i x_i^H\)</span>，那么<span class="math inline">\(A^{-1} = \sum \lambda_i^{-1} x_ix_i^H\)</span></p>
</blockquote>
<p>设<span class="math inline">\(X = \sum \lambda_i^{-1} x_ix_i^H\)</span>，那么<span class="math inline">\(AX = \sum_{i, j} \lambda_i* \lambda_j^{-1} x_ix_i^H x_jx_j^H = \sum_{i} x_ix_i^H = \sum_{i, j} x_ix_j^H = UU^H = I\)</span></p>
<blockquote>
<p>若<span class="math inline">\(A\)</span>是正规矩阵，则<span class="math inline">\(A\)</span>的奇异值就是<span class="math inline">\(A\)</span>的特征值的模</p>
</blockquote>
<p>由<span class="math inline">\(A\)</span>是正规矩阵，<span class="math inline">\(A\)</span>可酉对角化，因此<span class="math inline">\(A = U^H diag(\lambda_1, \lambda_2, ..., \lambda_n) U\)</span></p>
<p>继而<span class="math inline">\(AA^H = U^H diag(|\lambda_1|^2, |\lambda_2|^2, ..., |\lambda_n|^2) U\)</span>，那么<span class="math inline">\(|\lambda_1|^2, |\lambda_2|^2, ..., |\lambda_n|^2\)</span>就是<span class="math inline">\(AA^H\)</span>的特征值，从而<span class="math inline">\(|\lambda_1|, |\lambda_2|, ..., |\lambda_n|\)</span>就是<span class="math inline">\(A\)</span>的奇异值</p>
<blockquote>
<p>酉矩阵特征值值的模都为<span class="math inline">\(1\)</span></p>
</blockquote>
<p>由于<span class="math inline">\(x^Hy = x^HU^HUy = (Ux)^H(Uy)\)</span>，对于酉矩阵<span class="math inline">\(U\)</span>的特征值<span class="math inline">\(\lambda\)</span>，我们对其特征向量<span class="math inline">\(x\)</span>进行考察，那么<span class="math inline">\(x^Hx = (Ux)^HUx = \lambda^H \lambda x^Hx = |\lambda|^2 x^Hx\)</span>，故<span class="math inline">\(|\lambda| = 1\)</span></p>
<blockquote>
<p>若<span class="math inline">\(A\)</span>是正规矩阵，且<span class="math inline">\(A\)</span>的特征值的模为<span class="math inline">\(1\)</span>，那么<span class="math inline">\(A\)</span>为酉矩阵</p>
</blockquote>
<p>直接运用上题的结论即可</p>
<blockquote>
<p>两个正规矩阵相似的充要条件是两者的特征多项式相同</p>
</blockquote>
<p>充分性：如果正规矩阵<span class="math inline">\(A, B\)</span>的特征多项式相同，那么存在酉矩阵<span class="math inline">\(U_1, U_2\)</span>，使得<span class="math inline">\(A = U_1^H \Lambda U_1, B = U_2^H \Lambda U_2\)</span>，从而<span class="math inline">\(A = (U_1^{-1}U_2)^H \Lambda (U_1^{-1}U_2)\)</span>，从而两者相似</p>
<p>必要性：相似矩阵有相同的特征多项式</p>
<blockquote>
<p>若<span class="math inline">\(A\)</span>为实矩阵，且<span class="math inline">\(A^TA = AA^T\)</span>，那么<span class="math inline">\(A\)</span>是对称矩阵</p>
</blockquote>
<p><span class="math inline">\(A\)</span>满足正规矩阵的定义，因此有<span class="math inline">\(A = U^H \Lambda U\)</span>，其中<span class="math inline">\(U\)</span>为酉矩阵，<span class="math inline">\(\Lambda\)</span>为特征值构成的对角阵</p>
<p>那么由<span class="math inline">\(A^H=A\)</span>，<span class="math inline">\(A^H = A^T\)</span>，我们得到<span class="math inline">\(A=A^T\)</span></p>
<blockquote>
<p>正规矩阵<span class="math inline">\(A\)</span>是埃尔米特矩阵，当且仅当<span class="math inline">\(A\)</span>的特征值全为实数</p>
</blockquote>
<p>”<span class="math inline">\(\Rightarrow\)</span>“：显然</p>
<p>"<span class="math inline">\(\Leftarrow\)</span>"：我们考虑矩阵<span class="math inline">\(A\)</span>的谱分解，<span class="math inline">\(A = \sum_{i} \lambda_i x_ix_i^H\)</span>，则有<span class="math inline">\(A^H = \sum_i \lambda_i^H x_i x_i^H = \sum_i \lambda_i x_ix_i^H = A\)</span></p>
<blockquote>
<p><span class="math inline">\(tr(xy^H) = y^Hx\)</span></p>
</blockquote>
<p>取一组标准正交基，设出<span class="math inline">\(x, y\)</span>在这组标准正交基下的坐标为，然后就不难看出了</p>
<p>特别的，如果我们令<span class="math inline">\(y = Ax\)</span>，则有<span class="math inline">\(tr(Axx^H) = x^HAx\)</span></p>
<p>暂定</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>matrix_analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>2021杭电多校第二场T9</title>
    <url>/2021/07/23/problem-1/</url>
    <content><![CDATA[<span id="more"></span>
<h4 id="吐槽">吐槽</h4>
<p>杭电多校的好题太少了，出题人要么是水平问题，要么是态度问题...</p>
<h4 id="题面">题面</h4>
<p>给定<span class="math inline">\(n\)</span>个数<span class="math inline">\(a_1, ..., a_n\)</span>，询问有多少个三元有序对<span class="math inline">\((i, j, k)\)</span>满足<span class="math inline">\(i &lt; j &lt; k\)</span>，并且<span class="math inline">\(a_i a_j a_k\)</span>是一个完全平方数</p>
<p><span class="math inline">\(n \leq 10^5, \max a_i \leq 10^5\)</span></p>
<h4 id="题解">题解</h4>
<p>首先，我们将<span class="math inline">\(a_i\)</span>质因数分解为<span class="math inline">\(p_1^{r_1}...p_k^{r_k}\)</span>，不难发现只有<span class="math inline">\(r_1\)</span>的奇偶影响答案的统计，因此我们只需要考虑形如<span class="math inline">\(p_1...p_k\)</span>的数即可</p>
<p>记<span class="math inline">\(M = 10^5\)</span>，分最大质因子<span class="math inline">\(&gt; \sqrt M\)</span>的数和最大质因子<span class="math inline">\(\leq \sqrt M\)</span>的数考虑</p>
<p>三元组只可能是下列两种情况之一：</p>
<ul>
<li>三个数的最大质因子都<span class="math inline">\(\leq \sqrt M\)</span>，形如这样的数可以爆搜，大概有1600000组</li>
<li>三个数中有两个数的最大质因子<span class="math inline">\(&gt; \sqrt M\)</span>，我们可以枚举最大质因子<span class="math inline">\(p\)</span>，如果最大质因子为<span class="math inline">\(p\)</span>的数有<span class="math inline">\(&lt; \sqrt M\)</span>个，那么我们直接暴力枚举，否则，最大质因子为<span class="math inline">\(p\)</span>的数对应的值只会有<span class="math inline">\(&lt; \sqrt M\)</span>个，我们按照权值来暴力，此时，由于每个最大质因子<span class="math inline">\(p\)</span>的平均复杂度<span class="math inline">\(&lt; \sqrt M\)</span>，因此总复杂度小于<span class="math inline">\(M \sqrt M\)</span></li>
</ul>
<p>做法挺明显的....码的时候有一点点细节</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;bits/stdc++.h&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> <span class="kw">namespace</span> std<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#define ll </span><span class="dt">long</span><span class="pp"> </span><span class="dt">long</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#define gc </span>getchar</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">inline</span> <span class="dt">int</span> read<span class="op">()</span> <span class="op">&#123;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> p <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> w <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> <span class="dt">char</span> c <span class="op">=</span> gc<span class="op">();</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span><span class="op">(</span>c <span class="op">&gt;</span> <span class="ch">&#39;9&#39;</span> <span class="op">||</span> c <span class="op">&lt;</span> <span class="ch">&#39;0&#39;</span><span class="op">)</span> <span class="op">&#123;</span> <span class="cf">if</span><span class="op">(</span>c <span class="op">==</span> <span class="ch">&#39;-&#39;</span><span class="op">)</span> w <span class="op">=</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span> c <span class="op">=</span> gc<span class="op">();</span> <span class="op">&#125;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span><span class="op">(</span>c <span class="op">&gt;=</span> <span class="ch">&#39;0&#39;</span> <span class="op">&amp;&amp;</span> c <span class="op">&lt;=</span> <span class="ch">&#39;9&#39;</span><span class="op">)</span> p <span class="op">=</span> p <span class="op">*</span> <span class="dv">10</span> <span class="op">+</span> c <span class="op">-</span> <span class="ch">&#39;0&#39;</span><span class="op">,</span> c <span class="op">=</span> gc<span class="op">();</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> p <span class="op">*</span> w<span class="op">;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="pp">#define rep</span><span class="op">(</span>io<span class="op">,</span><span class="pp"> </span>st<span class="op">,</span><span class="pp"> </span>ed<span class="op">)</span><span class="pp"> </span><span class="cf">for</span><span class="op">(</span><span class="dt">int</span><span class="pp"> </span>io<span class="pp"> </span><span class="op">=</span><span class="pp"> </span>st<span class="op">;</span><span class="pp"> </span>io<span class="pp"> </span><span class="op">&lt;=</span><span class="pp"> </span>ed<span class="op">;</span><span class="pp"> </span>io<span class="pp"> </span><span class="op">++)</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="pp">#define drep</span><span class="op">(</span>io<span class="op">,</span><span class="pp"> </span>ed<span class="op">,</span><span class="pp"> </span>st<span class="op">)</span><span class="pp"> </span><span class="cf">for</span><span class="op">(</span><span class="dt">int</span><span class="pp"> </span>io<span class="pp"> </span><span class="op">=</span><span class="pp"> </span>ed<span class="op">;</span><span class="pp"> </span>io<span class="pp"> </span><span class="op">&gt;=</span><span class="pp"> </span>st<span class="op">;</span><span class="pp"> </span>io<span class="pp"> </span><span class="op">--)</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="dt">int</span> sid <span class="op">=</span> <span class="fl">1e5</span> <span class="op">+</span> <span class="dv">5</span><span class="op">;</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> n<span class="op">,</span> M <span class="op">=</span> <span class="fl">1e5</span><span class="op">;</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>vector <span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> arr<span class="op">[</span>sid<span class="op">];</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> _gcd<span class="op">[</span><span class="dv">500</span><span class="op">][</span><span class="dv">500</span><span class="op">],</span> mul<span class="op">[</span><span class="dv">500</span><span class="op">][</span><span class="dv">500</span><span class="op">];</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> maxfac<span class="op">[</span>sid<span class="op">],</span> <span class="fu">tr</span><span class="op">[</span>sid<span class="op">],</span> pr<span class="op">[</span>sid<span class="op">],</span> nop<span class="op">[</span>sid<span class="op">],</span> cnt<span class="op">;</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> num<span class="op">[</span>sid<span class="op">],</span> tnum<span class="op">[</span>sid<span class="op">];</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> gcd<span class="op">(</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> b <span class="op">?</span> gcd<span class="op">(</span>b<span class="op">,</span> a <span class="op">%</span> b<span class="op">)</span> <span class="op">:</span> a<span class="op">;</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> init<span class="op">()</span> <span class="op">&#123;</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>    rep<span class="op">(</span>i<span class="op">,</span> <span class="dv">2</span><span class="op">,</span> M<span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(!</span>nop<span class="op">[</span>i<span class="op">])</span> pr<span class="op">[++</span> cnt<span class="op">]</span> <span class="op">=</span> i<span class="op">;</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> j <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> j <span class="op">&lt;=</span> cnt<span class="op">;</span> j <span class="op">++)</span> <span class="op">&#123;</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> p <span class="op">=</span> i <span class="op">*</span> pr<span class="op">[</span>j<span class="op">];</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span><span class="op">(</span>p <span class="op">&gt;</span> M<span class="op">)</span> <span class="cf">break</span><span class="op">;</span> nop<span class="op">[</span>p<span class="op">]</span> <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span><span class="op">(</span>i <span class="op">%</span> pr<span class="op">[</span>j<span class="op">]</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="cf">break</span><span class="op">;</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> sqrt_M <span class="op">=</span> sqrt<span class="op">(</span>M<span class="op">)</span> <span class="op">+</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>    rep<span class="op">(</span>i<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> sqrt_M<span class="op">)</span> rep<span class="op">(</span>j<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> sqrt_M<span class="op">)</span> _gcd<span class="op">[</span>i<span class="op">][</span>j<span class="op">]</span> <span class="op">=</span> gcd<span class="op">(</span>i<span class="op">,</span> j<span class="op">);</span></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>    rep<span class="op">(</span>i<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> sqrt_M<span class="op">)</span> rep<span class="op">(</span>j<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> sqrt_M<span class="op">)</span> </span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span>i <span class="op">||</span> j<span class="op">)</span> mul<span class="op">[</span>i<span class="op">][</span>j<span class="op">]</span> <span class="op">=</span> i <span class="op">*</span> j <span class="op">/</span> _gcd<span class="op">[</span>i<span class="op">][</span>j<span class="op">]</span> <span class="op">/</span> _gcd<span class="op">[</span>i<span class="op">][</span>j<span class="op">];</span></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> mul<span class="op">[</span>i<span class="op">][</span>j<span class="op">]</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>    rep<span class="op">(</span>i<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> M<span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> t <span class="op">=</span> i<span class="op">;</span> <span class="fu">tr</span><span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> j <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> pr<span class="op">[</span>j<span class="op">]</span> <span class="op">*</span> pr<span class="op">[</span>j<span class="op">]</span> <span class="op">&lt;=</span> t<span class="op">;</span> j <span class="op">++)</span></span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span><span class="op">(</span>t <span class="op">%</span> pr<span class="op">[</span>j<span class="op">]</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>                <span class="dt">int</span> num <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>                <span class="cf">while</span><span class="op">(</span>t <span class="op">%</span> pr<span class="op">[</span>j<span class="op">]</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> t <span class="op">/=</span> pr<span class="op">[</span>j<span class="op">],</span> num <span class="op">++;</span></span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span><span class="op">(</span>num <span class="op">&amp;</span> <span class="dv">1</span><span class="op">)</span> <span class="fu">tr</span><span class="op">[</span>i<span class="op">]</span> <span class="op">*=</span> pr<span class="op">[</span>j<span class="op">];</span></span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span>t <span class="op">&gt;</span> sqrt_M<span class="op">)</span> maxfac<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> t<span class="op">;</span></span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="fu">tr</span><span class="op">[</span>i<span class="op">]</span> <span class="op">*=</span> t<span class="op">;</span></span>
<span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span>
<span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a><span class="dt">long</span> <span class="dt">long</span> ans<span class="op">;</span></span>
<span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> dfs<span class="op">(</span><span class="dt">int</span> dep<span class="op">,</span> <span class="dt">int</span> v1<span class="op">,</span> <span class="dt">int</span> v2<span class="op">,</span> <span class="dt">int</span> v3<span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span><span class="op">(</span>dep <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span>v1 <span class="op">==</span> v2 <span class="op">&amp;&amp;</span> v1 <span class="op">==</span> v3<span class="op">)</span> ans <span class="op">+=</span> <span class="dv">1</span><span class="bu">ll</span> <span class="op">*</span> num<span class="op">[</span>v1<span class="op">]</span> <span class="op">*</span> <span class="op">(</span>num<span class="op">[</span>v1<span class="op">]</span> <span class="op">-</span> <span class="dv">1</span><span class="op">)</span> <span class="op">*</span> <span class="op">(</span>num<span class="op">[</span>v1<span class="op">]</span> <span class="op">-</span> <span class="dv">2</span><span class="op">)</span> <span class="op">/</span> <span class="dv">6</span><span class="op">;</span></span>
<span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="cf">if</span><span class="op">(</span>v1 <span class="op">==</span> v2<span class="op">)</span> ans <span class="op">+=</span> <span class="dv">1</span><span class="bu">ll</span> <span class="op">*</span> num<span class="op">[</span>v1<span class="op">]</span> <span class="op">*</span> <span class="op">(</span>num<span class="op">[</span>v1<span class="op">]</span> <span class="op">-</span> <span class="dv">1</span><span class="op">)</span> <span class="op">/</span> <span class="dv">2</span> <span class="op">*</span> num<span class="op">[</span>v3<span class="op">];</span></span>
<span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> ans <span class="op">+=</span> <span class="dv">1</span><span class="bu">ll</span> <span class="op">*</span> num<span class="op">[</span>v1<span class="op">]</span> <span class="op">*</span> num<span class="op">[</span>v2<span class="op">]</span> <span class="op">*</span> num<span class="op">[</span>v3<span class="op">];</span></span>
<span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span><span class="op">;</span></span>
<span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a>        </span>
<span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a>    dfs<span class="op">(</span>dep <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> v1<span class="op">,</span> v2<span class="op">,</span> v3<span class="op">);</span></span>
<span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span><span class="op">(</span>v1 <span class="op">==</span> v2 <span class="op">&amp;&amp;</span> v1 <span class="op">==</span> v3<span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> <span class="va">v1_</span> <span class="op">=</span> v1 <span class="op">*</span> pr<span class="op">[</span>dep<span class="op">];</span></span>
<span id="cb1-67"><a href="#cb1-67" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span><span class="va">v1_</span> <span class="op">&lt;=</span> M<span class="op">)</span> dfs<span class="op">(</span>dep <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> <span class="va">v1_</span><span class="op">,</span> <span class="va">v1_</span><span class="op">,</span> v1<span class="op">);</span></span>
<span id="cb1-68"><a href="#cb1-68" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span><span class="op">;</span></span>
<span id="cb1-69"><a href="#cb1-69" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-70"><a href="#cb1-70" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span><span class="op">(</span>v1 <span class="op">==</span> v2<span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-71"><a href="#cb1-71" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> <span class="va">v1_</span> <span class="op">=</span> v1 <span class="op">*</span> pr<span class="op">[</span>dep<span class="op">],</span> <span class="va">v3_</span> <span class="op">=</span> v3 <span class="op">*</span> pr<span class="op">[</span>dep<span class="op">];</span></span>
<span id="cb1-72"><a href="#cb1-72" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span><span class="va">v1_</span> <span class="op">&lt;=</span> M<span class="op">)</span> dfs<span class="op">(</span>dep <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> <span class="va">v1_</span><span class="op">,</span> <span class="va">v1_</span><span class="op">,</span> v3<span class="op">);</span></span>
<span id="cb1-73"><a href="#cb1-73" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span><span class="va">v1_</span> <span class="op">&lt;=</span> M <span class="op">&amp;&amp;</span> <span class="va">v3_</span> <span class="op">&lt;=</span> M<span class="op">)</span> dfs<span class="op">(</span>dep <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> v1<span class="op">,</span> <span class="va">v1_</span><span class="op">,</span> <span class="va">v3_</span><span class="op">);</span></span>
<span id="cb1-74"><a href="#cb1-74" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span><span class="op">;</span></span>
<span id="cb1-75"><a href="#cb1-75" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-76"><a href="#cb1-76" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> <span class="va">v1_</span> <span class="op">=</span> v1 <span class="op">*</span> pr<span class="op">[</span>dep<span class="op">],</span> <span class="va">v2_</span> <span class="op">=</span> v2 <span class="op">*</span> pr<span class="op">[</span>dep<span class="op">],</span> <span class="va">v3_</span> <span class="op">=</span> v3 <span class="op">*</span> pr<span class="op">[</span>dep<span class="op">];</span></span>
<span id="cb1-77"><a href="#cb1-77" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span><span class="op">(</span><span class="va">v1_</span> <span class="op">&lt;=</span> M <span class="op">&amp;&amp;</span> <span class="va">v2_</span> <span class="op">&lt;=</span> M<span class="op">)</span> dfs<span class="op">(</span>dep <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> <span class="va">v1_</span><span class="op">,</span> <span class="va">v2_</span><span class="op">,</span> v3<span class="op">);</span></span>
<span id="cb1-78"><a href="#cb1-78" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span><span class="op">(</span><span class="va">v1_</span> <span class="op">&lt;=</span> M <span class="op">&amp;&amp;</span> <span class="va">v3_</span> <span class="op">&lt;=</span> M<span class="op">)</span> dfs<span class="op">(</span>dep <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> <span class="va">v1_</span><span class="op">,</span> v2<span class="op">,</span> <span class="va">v3_</span><span class="op">);</span></span>
<span id="cb1-79"><a href="#cb1-79" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span><span class="op">(</span><span class="va">v2_</span> <span class="op">&lt;=</span> M <span class="op">&amp;&amp;</span> <span class="va">v3_</span> <span class="op">&lt;=</span> M<span class="op">)</span> dfs<span class="op">(</span>dep <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> v1<span class="op">,</span> <span class="va">v2_</span><span class="op">,</span> <span class="va">v3_</span><span class="op">);</span></span>
<span id="cb1-80"><a href="#cb1-80" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span>
<span id="cb1-81"><a href="#cb1-81" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-82"><a href="#cb1-82" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> solve<span class="op">()</span> <span class="op">&#123;</span></span>
<span id="cb1-83"><a href="#cb1-83" aria-hidden="true" tabindex="-1"></a>    n <span class="op">=</span> read<span class="op">();</span></span>
<span id="cb1-84"><a href="#cb1-84" aria-hidden="true" tabindex="-1"></a>    ans <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-85"><a href="#cb1-85" aria-hidden="true" tabindex="-1"></a>    rep<span class="op">(</span>i<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> M<span class="op">)</span> num<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-86"><a href="#cb1-86" aria-hidden="true" tabindex="-1"></a>    rep<span class="op">(</span>i<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> n<span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-87"><a href="#cb1-87" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> x <span class="op">=</span> read<span class="op">();</span></span>
<span id="cb1-88"><a href="#cb1-88" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(!</span>maxfac<span class="op">[</span>x<span class="op">])</span> num<span class="op">[</span> <span class="fu">tr</span><span class="op">[</span>x<span class="op">]</span> <span class="op">]</span> <span class="op">++;</span></span>
<span id="cb1-89"><a href="#cb1-89" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> arr<span class="op">[</span> maxfac<span class="op">[</span>x<span class="op">]</span> <span class="op">].</span>push_back<span class="op">(</span><span class="fu">tr</span><span class="op">[</span>x<span class="op">]);</span></span>
<span id="cb1-90"><a href="#cb1-90" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-91"><a href="#cb1-91" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb1-92"><a href="#cb1-92" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> sqrt_M <span class="op">=</span> sqrt<span class="op">(</span>M<span class="op">),</span> lim <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-93"><a href="#cb1-93" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span><span class="op">(</span>pr<span class="op">[</span>lim<span class="op">]</span> <span class="op">&lt;=</span> sqrt_M<span class="op">)</span> lim <span class="op">++;</span></span>
<span id="cb1-94"><a href="#cb1-94" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb1-95"><a href="#cb1-95" aria-hidden="true" tabindex="-1"></a>    dfs<span class="op">(</span>lim<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb1-96"><a href="#cb1-96" aria-hidden="true" tabindex="-1"></a>    rep<span class="op">(</span>i<span class="op">,</span> lim <span class="op">+</span> <span class="dv">1</span><span class="op">,</span> cnt<span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-97"><a href="#cb1-97" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> p <span class="op">=</span> pr<span class="op">[</span>i<span class="op">];</span></span>
<span id="cb1-98"><a href="#cb1-98" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span>arr<span class="op">[</span>p<span class="op">].</span>size<span class="op">()</span> <span class="op">&lt;</span> sqrt_M<span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-99"><a href="#cb1-99" aria-hidden="true" tabindex="-1"></a>            rep<span class="op">(</span>i<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="op">(</span><span class="dt">int</span><span class="op">)</span>arr<span class="op">[</span>p<span class="op">].</span>size<span class="op">()</span> <span class="op">-</span> <span class="dv">1</span><span class="op">)</span> rep<span class="op">(</span>j<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> i <span class="op">-</span> <span class="dv">1</span><span class="op">)</span></span>
<span id="cb1-100"><a href="#cb1-100" aria-hidden="true" tabindex="-1"></a>                ans <span class="op">+=</span> num<span class="op">[</span> mul<span class="op">[</span> arr<span class="op">[</span>p<span class="op">][</span>i<span class="op">]</span> <span class="op">][</span> arr<span class="op">[</span>p<span class="op">][</span>j<span class="op">]</span> <span class="op">]</span> <span class="op">];</span></span>
<span id="cb1-101"><a href="#cb1-101" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-102"><a href="#cb1-102" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="op">&#123;</span></span>
<span id="cb1-103"><a href="#cb1-103" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> Lim <span class="op">=</span> M <span class="op">/</span> pr<span class="op">[</span>i<span class="op">];</span></span>
<span id="cb1-104"><a href="#cb1-104" aria-hidden="true" tabindex="-1"></a>            rep<span class="op">(</span>i<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> Lim<span class="op">)</span> tnum<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-105"><a href="#cb1-105" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span><span class="op">(</span><span class="kw">auto</span> x <span class="op">:</span> arr<span class="op">[</span>p<span class="op">])</span> tnum<span class="op">[</span>x<span class="op">]</span> <span class="op">++;</span></span>
<span id="cb1-106"><a href="#cb1-106" aria-hidden="true" tabindex="-1"></a>            rep<span class="op">(</span>i<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> Lim<span class="op">)</span> <span class="cf">if</span><span class="op">(</span>tnum<span class="op">[</span>i<span class="op">])</span> rep<span class="op">(</span>j<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> i<span class="op">)</span> <span class="cf">if</span><span class="op">(</span>tnum<span class="op">[</span>j<span class="op">])</span> <span class="op">&#123;</span></span>
<span id="cb1-107"><a href="#cb1-107" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span><span class="op">(</span>i <span class="op">==</span> j<span class="op">)</span> ans <span class="op">+=</span> <span class="dv">1</span><span class="bu">ll</span> <span class="op">*</span> tnum<span class="op">[</span>i<span class="op">]</span> <span class="op">*</span> <span class="op">(</span>tnum<span class="op">[</span>i<span class="op">]</span> <span class="op">-</span> <span class="dv">1</span><span class="op">)</span> <span class="op">/</span> <span class="dv">2</span> <span class="op">*</span> num<span class="op">[</span> mul<span class="op">[</span>i<span class="op">][</span>j<span class="op">]</span> <span class="op">];</span></span>
<span id="cb1-108"><a href="#cb1-108" aria-hidden="true" tabindex="-1"></a>                <span class="cf">else</span> ans <span class="op">+=</span> <span class="dv">1</span><span class="bu">ll</span> <span class="op">*</span> tnum<span class="op">[</span>i<span class="op">]</span> <span class="op">*</span> tnum<span class="op">[</span>j<span class="op">]</span> <span class="op">*</span> num<span class="op">[</span> mul<span class="op">[</span>i<span class="op">][</span>j<span class="op">]</span> <span class="op">];</span></span>
<span id="cb1-109"><a href="#cb1-109" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span>
<span id="cb1-110"><a href="#cb1-110" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-111"><a href="#cb1-111" aria-hidden="true" tabindex="-1"></a>        arr<span class="op">[</span>p<span class="op">].</span>clear<span class="op">();</span></span>
<span id="cb1-112"><a href="#cb1-112" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-113"><a href="#cb1-113" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb1-114"><a href="#cb1-114" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%lld\n</span><span class="st">&quot;</span><span class="op">,</span> ans<span class="op">);</span></span>
<span id="cb1-115"><a href="#cb1-115" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span>
<span id="cb1-116"><a href="#cb1-116" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-117"><a href="#cb1-117" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">&#123;</span></span>
<span id="cb1-118"><a href="#cb1-118" aria-hidden="true" tabindex="-1"></a>    init<span class="op">();</span></span>
<span id="cb1-119"><a href="#cb1-119" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> T <span class="op">=</span> read<span class="op">();</span></span>
<span id="cb1-120"><a href="#cb1-120" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span><span class="op">(</span>T <span class="op">--)</span> solve<span class="op">();</span></span>
<span id="cb1-121"><a href="#cb1-121" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-122"><a href="#cb1-122" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div>
]]></content>
      <categories>
        <category>problems</category>
      </categories>
      <tags>
        <tag>number_theory</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵分析 5</title>
    <url>/2021/08/02/matrix-analysis-5/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="向量范数">向量范数</h3>
<h4 id="介绍">介绍</h4>
<ul>
<li>定义：如果<span class="math inline">\(V\)</span>是数域<span class="math inline">\(P\)</span>上的线性空间，且对于<span class="math inline">\(x \in V\)</span>，存在<span class="math inline">\(V \to R\)</span>的函数<span class="math inline">\(||x||\)</span>，满足
<ul>
<li>非负性：<span class="math inline">\(||x|| \geq 0\)</span>，当且仅当<span class="math inline">\(x = 0\)</span>取等</li>
<li>齐次性：<span class="math inline">\(||kx|| = |k|*||x||\)</span></li>
<li>三角不等式：<span class="math inline">\(||x+y|| \leq ||x|| + ||y||\)</span></li>
</ul></li>
</ul>
<p>这里记录一些常见的范数</p>
<ul>
<li><p><span class="math inline">\(||x|| = \sqrt {\sum_{i=1}^n |x_i|^2}\)</span>，称作<strong>2-范数</strong>或者<strong>欧式范数</strong>，记为<span class="math inline">\(||x||_2\)</span></p>
<ul>
<li>该函数显然满足非负性和齐次性，利用柯西不等式可以得到三角不等式也满足</li>
</ul></li>
<li><p><span class="math inline">\(||x|| = max_{i=1}^n |x_i|\)</span>，称作<strong><span class="math inline">\(\infty-\)</span>范数</strong>，记为<span class="math inline">\(||x||_{\infty}\)</span></p>
<ul>
<li>验证三条性质都是简单的</li>
</ul></li>
<li><p><span class="math inline">\(||x|| = (\sum_{i=1}^n |x_i|^p)^{\frac{1}{p}}\)</span>，称作<strong>p-范数</strong>，其中<span class="math inline">\(1 \leq p &lt; +\infty\)</span>，记为<span class="math inline">\(||x||_p\)</span></p>
<ul>
<li>非负性和齐次性仍然是显然的</li>
<li>三角不等式则可由Young不等式或Holder不等式得出</li>
<li>不难发现<span class="math inline">\(p= 2\)</span>和<span class="math inline">\(p \to +\infty\)</span>的情况下，p-范数变为上述两种情况</li>
</ul></li>
<li><p>对于正定埃尔米特矩阵<span class="math inline">\(A\)</span>，定义<span class="math inline">\(||x||_A = \sqrt {x^HAx}\)</span>，称作<strong>椭圆范数</strong></p>
<ul>
<li><p>非负性和齐次性仍然是显然的</p></li>
<li><p>三角不等式：由于<span class="math inline">\(A\)</span>是正定埃尔米特矩阵，因此存在非奇异矩阵<span class="math inline">\(P\)</span>，使得<span class="math inline">\(A = P^HP\)</span></p>
<p>那么，<span class="math inline">\(||x||_A = ||Px||_2\)</span>，而<span class="math inline">\(||P(x+y)||_2 = ||Px+Py||_2 \leq ||Px||_2 + ||Py||_2\)</span></p></li>
</ul></li>
</ul>
<h4 id="向量范数的等价性">向量范数的等价性</h4>
<ul>
<li><p>称向量范数<span class="math inline">\(||\cdot||_a\)</span>，<span class="math inline">\(||\cdot||_b\)</span>等价，当且仅当存在<span class="math inline">\(c_1, c_2 &gt; 0\)</span>，使得对于任意<span class="math inline">\(x\)</span>，</p>
<p><span class="math display">\[c_1||x||_b \leq ||x||_a \leq c_2||x||_b\]</span></p></li>
<li><p>两个范数等价，当且仅当它们具有相同的敛散性</p>
<ul>
<li><p>充分性是显然的，我们考虑必要性的证明</p>
<p>反证法，不妨设对于任意大的整数<span class="math inline">\(n\)</span>，都存在<span class="math inline">\(x_n\)</span>，使得<span class="math inline">\(||x_n||_b &gt; n||x_n||_a\)</span></p>
<p>那么，我们考虑序列<span class="math inline">\(x_n&#39; = x_n * ||x_n||_b^{-1}\)</span>，显然<span class="math inline">\(\lim_{n \to \infty} ||x_n&#39;||_b = 1\)</span></p>
<p>而<span class="math inline">\(||x_n&#39;||_a = ||x_n||_a *||x_n||_b^{-1} &lt; \frac{1}{n}\)</span>，因此<span class="math inline">\(\lim_{n \to \infty} ||x_n&#39;||_a = 0\)</span>，这与有相同的敛散性这一条件矛盾，矛盾的根源在于假设，因此命题是正确的</p></li>
</ul></li>
<li><p>有限维线性空间上的不同范数是等价的</p>
<ul>
<li><p>向量范数的等价关系有传递性，我们只需证明所有范数都与某种范数等价即可</p></li>
<li><p>首先，由于是有限维线性空间，我们取一组基底<span class="math inline">\(e_1, e_2, ..., e_n\)</span>，对于任意向量<span class="math inline">\(x\)</span>，如果<span class="math inline">\(x = \sum x_ie_i\)</span>，那么，对于向量范数<span class="math inline">\(||\cdot||_a\)</span>，定义<span class="math inline">\(f(x_1, x_2, ..., x_n) = ||x||_a\)</span>，不难证明<span class="math inline">\(f(x_1,x_2,...,x_n)\)</span>是一个连续函数</p>
<p>不妨设<span class="math inline">\(||x||_b\)</span>是另一种范数，我们考虑<span class="math inline">\(f(x_1,x_2,...,x_n)\)</span>在<span class="math inline">\(||x||_b = 1\)</span>上的分布情况，由<span class="math inline">\(f\)</span>的连续性可知它可以取到最大值<span class="math inline">\(M\)</span>和最小值<span class="math inline">\(m\)</span></p>
<p>而对于<span class="math inline">\(||x||_b = k(k \neq 0)\)</span>的一般情况，我们有<span class="math inline">\(m \leq ||x * k^{-1}||_a \leq M\)</span>，即<span class="math inline">\(m||x||_b \leq ||x||_a \leq M ||x||_b\)</span></p></li>
</ul></li>
</ul>
<h3 id="矩阵范数">矩阵范数</h3>
<h4 id="矩阵范数-1">矩阵范数</h4>
<ul>
<li><p>定义：对于矩阵<span class="math inline">\(A\)</span>，如果存在实值函数<span class="math inline">\(||A||\)</span>，满足</p>
<ul>
<li>非负性：<span class="math inline">\(||A|| \geq 0\)</span>，当且仅当<span class="math inline">\(A = O\)</span>时取等</li>
<li>齐次性：<span class="math inline">\(||kA|| = k||A||\)</span></li>
<li>三角不等式：<span class="math inline">\(||A+B|| \leq ||A|| + ||B||\)</span></li>
<li>相容性：<span class="math inline">\(||AB|| \leq ||A|| *||B||\)</span></li>
</ul>
<p>称该函数为<strong>矩阵范数</strong></p></li>
</ul>
<p>定义中的次乘性的一个感性理解是，当<span class="math inline">\(||A|| &lt; 1\)</span>时，将有<span class="math inline">\(\lim_{n \to \infty} ||A||^n = 0(n \to \infty)\)</span></p>
<ul>
<li><p>不难验证下列函数都是矩阵范数</p>
<p><span class="math display">\[||A||_{m_1} = \sum_{i, j} |a_{ij}|\]</span></p>
<p><span class="math display">\[||A||_{m_2} = n* \max_{i.j} |a_{i,j}|\]</span></p>
<p><span class="math display">\[||A||_F = (\sum_{i.j} |a_{ij}|^2)^{1/2}\]</span></p></li>
</ul>
<p>最后一种矩阵范数简称为F-范数，F-范数有不错的性质</p>
<ul>
<li>设<span class="math inline">\(U, V\)</span>为酉矩阵，那么<span class="math inline">\(||A||_F = ||UAV||_F\)</span>
<ul>
<li>注意到<span class="math inline">\(||A||_F = (tr(AA^H))^{1/2}\)</span>，<span class="math inline">\((UAV)(UAV)^H\)</span>和<span class="math inline">\(AA^H\)</span>相似</li>
</ul></li>
<li>矩阵范数在有限维线性空间下也有等价性</li>
</ul>
<h4 id="算子范数">算子范数</h4>
<ul>
<li><p>定义：设<span class="math inline">\(||x||\)</span>是一个向量范数，那么，我们定义<span class="math inline">\(||A|| = \sup_{x \neq 0} \frac{||Ax||}{||x||} = \max_{x = 1} ||Ax||\)</span>为由向量范数<span class="math inline">\(||\cdot||\)</span>诱导出的算子范数</p>
<ul>
<li><p>由定义，算子范数满足<span class="math inline">\(||Ax|| \leq ||A|| *||x||\)</span>，此时，我们称矩阵范数<span class="math inline">\(||A||\)</span>和向量范数<span class="math inline">\(||x||\)</span>相容</p></li>
<li><p>算子范数是一种矩阵范数</p>
<ul>
<li>非负性，齐次性，三角不等式都可以转化为向量范数来证明</li>
<li>对于次乘性，设<span class="math inline">\(x_0\)</span>是在<span class="math inline">\(||x|| = 1\)</span>中，使得<span class="math inline">\(||ABx||\)</span>取到最大值的<span class="math inline">\(x\)</span>，那么<span class="math inline">\(||AB|| = ||ABx_0|| \leq ||A||*||Bx_0|| \leq ||A||*||B||\)</span>，其中的不等式利用的是算子范数的性质</li>
</ul></li>
<li><p><span class="math inline">\(||I||=1\)</span>对任何算子范数成立</p></li>
</ul></li>
<li><p>我们给出几个特例的算子范数</p>
<p>对应于向量范数<span class="math inline">\(||x||_1, ||x||_2, ||x||_{\infty}\)</span>的算子范数分别为</p>
<p><span class="math display">\[||A||_1 = \max_{j} \sum_{i=1}^m |a_{ij}|\]</span></p>
<p><span class="math display">\[||A||_2 = \sigma_{max} = \sqrt {\lambda_{max} }\]</span></p>
<p>上式中<span class="math inline">\(\lambda_{max}\)</span>表示矩阵<span class="math inline">\(AA^H\)</span>的最大特征值</p>
<p><span class="math display">\[||A||_{\infty} =\max_{i} \sum_{j=1}^n |a_{ij}|\]</span></p>
<p>它们分别被称作列范数，谱范数，行范数</p>
<ul>
<li><p>列范数和行范数不难证明，我们对谱范数稍作解释</p>
<p>对<span class="math inline">\(||x||=1\)</span>，不难得到<span class="math inline">\(||Ax||^2_2 = (Ax)^HAx = x^H A^HAx\)</span></p>
<p>设<span class="math inline">\(A^HA\)</span>的谱分解为<span class="math inline">\(\sum \lambda_i x_i^Hx_i\)</span>，其中<span class="math inline">\(\lambda_1 \geq ... \geq \lambda_m\)</span>，并设<span class="math inline">\(x = \sum a_ix_i\)</span></p>
<p>那么<span class="math inline">\(x^HA^HAx = \sum \lambda_i |a_i|^2 \leq \lambda_1\)</span>，当<span class="math inline">\(a_1 = 1\)</span>时可以取到等号</p></li>
</ul></li>
</ul>
<h3 id="谱范数">谱范数</h3>
<h4 id="性质">性质</h4>
<p>谱范数和F-范数一样，有比较好的性质</p>
<ul>
<li><p>设<span class="math inline">\(U, V\)</span>为酉矩阵，那么<span class="math inline">\(||A||_2 = ||UAV||_2\)</span></p>
<ul>
<li>证明：<span class="math inline">\(AA^H\)</span>和<span class="math inline">\((UAV)(UVA)^H\)</span>相似</li>
</ul></li>
<li><p><span class="math inline">\(||A||_2 = ||A^H||_2\)</span></p>
<ul>
<li><span class="math inline">\(AA^H\)</span>和<span class="math inline">\(A^HA\)</span>有相同的非零特征值</li>
</ul></li>
<li><p><span class="math inline">\(||A||_2 = \max_{||x||_2 = 1, ||y||_2=1} |y^HAx|\)</span></p>
<ul>
<li><p><span class="math inline">\(|y^HAx| \leq ||y^H||_2 * ||A||_2*||x||_2 \leq ||A||_2\)</span></p>
<p>存在<span class="math inline">\(x_0\)</span>满足条件，并且使得<span class="math inline">\(||Ax_0||_2 = ||A||_2\)</span>，此时，取<span class="math inline">\(y_0 = Ax_0 * ||Ax_0||^{-1}\)</span>可以取得等号</p></li>
</ul></li>
<li><p><span class="math inline">\(||A^HA||_2 = ||A||_2^2\)</span></p>
<ul>
<li><p><span class="math inline">\(||A^HA||_2 \leq ||A^H||_2 * ||A||_2 = ||A||_2^2\)</span></p>
<p><span class="math inline">\(||A^HA||_2 = \max |y^HA^HAx| \geq \max |x^HA^HAx|\)</span></p></li>
</ul></li>
</ul>
<h4 id="谱半径">谱半径</h4>
<ul>
<li>定义：设<span class="math inline">\(A\)</span>的特征值为<span class="math inline">\(\lambda_1, ..., \lambda_n\)</span>，那么称<span class="math inline">\(\rho(A) = \max_{i} |\lambda_i|\)</span>，称为<span class="math inline">\(A\)</span>的<strong>谱半径</strong></li>
</ul>
<p>谱半径有非常良好的性质</p>
<ul>
<li><span class="math inline">\(\rho(A) \leq ||A||\)</span>，谱半径不会超过<span class="math inline">\(A\)</span>的<strong>任何</strong>一种范数</li>
</ul>
<p>为了证明这个定理，我们需要一个引理 `</p>
<ul>
<li><p>引理：对于任何一种矩阵范数<span class="math inline">\(||\cdot||_A\)</span>，存在与其相容的向量范数<span class="math inline">\(||\cdot||_v\)</span></p>
<ul>
<li><p>任取<span class="math inline">\(y \neq 0, y \in V\)</span>，那么定义<span class="math inline">\(||x||_v = ||xy^H||_A\)</span></p>
<p>容易验证这是一个向量范数，我们来考虑相容性</p>
<p><span class="math inline">\(||M||_A * ||x||_v = ||M||_A*||xy^H||_A \geq ||Mxy^H||_A = ||Mx||_v\)</span></p></li>
</ul></li>
</ul>
<p>现在让我们回到定理的证明，设<span class="math inline">\(\lambda\)</span>为其特征值，<span class="math inline">\(x\)</span>为其对应的特征向量，<span class="math inline">\(||\cdot||_v\)</span>取与其相容的向量范数，那么<span class="math inline">\(|\lambda|*||x||_v = ||\lambda x||_v = ||Ax||_v \leq ||A|| * ||x||_v\)</span>，于是<span class="math inline">\(|\lambda| \leq ||A||\)</span></p>
<ul>
<li>如果<span class="math inline">\(A\)</span>的正规矩阵，那么<span class="math inline">\(\rho(A) = ||A||_2\)</span></li>
</ul>
<p>即证<span class="math inline">\(A\)</span>的特征值的模的最大值等于<span class="math inline">\(A\)</span>的最大奇异值，这个由特征值的模与奇异值之间的对应关系可以得到</p>
<ul>
<li><span class="math inline">\(||A||_2 = \sqrt {\rho(AA^H)}\)</span></li>
</ul>
<p>这个是显然的</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>matrix_analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵分析 3</title>
    <url>/2021/07/28/matrix-analysis-3/</url>
    <content><![CDATA[<span id="more"></span>
<p>这一章的内容十分的有趣</p>
<h4 id="三角分解">三角分解</h4>
<p>我们先对三角分解作一个简单的定义</p>
<ul>
<li>如果矩阵<span class="math inline">\(A\)</span>可以表示为一个上三角矩阵<span class="math inline">\(L\)</span>和一个下三角矩阵<span class="math inline">\(U\)</span>的乘积，即<span class="math inline">\(A = LU\)</span>，那么这种乘积称为<span class="math inline">\(A\)</span>的<strong>三角分解</strong>或<strong><span class="math inline">\(LU\)</span>分解</strong>，特别的，如果<span class="math inline">\(L\)</span>是单位下三角矩阵（主对角线上的元素为<span class="math inline">\(1\)</span>），那么此时的三角分解称为<strong>Doolittle分解</strong>，如果<span class="math inline">\(U\)</span>是单位上三角矩阵，那么称为<strong>Crout分解</strong></li>
</ul>
<p>在讨论三角分解的存在性之前，我们先对唯一性来作一些描述</p>
<p>如果<span class="math inline">\(A = LU\)</span>，并且<span class="math inline">\(L, U\)</span>都不是单位三角矩阵，那么对于任意<span class="math inline">\(k \neq 0\)</span>，<span class="math inline">\(A = (kL)(k^{-1}U)\)</span>将是另一种分解方式，而加入了单位三角矩阵的限制后，我们就有了下述结论</p>
<ul>
<li><p>对于方阵<span class="math inline">\(A\)</span>，其可以唯一地分解为</p>
<p><span class="math display">\[A = LDU\]</span></p>
<p>的充要条件为<span class="math inline">\(A\)</span>的前<span class="math inline">\(n - 1\)</span>个顺序主子式<span class="math inline">\(H_1,H_2,...,H_{n-1}\)</span>都不为<span class="math inline">\(0\)</span>，式中<span class="math inline">\(L, U\)</span>分别为单位下三角矩阵，单位上三角矩阵，<span class="math inline">\(D\)</span>为对角矩阵，并且设<span class="math inline">\(D = diag\{d_1,d_2,...,d_n\}\)</span>，则<span class="math inline">\(d_1 = 1, d_i = H_i/H_{i-1}\)</span></p>
<ul>
<li>这个定理的证明按照大小进行归纳即可</li>
</ul></li>
<li><p>由于<span class="math inline">\(LDU\)</span>分解是唯一的，因此Doolittle分解和Crout分解也都是唯一的</p></li>
</ul>
<p>我们还可以讨论特殊矩阵的<span class="math inline">\(LDU\)</span>分解</p>
<ul>
<li><p>对于对称正定矩阵<span class="math inline">\(A\)</span>，存在一个实的可逆下三角矩阵<span class="math inline">\(L\)</span>，使得</p>
<p><span class="math display">\[A = LL^T\]</span></p>
<p>在限定<span class="math inline">\(L\)</span>的对角线元素为正时，<span class="math inline">\(L\)</span>是唯一的</p>
<ul>
<li><p>存在性：由于<span class="math inline">\(A\)</span>的顺序主子式都大于<span class="math inline">\(0\)</span>，因此<span class="math inline">\(A\)</span>存在<span class="math inline">\(LDU\)</span>分解，不妨设<span class="math inline">\(A = LDU\)</span></p>
<p>由于<span class="math inline">\(A = A^T\)</span>，那么<span class="math inline">\(LDU = U^TDL^T\)</span>，由<span class="math inline">\(LDU\)</span>分解的唯一性，我们得到<span class="math inline">\(U^T = L\)</span></p>
<p>即<span class="math inline">\(A = LDL^T\)</span>，由于<span class="math inline">\(|A| \neq 0\)</span>，因此<span class="math inline">\(L, D\)</span>都可逆，那么<span class="math inline">\(D = L^{-1}A(L^{-1})^T\)</span>，如此，<span class="math inline">\(D\)</span>也是正定矩阵，因此<span class="math inline">\(D\)</span>中元素都将大于<span class="math inline">\(0\)</span>，设<span class="math inline">\(D = diag(d_1, d_2, ..., d_n)\)</span>，再设<span class="math inline">\(D&#39; = diag(\sqrt d_1, \sqrt d_2, ..., \sqrt d_n)\)</span>，那么<span class="math inline">\(A = (LD&#39;)(LD&#39;)^T\)</span>，由<span class="math inline">\(|LD&#39;| = |L||D&#39;| \neq 0\)</span>知<span class="math inline">\(LD&#39;\)</span>可逆</p></li>
<li><p>唯一性：设<span class="math inline">\(A = L_1L_1^T = L_2L_2^T\)</span>，则<span class="math inline">\((L_2^{-1}L_1) = (L_2^{-1}L_1)^T\)</span>，<span class="math inline">\(L_2^{-1}L_1\)</span>是上三角矩阵，因此<span class="math inline">\(L_2^{-1}L_1 = I\)</span>，即<span class="math inline">\(L_1 = L_2\)</span></p></li>
</ul></li>
</ul>
<h4 id="qr分解"><span class="math inline">\(QR\)</span>分解</h4>
<ul>
<li><p>如果实（复）非奇异矩阵<span class="math inline">\(A\)</span>能表示为一个正交（酉）矩阵<span class="math inline">\(Q\)</span>和一个实（复）非奇异上三角矩阵<span class="math inline">\(R\)</span>的乘积，那么</p>
<p><span class="math display">\[A = QR\]</span></p>
<p>就称为<span class="math inline">\(A\)</span>的<span class="math inline">\(QR\)</span>分解</p></li>
<li><p>任何非奇异矩阵<span class="math inline">\(A\)</span>都存在<span class="math inline">\(QR\)</span>分解，并且除了对角线上的元素差一个绝对值为<span class="math inline">\(1\)</span>的因子外，<span class="math inline">\(QR\)</span>分解是唯一的</p>
<ul>
<li><p>存在性：设<span class="math inline">\(A\)</span>的列向量为<span class="math inline">\((a_1, a_2, ..., a_n)\)</span>，其可以构成一组基，我们对这组基进行Schmidt正交化，得到一组标准正交基<span class="math inline">\((b_1, b_2, ..., b_n)\)</span></p>
<p>那么，由Schmidt正交化的公式<span class="math inline">\(b_i&#39; = a_i - \sum_{j &lt; i} b_j&#39; * \frac{(a_i, b_j)}{(b_j, b_j)}\)</span>，标准化之后乘一个非零常数，应该存在<span class="math inline">\(R\)</span>为非奇异上三角矩阵，使得<span class="math inline">\((b_1, b_2, ..., b_n) = (a_1, a_2, ..., a_n) R\)</span></p>
<p>由于<span class="math inline">\(R\)</span>可逆，那么<span class="math inline">\((a_1, a_2, ..., a_n) = (b_1,b_2,...,b_n)R^{-1}\)</span>，取<span class="math inline">\(Q = (b_1,b_2,...,b_n)\)</span>即可</p></li>
<li><p>唯一性：设<span class="math inline">\(A = Q_1R_1 = Q_2R_2\)</span>，那么<span class="math inline">\(Q_2^{-1}Q_1 = R_2R_1^{-1}\)</span>，<span class="math inline">\(Q_2^{-1}Q_1\)</span>为正交阵，<span class="math inline">\(R_2R_1^{-1}\)</span>为上三角阵，不难知道，<span class="math inline">\(Q_2^{-1}Q_1 = R_2R_1^{-1} = I\)</span>，即<span class="math inline">\(Q_1 = Q_2\)</span></p></li>
</ul></li>
</ul>
<h4 id="谱分解">谱分解</h4>
<h5 id="正规矩阵">正规矩阵</h5>
<ul>
<li>如果<span class="math inline">\(AA^H = A^HA\)</span>，则称<span class="math inline">\(A\)</span>为<strong>正规矩阵</strong></li>
<li>如果对实方阵<span class="math inline">\(A\)</span>，<span class="math inline">\(AA^T=A^TA\)</span>，则称<span class="math inline">\(A\)</span>为<strong>实正规矩阵</strong></li>
</ul>
<p>正规矩阵有一些较为简单的性质</p>
<ul>
<li><p>如果三角阵<span class="math inline">\(L\)</span>是正规矩阵，那么<span class="math inline">\(L\)</span>是对角阵</p>
<ul>
<li><p>由<span class="math inline">\(LL^H = LL^H\)</span>，我们有<span class="math inline">\(\sum_{k} \overline{l_{ki}} * l_{kj} = \sum_{k} \overline{l_{jk}} * l_{ik}\)</span>，而当<span class="math inline">\(i = j\)</span>时，有<span class="math inline">\(\sum_k |l_{ki}|^2 = \sum_k |l_{ik}|^2\)</span></p>
<p>不妨设<span class="math inline">\(L\)</span>是下三角阵，由于<span class="math inline">\(\sum_k |l_{k1}|^2 = \sum_k |l_{1k}|^2 = |l_{11}|^2\)</span>，我们得到<span class="math inline">\(l_{21} = l_{31} = ... = l_{n1} = 0\)</span>，之后对<span class="math inline">\(i = j = 2\)</span>进行讨论，得到<span class="math inline">\(l_{32} = ... = l_{n2} = 0\)</span>，依次类推，我们可以得到<span class="math inline">\(L\)</span>只在对角线上非零，即<span class="math inline">\(L\)</span>为对角阵</p></li>
</ul></li>
</ul>
<p>埃米尔特矩阵和酉矩阵都是正规矩阵，尝试将埃米尔特矩阵和酉矩阵的性质推导到正规矩阵上，一般来说，我们有下述定理</p>
<ul>
<li><p>方阵<span class="math inline">\(A\)</span>酉相似于对角阵的充要条件为<span class="math inline">\(A\)</span>是正规矩阵</p>
<p>考虑这个定理的证明</p>
<ul>
<li>充分性：根据Schur定理，存在酉矩阵<span class="math inline">\(U\)</span>，使得<span class="math inline">\(A = U^HLU\)</span>，其中<span class="math inline">\(L\)</span>为上三角阵，并且对角线上为<span class="math inline">\(A\)</span>的特征值，那么由<span class="math inline">\(A^HA= AA^H\)</span>，得到<span class="math inline">\(L^HL = LL^H\)</span>，由于<span class="math inline">\(L\)</span>同时是三角阵和正规阵，那么<span class="math inline">\(L\)</span>将是对角阵，因而<span class="math inline">\(A\)</span>与对角阵<span class="math inline">\(L\)</span>酉相似</li>
<li>必要性：设<span class="math inline">\(A = U^H \Lambda U\)</span>，其中<span class="math inline">\(\Lambda\)</span>为对角阵，那么<span class="math inline">\(AA^H = U^H \Lambda \Lambda^H U = U^H \Lambda^H \Lambda U = A^HA\)</span></li>
</ul></li>
</ul>
<p>如果<span class="math inline">\(A\)</span>酉相似于对角阵，即<span class="math inline">\(A = U^H \Lambda U\)</span>，那么矩阵<span class="math inline">\(U\)</span>可以看做是<span class="math inline">\(A\)</span>的特征向量的集合，而<span class="math inline">\(\Lambda\)</span>则为<span class="math inline">\(A\)</span>对应的特征值，因此<span class="math inline">\(A\)</span>将有<span class="math inline">\(n\)</span>个互相正交的单位特征向量</p>
<h5 id="谱分解-1">谱分解</h5>
<ul>
<li><p>对于正规矩阵<span class="math inline">\(A\)</span>，存在酉矩阵<span class="math inline">\(U\)</span>，使得<span class="math inline">\(A = U^H \Lambda U\)</span></p>
<p>记<span class="math inline">\(U = (u_1, u_2, ..., u_n)\)</span>，那么</p>
<p><span class="math display">\[\begin{align*}
 A &amp;= (u_1, u_2, ..., u_n)^H *diag(\lambda_1, \lambda_2,..., \lambda_n)* (u_1, u_2, ..., u_n)\\ 
 &amp;= \lambda_1 u_1^Hu_1 + \lambda_2 u_2^Hu_2 + ... + \lambda_nu_n^Hu_n
\end{align*}\]</span></p>
<p>我们称此为<span class="math inline">\(A\)</span>的谱分解或者特征值分解</p></li>
<li><p>如果我们将谱分解稍微改写形式<span class="math inline">\(A = \lambda_1(u_{11}^Hu_{11} + ...+u_{1s}^Hu_{1s}) + ... + \lambda_r(u_{r1}^Hu_{r1} + ...+u_{rs}^Hu_{rs})\)</span>，其中<span class="math inline">\(\lambda_i\)</span>互不相同</p>
<p>记<span class="math inline">\(P_1 = u_{11}^Hu_{11} + ...+u_{1s}^Hu_{1s}, ...,P_r = u_{r1}^Hu_{r1} + ...+u_{rs}^Hu_{rs}\)</span></p>
<p>由于<span class="math inline">\(u_{11}, ..., u_{1s}, ..., u_{r1}, ..., u_{rs}\)</span>两两正交，我们有<span class="math inline">\(P_iP_j = O, P_i^2 = P_i, P_i^H=P_i\)</span>，因此单独取出<span class="math inline">\(P_i\)</span>，其表示为一种正交投影</p></li>
</ul>
<h4 id="最大秩分解">最大秩分解</h4>
<ul>
<li><p>设<span class="math inline">\(A\)</span>是秩为<span class="math inline">\(r\)</span>的<span class="math inline">\(m * n\)</span>的矩阵，那么存在秩为<span class="math inline">\(r\)</span>的<span class="math inline">\(m * r\)</span>的矩阵<span class="math inline">\(B\)</span>以及<span class="math inline">\(r * n\)</span>的矩阵<span class="math inline">\(C\)</span>，使得</p>
<p><span class="math display">\[A = BC\]</span></p>
<p>也就是说，<span class="math inline">\(A\)</span>可以分解为两个满秩矩阵的积</p>
<ul>
<li><p>设<span class="math inline">\(A\)</span>的列向量为<span class="math inline">\(a_1, a_2, ...,a_n\)</span>，那么<span class="math inline">\(A = (a_1, a_2, ..., a_n)\)</span></p>
<p>不妨设列向量中的极大线性无关组为<span class="math inline">\((a_1, a_2, ..., a_r)\)</span>，由于<span class="math inline">\(a_1, a_2,..., a_n\)</span>中任意元素可以被<span class="math inline">\(a_1,...a_r\)</span>表出，不妨设<span class="math inline">\(a_i = \sum_{j=1}^r a_j c_{ji}\)</span></p>
<p>那么</p>
<p><span class="math display">\[A = (a_1, a_2,..., a_r) \begin{pmatrix} c_{11} &amp; c_{12} &amp; ... &amp; c_{1n} \\ c_{21} &amp; c_{22} &amp; ... &amp; c_{2n} \\ ... &amp;... &amp; ... &amp;... \\c_{r1} &amp; c_{r2} &amp; ... &amp; c_{rn}\end{pmatrix}\]</span></p>
<p>记</p>
<p><span class="math display">\[B = (a_1, a_2,..., a_r), C = \begin{pmatrix} c_{11} &amp; c_{12} &amp; ... &amp; c_{1n} \\ c_{21} &amp; c_{22} &amp; ... &amp; c_{2n} \\ ... &amp;... &amp; ... &amp;... \\c_{r1} &amp; c_{r2} &amp; ... &amp; c_{rn}\end{pmatrix}\]</span></p>
<p>由于<span class="math inline">\(r = rank(A) \leq \min\{rank(B), rank(C)\} \leq r\)</span>，因此两者秩都为<span class="math inline">\(r\)</span></p></li>
<li><p>注意到这个证明中，没有对所取的<span class="math inline">\(a_1,...,a_r\)</span>作任何的限制，因此，我们甚至可以限制<span class="math inline">\(a_1,...,a_r\)</span>为一组标准正交基</p></li>
</ul></li>
<li><p>example：</p>
<p>求</p>
<p><span class="math display">\[A = \begin{pmatrix} 1 &amp; 1 &amp; 1 &amp; 1 \\ 1 &amp; 1 &amp; 1 &amp; 0 \\ 1 &amp; 1 &amp; 0 &amp; 0 \\3 &amp; 3 &amp; 2 &amp; 1\end{pmatrix}\]</span></p>
<p>的最大秩分解</p>
<p>我们可以利用初等行变化保持线性关系的性质</p>
<p>将<span class="math inline">\(A\)</span>化作行标准形</p>
<p><span class="math display">\[A&#39; = \begin{pmatrix} 1 &amp; 1 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1 \\0 &amp; 0 &amp; 0 &amp; 0\end{pmatrix}\]</span></p>
<p>取<span class="math inline">\(1, 3, 4\)</span>列的列向量作为极大线性无关组，即</p>
<p><span class="math display">\[B = \begin{pmatrix} 1 &amp; 1 &amp; 1 \\ 1 &amp; 1 &amp; 0 \\ 1 &amp; 0 &amp; 0  \\3 &amp; 2 &amp; 1\end{pmatrix}\]</span></p>
<p>再取<span class="math inline">\(A&#39;\)</span>中的非零行（也即组合系数），令</p>
<p><span class="math display">\[C = \begin{pmatrix} 1 &amp; 1 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1\end{pmatrix}\]</span></p>
<p>那么<span class="math inline">\(A = BC\)</span>，且<span class="math inline">\(B, C\)</span>满秩</p></li>
</ul>
<h4 id="奇异值分解">奇异值分解</h4>
<p>矩阵的奇异值分解又称<strong>SVD(Singular Value Decomposition)分解</strong></p>
<h5 id="奇异值">奇异值</h5>
<ul>
<li><p>引理：矩阵<span class="math inline">\(AA^H\)</span>的特征值为非负实数</p>
<ul>
<li>矩阵<span class="math inline">\(AA^H\)</span>半正定，并且为埃尔米特矩阵，因此其特征值为非负实数</li>
</ul></li>
<li><p>对于矩阵<span class="math inline">\(A\)</span>，我们记<span class="math inline">\(AA^H\)</span>的特征值为<span class="math inline">\(\lambda_1, \lambda_2,...,\lambda_n\)</span>，我们称<span class="math inline">\(\sigma_i = \sqrt \lambda_{i}\)</span>为矩阵<span class="math inline">\(A\)</span>的奇异值</p></li>
<li><p>若<span class="math inline">\(A\)</span>与<span class="math inline">\(B\)</span>酉相抵（存在酉矩阵<span class="math inline">\(U, V\)</span>，使得<span class="math inline">\(B = UAV\)</span>），则<span class="math inline">\(A\)</span>与<span class="math inline">\(B\)</span>有相同的奇异值</p>
<ul>
<li><span class="math inline">\(B^HB = V^HA^HU^HUAV=V^H(A^HA)V = V^{-1}(A^HA)V\)</span>，那么<span class="math inline">\(B^HB\)</span>与<span class="math inline">\(A^HA\)</span>有相同的特征值，因此<span class="math inline">\(A\)</span>与<span class="math inline">\(B\)</span>有相同的奇异值</li>
</ul></li>
</ul>
<h5 id="奇异值分解-1">奇异值分解</h5>
<ul>
<li><p>对于任意<span class="math inline">\(n*m\)</span>大小的复矩阵<span class="math inline">\(A\)</span>，存在酉矩阵<span class="math inline">\(U, V\)</span>，使得</p>
<p><span class="math display">\[U^HAV = diag(\sigma_1, \sigma_2, ..., \sigma_r, 0, ..., 0)\]</span></p>
<p>其中<span class="math inline">\(\sigma_1, \sigma_2, ..., \sigma_r\)</span>为<span class="math inline">\(A\)</span>的非零奇异值</p>
<ul>
<li><p>下面的证明不仅给出了证明方法，而且还给出了构造的具体方法</p></li>
<li><p>由于<span class="math inline">\(AA^H\)</span>为埃尔米特矩阵，并且半正定，因此存在酉矩阵<span class="math inline">\(U\)</span>，使得</p>
<p><span class="math display">\[U^HAA^HU = diag(\sigma_1^2, \sigma_2^2, ..., \sigma_r^2, 0, ..., 0) \tag{a}\]</span></p>
<p>如果记<span class="math inline">\(U = (U_1, U_2)\)</span>，其中<span class="math inline">\(U_1\)</span>为<span class="math inline">\(U\)</span>的前<span class="math inline">\(r\)</span>个列向量构成的矩阵，那么我们可以得到<span class="math display">\[U_1^HAA^HU_1 = \Lambda^2 \tag{b}\]</span></p>
<p><span class="math display">\[U_2^HAA^HU_2 = O \tag{c}\]</span></p>
<p>由于<span class="math inline">\(AA^H = O\)</span>，当且仅当<span class="math inline">\(A = O\)</span>（考察对角线上的元素），因此<span class="math inline">\(U_2^HA = O\)</span></p>
<p>现在我们尝试构造<span class="math inline">\(V = (V_1, V_2)\)</span>，其中<span class="math inline">\(V_1\)</span>为<span class="math inline">\(n * r\)</span>的矩阵，使得<span class="math inline">\(U^HAV = \Lambda\)</span></p>
<p>不难知道</p>
<p><span class="math display">\[(U_1, U_2)^H A (V_1, V_2) = \begin{pmatrix} U_1^HAV_1 &amp; U_1^HAV_2\\ U_2^HAV_1 &amp; U_2^HAV_2 \end{pmatrix}\]</span></p>
<p>与<span class="math inline">\(\begin{pmatrix} \Lambda &amp; O\\ O &amp; O \end{pmatrix}\)</span>对比，我们得到<span class="math inline">\(U_1^HAV_1 = \Lambda, U_1^HAV_2 = U_2^HAV_1 =U_2^HAV_2=O\)</span></p>
<p>由于<span class="math inline">\(U_2^HA=O\)</span>，后面两项的成立是显然的，观察<span class="math inline">\((b)\)</span>式，我们知道取<span class="math inline">\(V_1 = A^HU_1 \Lambda^{-1}\)</span>可以满足要求，暂定<span class="math inline">\(V_1\)</span>，从而<span class="math inline">\(U_1^HAV_2 = \Lambda^{H} V_1^HV_2\)</span>，只需要取<span class="math inline">\(V_2\)</span>时，保证其与<span class="math inline">\(V_1\)</span>正交即可，这个当然是可以满足的</p>
<p>我们还需要确定<span class="math inline">\(V_1\)</span>满足酉矩阵的要求，代入<span class="math inline">\(V_1\)</span>，我们得到<span class="math inline">\(V_1^HV_1=(\Lambda^{-1})^H(U_1^HA A^HU_1)\Lambda^{-1} = \Lambda^{-1}\Lambda^2\Lambda^{-1} = I\)</span>，这也就证明了<span class="math inline">\(V_1\)</span>确实满足条件</p></li>
</ul></li>
</ul>
<h4 id="极分解">极分解</h4>
<ul>
<li><p>对于任意<span class="math inline">\(n*n\)</span>的复阵<span class="math inline">\(A\)</span>，存在酉矩阵<span class="math inline">\(U\)</span>和唯一的半正定矩阵<span class="math inline">\(G, H\)</span>，使得</p>
<p><span class="math display">\[A = GU = UH\]</span></p>
<ul>
<li><p>存在性：设<span class="math inline">\(A\)</span>的奇异值分解为<span class="math inline">\(A = U^H_0 \Lambda V\)</span></p>
<p>那么令<span class="math inline">\(G = U^H_0 \Lambda U, H = V^H \Lambda V, U_1 = U^H_0V\)</span>，得到<span class="math inline">\(A = GU_1 = U_1H\)</span></p></li>
<li><p>唯一性：由于<span class="math inline">\(U\)</span>可逆，唯一性显然</p></li>
</ul></li>
</ul>
<h4 id="可同时对角化">可同时对角化</h4>
<p>这个知识点感觉还是点一点...</p>
<p>一般在高等代数中，就会接触到一个结论</p>
<ul>
<li><p>设<span class="math inline">\(A, B\)</span>都是<span class="math inline">\(n\)</span>阶埃米尔特矩阵，且<span class="math inline">\(A\)</span>正定，那么存在非奇异矩阵<span class="math inline">\(Q\)</span>，使得</p>
<p><span class="math display">\[Q^{H}AQ = I, Q^HBQ= diag\{\lambda_1, \lambda_2, ...\lambda_n\}\]</span></p>
<ul>
<li><p>一般采取如下方式证明：由于<span class="math inline">\(A\)</span>正定，因此存在非奇异矩阵<span class="math inline">\(P\)</span>，使得<span class="math inline">\(P^HAP = I\)</span>，由于<span class="math inline">\(P^HBP\)</span>仍为埃尔米特矩阵，因此存在酉矩阵<span class="math inline">\(U\)</span>，使得<span class="math inline">\((PU)^H B (PU) = diag\{\lambda_1, ..., \lambda_n\}\)</span>，令<span class="math inline">\(Q = PU\)</span>即可</p></li>
<li><p>我们尝试考察<span class="math inline">\(\lambda_1,...,\lambda_n\)</span>的值，首先，它们是<span class="math inline">\(P^HBP\)</span>的特征值</p>
<p>注意到<span class="math inline">\(|\lambda I - P^HBP| = |\lambda P^HAP - P^HBP| = |P^H||P||A|*|\lambda I - A^{-1}B|\)</span></p>
<p>由于<span class="math inline">\(|P| \neq 0, |A| \neq 0\)</span>，因此<span class="math inline">\(\lambda_1, ... \lambda_n\)</span>也是<span class="math inline">\(A^{-1}B\)</span>的特征追</p></li>
</ul></li>
</ul>
<p>现在我们来考虑同时酉对角化的问题，也即</p>
<ul>
<li><p>设<span class="math inline">\(A, B\)</span>为正规矩阵，则<span class="math inline">\(A, B\)</span>可同时酉对角化的充要条件为<span class="math inline">\(AB = BA\)</span></p>
<ul>
<li><p>“<span class="math inline">\(\Rightarrow\)</span>”：设<span class="math inline">\(A = U^H \Lambda_1 U, B = U^H \Lambda_2 U\)</span>，则<span class="math inline">\(AB = BA\)</span>可以由<span class="math inline">\(\Lambda_1, \Lambda_2\)</span>的可交换性得出</p></li>
<li><p>“<span class="math inline">\(\Leftarrow\)</span>”：设<span class="math inline">\(A\)</span>对应于特征值<span class="math inline">\(a\)</span>的特征子空间为<span class="math inline">\(V_a\)</span>，取<span class="math inline">\(V_a\)</span>的一组标准正交基为<span class="math inline">\(a_1, a_2,...,a_r\)</span></p>
<p>注意到<span class="math inline">\(AB a_i = BAa_i = Baa_i = a (Ba_i)\)</span>，这说明<span class="math inline">\(Ba_1, Ba_2,...,Ba_r\)</span>也是<span class="math inline">\(V_a\)</span>中的元素，也说明<span class="math inline">\(BV_a \subseteq V_a\)</span></p>
<p>设从<span class="math inline">\(C^n\)</span>到<span class="math inline">\(V_a\)</span>的投影变换为<span class="math inline">\(P_a\)</span>，考虑线性映射<span class="math inline">\(B_a = P_aBP_a\)</span>，由于<span class="math inline">\(P_aV_a = V_a\)</span>，因此<span class="math inline">\(B_aV_a \subseteq V_a\)</span>，注意到<span class="math inline">\(B_aB_a^H = P_aBB^HP_a = P_aB^HBP_a = B_a^HB_a\)</span>，那么<span class="math inline">\(B_a\)</span>在<span class="math inline">\(V_a\)</span>上是一个正规变换，也就相应的对应于正规矩阵</p>
<p>设<span class="math inline">\(B_a\)</span>的线性无关的标准正交特征向量组为<span class="math inline">\(b_1,b_2,...,b_k\)</span>，由于<span class="math inline">\(b_i \in V_a\)</span>，因此<span class="math inline">\(b_i\)</span>是<span class="math inline">\(A\)</span>的一个特征向量，又<span class="math inline">\(B b_i = P_a B P_a b_i = B_ab_i\)</span>，这说明<span class="math inline">\(b_i\)</span>也是<span class="math inline">\(B\)</span>的一个特征向量</p>
<p>由于<span class="math inline">\(B_a\)</span>在<span class="math inline">\(V_a\)</span>上对应于正规矩阵，那么应该有<span class="math inline">\(k = r\)</span>，那么对于每个特征值，我们都能找到相应的公共特征向量，鉴于<span class="math inline">\(A\)</span>是正规矩阵，我们还可以把这些公共特征向量处理为正交的向量，因此得到两者可以同时酉对角化</p></li>
</ul></li>
<li><p>如果<span class="math inline">\(AB = BA\)</span>，且<span class="math inline">\(A, B\)</span>为正规矩阵，那么<span class="math inline">\(AB\)</span>也为正规矩阵</p>
<ul>
<li><span class="math inline">\(A, B\)</span>可同时酉对角化，设<span class="math inline">\(A = U^H \Lambda_1 U, B = U^H \Lambda_2 U\)</span>，那么<span class="math inline">\(AB = U^H \Lambda_1 \Lambda_2 U\)</span>，因此<span class="math inline">\(AB\)</span>酉相似于对角矩阵，如此<span class="math inline">\(AB\)</span>为正规矩阵</li>
<li>不难发现，<span class="math inline">\(AB\)</span>的特征值和<span class="math inline">\(A, B\)</span>的特征值之间存在关系，也即在按照同时酉对角化矩阵的顺序排列下时，有<span class="math inline">\(\lambda_{AB}^{(i)} = \lambda_{A}^{(i)} * \lambda_{B}^{(i)}\)</span>，且对应的特征向量也是相同的</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>matrix_analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客多校第五场</title>
    <url>/2021/08/03/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%94%E5%9C%BA/</url>
    <content><![CDATA[<span id="more"></span>
<p>Gromah的题...</p>
<p>有些科技还是太为难老年人了...</p>
<h4 id="c">C</h4>
<h5 id="题意">题意</h5>
<p>给定一个长为<span class="math inline">\(n\)</span>的串，表示两个人打乒乓球，连续打<span class="math inline">\(n\)</span>个球的结果</p>
<p>对于<span class="math inline">\(i\)</span>，我们定义<span class="math inline">\(i\)</span>赛制表示，双方中有一方得分超过<span class="math inline">\(i\)</span>分，并且分差大于等于<span class="math inline">\(2\)</span>时结果比赛的赛制</p>
<p>现在询问，对<span class="math inline">\(i = 1, 2, ..., n\)</span>，在<span class="math inline">\(i\)</span>赛制的情况下，Gromah赢了多少场</p>
<h5 id="题解">题解</h5>
<p>还挺有意思的</p>
<p>一个显然的性质是，在<span class="math inline">\(i\)</span>赛制下，比赛最多只有<span class="math inline">\(\lfloor \frac{n}{i} \rfloor\)</span>场</p>
<p>.....然后考场上就短路了...</p>
<p>我们可以预处理出<span class="math inline">\(A\)</span>赢了<span class="math inline">\(i\)</span>个球的位置和<span class="math inline">\(B\)</span>赢了<span class="math inline">\(i\)</span>个球的位置，依次，我们可以判断他们是否进入了平局的阶段，如果进入了平局的阶段，说明之后的比赛应该是两者一赢一输，这个段也可以预处理出来</p>
<p>然后就完事了</p>
<h4 id="e">E</h4>
<h5 id="吐槽">吐槽</h5>
<p>考场上写的脑子有点懵</p>
<p>C++的右移是坑爹的逻辑右移，对一个负数不断右移会得到一堆<span class="math inline">\(1\)</span>，在利用<span class="math inline">\(\sim\)</span>时被卡了记下...</p>
<h4 id="g">G</h4>
<h5 id="吐槽-1">吐槽</h5>
<p>奇奇怪怪题</p>
<h5 id="题意-1">题意</h5>
<p>给定<span class="math inline">\(a, b, \{p_i\}, \{q_i\}\)</span>，定义<span class="math inline">\(c = \prod p_i^{q_i}\)</span>，尝试找到<span class="math inline">\(x, y\)</span>，使得<span class="math inline">\(x + y\)</span>最小，并且<span class="math inline">\(lcm(a+x, b+y) = c\)</span></p>
<h5 id="题解-1">题解</h5>
<p>队友的做法我没听...好像是极限数据<span class="math inline">\(2^{27}\)</span>，但能卡卡的做法...（然后就WA了）</p>
<p>一个简单的想法是，枚举<span class="math inline">\(c\)</span>的约数<span class="math inline">\(d_1\)</span>，假设<span class="math inline">\(a + x = d_1\)</span>，<span class="math inline">\(d_1\)</span>也许会在若干质数上的次数没有卡到<span class="math inline">\(q_i\)</span>，这就需要<span class="math inline">\(b+y\)</span>去调整，也就是说相当于对于某个数<span class="math inline">\(M\)</span>，<span class="math inline">\(b+y\)</span>需要是<span class="math inline">\(M\)</span>的倍数，而系数则应该是剩下卡到<span class="math inline">\(q_i\)</span>的位置上质数次幂乘积的一个因子，难点在于如何寻找这个因子</p>
<p>利用折半搜索优化一下复杂度就能过了...</p>
]]></content>
      <categories>
        <category>problems</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客多校第二场</title>
    <url>/2021/07/26/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%8C%E5%9C%BA/</url>
    <content><![CDATA[<span id="more"></span>
<p>把一些没时间写的和没时间想的还有不会做的补一下...</p>
<h4 id="g">G</h4>
<h5 id="题意">题意</h5>
<p>给定<span class="math inline">\(n\)</span>个区间，将这些区间分为<span class="math inline">\(k\)</span>组，要求每组之间有交，使得每一组区间的交的和最大</p>
<h5 id="题解">题解</h5>
<p>对于一个确定的区间组而言，我们往其中添加一个区间，答案显然是不增的</p>
<p>特别的，如果这个区间组中存在着被其完全包含的区间，那么我们就可以无视这个区间</p>
<p>因此，对于包含其余区间的区间而言，要么我们选择无视它，要么选择将其单独归为一组</p>
<p>我们考虑去除这些区间后，剩下的区间，它们互相之间没有包含关系，也就是说，它们的右端点随左端点递增而递增</p>
<p>此时，将左端点相邻的区间分在一组是较为优秀的</p>
<p>设<span class="math inline">\(f_{i, j}\)</span>表示对于前<span class="math inline">\(i\)</span>个区间，分出了<span class="math inline">\(j\)</span>组的方案数，转移考虑最后一段区间即可，注意到合法的转移点是一段左端点不降的区间，可以用单调队列优化</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;bits/stdc++.h&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> <span class="kw">namespace</span> std<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#define rep</span><span class="op">(</span>io<span class="op">,</span><span class="pp"> </span>st<span class="op">,</span><span class="pp"> </span>ed<span class="op">)</span><span class="pp"> </span><span class="cf">for</span><span class="op">(</span><span class="dt">int</span><span class="pp"> </span>io<span class="pp"> </span><span class="op">=</span><span class="pp"> </span>st<span class="op">;</span><span class="pp"> </span>io<span class="pp"> </span><span class="op">&lt;=</span><span class="pp"> </span>ed<span class="op">;</span><span class="pp"> </span>io<span class="pp"> </span><span class="op">++)</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="dt">int</span> sid <span class="op">=</span> <span class="fl">5e3</span> <span class="op">+</span> <span class="dv">5</span><span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> n<span class="op">,</span> K<span class="op">;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> segment <span class="op">&#123;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> l<span class="op">,</span> r<span class="op">;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    segment<span class="op">()</span> <span class="op">&#123;&#125;</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    segment<span class="op">(</span><span class="dt">int</span> <span class="va">l_</span><span class="op">,</span> <span class="dt">int</span> <span class="va">r_</span><span class="op">)</span> <span class="op">:</span> l<span class="op">(</span><span class="va">l_</span><span class="op">),</span> r<span class="op">(</span><span class="va">r_</span><span class="op">)</span> <span class="op">&#123;&#125;</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">friend</span> <span class="dt">bool</span> <span class="kw">operator</span> <span class="op">&lt;</span> <span class="op">(</span>segment a<span class="op">,</span> segment b<span class="op">)</span> <span class="op">&#123;</span> </span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span>a<span class="op">.</span>l <span class="op">!=</span> b<span class="op">.</span>l<span class="op">)</span> <span class="cf">return</span> a<span class="op">.</span>l <span class="op">&lt;</span> b<span class="op">.</span>l<span class="op">;</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> a<span class="op">.</span>r <span class="op">&lt;</span> b<span class="op">.</span>r<span class="op">;</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span> p<span class="op">[</span>sid<span class="op">],</span> t<span class="op">[</span>sid<span class="op">];</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> tn<span class="op">,</span> vn<span class="op">;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> f<span class="op">[</span>sid<span class="op">][</span>sid<span class="op">],</span> v<span class="op">[</span>sid<span class="op">],</span> q<span class="op">[</span>sid<span class="op">];</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">&#123;</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>    cin <span class="op">&gt;&gt;</span> n <span class="op">&gt;&gt;</span> K<span class="op">;</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&lt;=</span> n<span class="op">;</span> i <span class="op">++)</span> cin <span class="op">&gt;&gt;</span> p<span class="op">[</span>i<span class="op">].</span>l <span class="op">&gt;&gt;</span> p<span class="op">[</span>i<span class="op">].</span>r<span class="op">;</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>    p<span class="op">[</span>n <span class="op">+</span> <span class="dv">1</span><span class="op">].</span>l <span class="op">=</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span> </span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>    sort<span class="op">(</span>p <span class="op">+</span> <span class="dv">1</span><span class="op">,</span> p <span class="op">+</span> n <span class="op">+</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">1</span><span class="op">,</span> j <span class="op">=</span> i<span class="op">;</span> i <span class="op">&lt;=</span> n<span class="op">;</span> i <span class="op">=</span> j<span class="op">)</span> <span class="op">&#123;</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span><span class="op">(</span>p<span class="op">[</span>j<span class="op">].</span>l <span class="op">==</span> p<span class="op">[</span>i<span class="op">].</span>l<span class="op">)</span> j <span class="op">++;</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>        p<span class="op">[++</span> tn<span class="op">]</span> <span class="op">=</span> p<span class="op">[</span>i<span class="op">];</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> k <span class="op">=</span> i <span class="op">+</span> <span class="dv">1</span><span class="op">;</span> k <span class="op">&lt;</span> j<span class="op">;</span> k <span class="op">++)</span> v<span class="op">[++</span> vn<span class="op">]</span> <span class="op">=</span> p<span class="op">[</span>k<span class="op">].</span>r <span class="op">-</span> p<span class="op">[</span>k<span class="op">].</span>l<span class="op">;</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> tmp <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&lt;=</span> tn<span class="op">;</span> i <span class="op">++)</span> <span class="op">&#123;</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>        <span class="dt">bool</span> flag <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> j <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> j <span class="op">&lt;=</span> tn<span class="op">;</span> j <span class="op">++)</span> </span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span><span class="op">(</span>i <span class="op">!=</span> j <span class="op">&amp;&amp;</span> p<span class="op">[</span>i<span class="op">].</span>l <span class="op">&lt;=</span> p<span class="op">[</span>j<span class="op">].</span>l <span class="op">&amp;&amp;</span> p<span class="op">[</span>j<span class="op">].</span>r <span class="op">&lt;=</span> p<span class="op">[</span>i<span class="op">].</span>r<span class="op">)</span></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>                flag <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(!</span>flag<span class="op">)</span> t<span class="op">[++</span> tmp<span class="op">]</span> <span class="op">=</span> p<span class="op">[</span>i<span class="op">];</span></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> v<span class="op">[++</span> vn<span class="op">]</span> <span class="op">=</span> p<span class="op">[</span>i<span class="op">].</span>r <span class="op">-</span> p<span class="op">[</span>i<span class="op">].</span>l<span class="op">;</span></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>    tn <span class="op">=</span> tmp<span class="op">;</span></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>    sort<span class="op">(</span>v <span class="op">+</span> <span class="dv">1</span><span class="op">,</span> v <span class="op">+</span> vn <span class="op">+</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>        </span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>    rep<span class="op">(</span>i<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> n<span class="op">)</span> rep<span class="op">(</span>k<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> K<span class="op">)</span> f<span class="op">[</span>i<span class="op">][</span>k<span class="op">]</span> <span class="op">=</span> <span class="op">(</span>i <span class="op">||</span> k<span class="op">)</span> <span class="op">?</span> <span class="op">-</span><span class="fl">1e9</span> <span class="op">:</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> k <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> k <span class="op">&lt;=</span> K<span class="op">;</span> k <span class="op">++)</span> <span class="op">&#123;</span></span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> fr <span class="op">=</span> <span class="dv">1</span><span class="op">,</span> to <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a>        q<span class="op">[++</span> to<span class="op">]</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&lt;=</span> tn<span class="op">;</span> i <span class="op">++)</span> <span class="op">&#123;</span></span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>            <span class="cf">while</span><span class="op">(</span>fr <span class="op">&lt;=</span> to <span class="op">&amp;&amp;</span> t<span class="op">[</span>q<span class="op">[</span>fr<span class="op">]</span> <span class="op">+</span> <span class="dv">1</span><span class="op">].</span>r <span class="op">&lt;=</span> t<span class="op">[</span>i<span class="op">].</span>l<span class="op">)</span> fr <span class="op">++;</span></span>
<span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#define pre </span>q<span class="op">[</span>fr<span class="op">]</span></span>
<span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span><span class="op">(</span>fr <span class="op">&lt;=</span> to<span class="op">)</span> f<span class="op">[</span>i<span class="op">][</span>k<span class="op">]</span> <span class="op">=</span> f<span class="op">[</span>pre<span class="op">][</span>k <span class="op">-</span> <span class="dv">1</span><span class="op">]</span> <span class="op">+</span> t<span class="op">[</span>pre <span class="op">+</span> <span class="dv">1</span><span class="op">].</span>r <span class="op">-</span> t<span class="op">[</span>i<span class="op">].</span>l<span class="op">;</span></span>
<span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>            <span class="cf">while</span><span class="op">(</span>fr <span class="op">&lt;=</span> to <span class="op">&amp;&amp;</span> f<span class="op">[</span>i<span class="op">][</span>k <span class="op">-</span> <span class="dv">1</span><span class="op">]</span> <span class="op">+</span> t<span class="op">[</span>i <span class="op">+</span> <span class="dv">1</span><span class="op">].</span>r <span class="op">&gt;=</span> f<span class="op">[</span>q<span class="op">[</span>to<span class="op">]][</span>k <span class="op">-</span> <span class="dv">1</span><span class="op">]</span> <span class="op">+</span> t<span class="op">[</span>q<span class="op">[</span>to<span class="op">]</span> <span class="op">+</span> <span class="dv">1</span><span class="op">].</span>r<span class="op">)</span> to <span class="op">--;</span></span>
<span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a>            q<span class="op">[++</span> to<span class="op">]</span> <span class="op">=</span> i<span class="op">;</span></span>
<span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span>
<span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> ans <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> suf <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> k <span class="op">=</span> K<span class="op">,</span> lst <span class="op">=</span> vn<span class="op">;</span> k <span class="op">&gt;=</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> <span class="op">(~</span>lst<span class="op">);</span> k <span class="op">--,</span> lst <span class="op">--)</span> <span class="op">&#123;</span></span>
<span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span>f<span class="op">[</span>tn<span class="op">][</span>k<span class="op">])</span> ans <span class="op">=</span> max<span class="op">(</span>ans<span class="op">,</span> f<span class="op">[</span>tn<span class="op">][</span>k<span class="op">]</span> <span class="op">+</span> suf<span class="op">);</span></span>
<span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a>        suf <span class="op">+=</span> v<span class="op">[</span>lst<span class="op">];</span></span>
<span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span>
<span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%d\n</span><span class="st">&quot;</span><span class="op">,</span> ans<span class="op">);</span></span>
<span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div>
<h4 id="j">J</h4>
<h5 id="题解-1">题解</h5>
<p>sb卡常出题人</p>
<h4 id="l">L</h4>
<h5 id="题意-1">题意</h5>
<p>给定<span class="math inline">\(n\)</span>个点，<span class="math inline">\(m\)</span>条边，每次操作为增加一个点的点权</p>
<p>对于每个点，询问有多少次操作后，这个点的点权比其所有相邻点多大</p>
<h5 id="题解-2">题解</h5>
<p>分块，设<span class="math inline">\(B = \sqrt m\)</span>，称<span class="math inline">\(\leq B\)</span>的点为小点，而<span class="math inline">\(&gt; B\)</span>的点为大点</p>
<p>对于小点而言，其邻点只有<span class="math inline">\(B\)</span>个，随意暴力</p>
<p>对于大点而言，其大点的邻居可以不用考虑</p>
<p>取大点为研究对象，考虑其小点邻居，我们直接分权值，存下其邻居中的小点冠军，当权值增加时，我们把相应的小点冠军给取消</p>
<p>这个题中可以利用权值比较小的条件，权值较大时离散化一下即可...</p>
<h4 id="a">A</h4>
<h5 id="题意-2">题意</h5>
<p>给定序列<span class="math inline">\(a_i\)</span>，求满足排序后是等差数列的子区间的数量</p>
<p><span class="math inline">\(1 \leq n \leq 10^5\)</span></p>
<h5 id="题解-3">题解</h5>
<p>这里有一个引理？</p>
<ul>
<li>对于序列<span class="math inline">\(b_i\)</span>，如果排序后为等差数列，那么公差<span class="math inline">\(d = gcd(b_2 - b_1, ..., b_n-b_{n-1})\)</span></li>
</ul>
<p>要证明这个引理，我们只需要考虑证明交换相邻两个数的位置不改变这个式子的值</p>
<p>Case1：我们交换了<span class="math inline">\(1, 2\)</span>，那么只需证明<span class="math inline">\(gcd(b_2-b_1, b_3-b_2) = gcd(b_2-b_1, b_3-b_1)\)</span>，由<span class="math inline">\(gcd(x, y) = gcd(x, x + y)\)</span>，这个是正确的，交换<span class="math inline">\(n, (n-1)\)</span>时同理</p>
<p>Case2：不妨假设我们交换了<span class="math inline">\(i, i + 1(i \neq 1, i+1 \neq n)\)</span>，那么我们只要证明<span class="math inline">\(gcd(b_{i+2}-b_{i+1}, b_{i+1}-b_i, b_i-b_{i-1}) = gcd(b_{i+2}-b_{i}, b_{i}-b_{i+1}, b_{i+1}-b_{i-1})\)</span>，这一点则由<span class="math inline">\(gcd(x, y, z) = gcd(x+y, y, z+y)\)</span>得出</p>
<p>我们只需要计数满足<span class="math inline">\(max - min = d*(r-l)\)</span>的区间个数即可</p>
<p>对<span class="math inline">\(r\)</span>进行扫描线，<span class="math inline">\(max\)</span>和<span class="math inline">\(min\)</span>的变化都只有<span class="math inline">\(O(n)\)</span>段，而每个<span class="math inline">\(l\)</span>而言，<span class="math inline">\(gcd(b_{l+1}-b_l, ..., b_r - b_{r-1})\)</span>至多改变<span class="math inline">\(\log\)</span>次，因此可以每次对<span class="math inline">\(l\)</span>进行逐个单点修改</p>
<p>注意到排序后满足<span class="math inline">\(gcd\)</span>为<span class="math inline">\(d\)</span>的<span class="math inline">\(max - min\)</span>极小的序列就是等差数列，因此我们有<span class="math inline">\(max - min \geq d * (r - l)\)</span>，即<span class="math inline">\(max - min + d * l \geq d * r\)</span>，而<span class="math inline">\(gcd\)</span>对同一个<span class="math inline">\(r\)</span>至多<span class="math inline">\(log\)</span>段，对于每一段维护最小值及个数即可</p>
<h4 id="e">E</h4>
<h5 id="题意-3">题意</h5>
<p>给定一棵树，经过边<span class="math inline">\(e\)</span>将花费<span class="math inline">\(w_e\)</span>升油，而到达<span class="math inline">\(i\)</span>号点将得到<span class="math inline">\(x_i\)</span>升油</p>
<p><span class="math inline">\(q\)</span>次询问，每次询问给定<span class="math inline">\(x, d, p\)</span>，表示从<span class="math inline">\(x\)</span>号点，初始有<span class="math inline">\(d\)</span>升油，不能经过<span class="math inline">\(p\)</span>号的情况下，有多少点是可达的</p>
<h5 id="吐槽">吐槽</h5>
<p>虽然思路很平凡，但是没人翻译，估计也没啥人愿意写...</p>
<h5 id="题解-4">题解</h5>
<p>点分治，之后我们可以强制<span class="math inline">\(x\)</span>走到根节点，往下走到其他点</p>
<p>对于每个点预处理出根节点走到它最少需要多少油，计算贡献时，去除<span class="math inline">\(p\)</span>及自己所在的子树，在<span class="math inline">\(dfn\)</span>序上将对应连续的三段，差分之后，扫描线维护树状数组即可</p>
<h4 id="b">B</h4>
<h5 id="题意-4">题意</h5>
<p>给定一个<span class="math inline">\(2\)</span>行的棋盘，第一行有<span class="math inline">\(a\)</span>个炮，第二行有<span class="math inline">\(b\)</span>个炮，对<span class="math inline">\(k = 0, 1, ..., a + b - 4\)</span>求发生<span class="math inline">\(k\)</span>个炮吃炮事件的方案数</p>
<p>特别的，你还需要输出第一行吃炮事件完全优先于第二行吃炮事件发生的方案数</p>
<h5 id="吐槽-1">吐槽</h5>
<p>感觉也就这样...</p>
<h5 id="题解-5">题解</h5>
<p>显而易见，一个含有<span class="math inline">\(x\)</span>枚棋子的行吃炮的方案数为<span class="math inline">\(2(x - 2)\)</span>，一个含有<span class="math inline">\(x\)</span>枚棋子的行吃<span class="math inline">\(m\)</span>个炮的方案数为<span class="math inline">\(2^m(x-2)(x-3)(x-m+1)=2^m (x-2)_{m}\)</span></p>
<p>一般的，输出$2^k _{i+j = k} (a-2)_i (b-2)_j  $；</p>
<p>对于特别的情况，输出<span class="math inline">\(2^k \sum_{i+j=k} (a-2)_i (b-2)_j\)</span></p>
<p>而<span class="math inline">\(2^k \sum_{i+j = k} (a-2)_i (b-2)_j C^i_k = 2^k k! \sum_{i+j = k} C^{a-2}_i C^{b-2}_j = 2^k k! C^{a+b-4}_k\)</span></p>
<p>且<span class="math inline">\(2^k \sum_{i+j=k} (a-2)_i (b-2)_j = 2^k \frac{(a-2)!(b-2)!}{(a+b-4-k)!}\sum_{i+j=k} C^{a+b-4-k}_{a-2-i}\)</span></p>
<p>后面是一个组合数列和，可以求</p>
]]></content>
      <categories>
        <category>problems</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>信息论</title>
    <url>/2021/08/20/information-theory/</url>
    <content><![CDATA[<span id="more"></span>
<p>临时补一下...</p>
<h2 id="information-theory">Information theory</h2>
<h3 id="entropy">Entropy</h3>
<p>对于离散型随机变量<span class="math inline">\(X\)</span>，出于方便，我们用<span class="math inline">\(|X|\)</span>来表示其样本空间的大小，那么，我们定义随机变量<span class="math inline">\(X\)</span>的熵（entropy）</p>
<p><span class="math display">\[\begin{align}H(X) = \sum_{x \in X} -p(x) \log p(x)  = \sum_{x \in X} p(x) \log \frac{1}{p(x)} \end{align}\]</span></p>
<p>（特别的，如果<span class="math inline">\(p(x) = 0\)</span>，认为<span class="math inline">\(p(x) \log \frac{1}{p(x)} = 0\)</span>）</p>
<p>熵有下列的性质</p>
<ul>
<li><p>如果<span class="math inline">\(X\)</span>均匀随机，那么<span class="math inline">\(H(X) = |X| * \frac{1}{|X|} * \log |X| = \log |X|\)</span></p></li>
<li><p><span class="math inline">\(0 \leq H(X) \leq \log |X|\)</span></p>
<ul>
<li><p>不等式左边成立当且仅当<span class="math inline">\(X\)</span>只在一个地方取得概率<span class="math inline">\(1\)</span>，其余地方取得概率<span class="math inline">\(0\)</span></p></li>
<li><p>不等式右边成立当且仅当<span class="math inline">\(X\)</span>​均匀分布</p></li>
<li><p>不等式的左边是显然的，右边则考虑函数<span class="math inline">\(x \log x\)</span>的凸性</p></li>
</ul></li>
</ul>
<p>对于服从二项分布的<span class="math inline">\(X\)</span>，有特殊的一种熵（Binary entropy function）</p>
<p><span class="math display">\[\begin{align}H(p) = H(X) = p \log \frac{1}{p}  + (1-p) \log \frac{1}{1-p} \end{align}\]</span></p>
<p>熵的定义只依赖于概率分布，只要确定了概率分布，我们就可以定义出熵，因此，在二元情况下，我们可以定义</p>
<p><span class="math display">\[\begin{align}H(X, Y) = \sum_{x \in X, y \in Y} p(x, y) \log \frac{1}{p(x, y)} \end{align}\]</span></p>
<p>为联合熵（joint entropy）</p>
<ul>
<li><span class="math inline">\(H(X, X) = H(X)\)</span>​</li>
<li><span class="math inline">\(H(X, Y) = H(Y, X)\)</span>​</li>
</ul>
<p>定义</p>
<p><span class="math display">\[\begin{align} H(X | Y = y) = \sum_x p(x | Y = y) \log \frac{1}{p(x|Y=y)} \end{align}\]</span></p>
<p><span class="math display">\[\begin{align}H(X|Y) &amp;= \sum_{y \in Y} p(y) H(X | Y = y) \\ &amp;= \sum_{y \in Y} p(y) \sum_{x \in X} p(x | y) \log \frac{1}{p(x | y)} \\ &amp;= \sum_{x \in X, y \in Y} p(x, y) \log \frac{1}{p(x|y)}\end{align}\]</span>​</p>
<p>其中第二项称为条件熵（conditional entropy）</p>
<p>注意到</p>
<p><span class="math display">\[\begin{align} \log p(x|y) = \log \frac{p(x, y)}{p(y)} = \log p(x, y) - \log p(y)\end{align}\]</span>​</p>
<p>（式中的<span class="math inline">\(p(y)\)</span>为对应的边缘分布函数）</p>
<p>我们有</p>
<p><span class="math display">\[\begin{align} H(X|Y) = H(X, Y) - H(Y)\end{align}\]</span></p>
<p>由对称性，得到</p>
<p><span class="math display">\[\begin{align} H(X,Y) = H(Y) + H(X|Y) = H(X) + H(Y | X)\end{align}\]</span></p>
<p>我们可以得到链式法则</p>
<p><span class="math display">\[\begin{align} H(X_1, X_2, ..., X_n) &amp;= H(X_1) + H(X_2, ..., X_n|X_1) \\ &amp;= H(X_1) +H(X_2 | X_1) + H(X_3,...,X_n | X_1, X_2) \\ &amp;= \sum_{i=1}^n H(X_i | X_{1}, ..., X_{i-1})\end{align}\]</span>​</p>
<ul>
<li>当<span class="math inline">\(X, Y\)</span>独立时，<span class="math inline">\(H(X, Y) = H(X) + H(Y)\)</span></li>
<li>贝叶斯公式：<span class="math inline">\(H(X, Y | Z) = H(X|Z) + H(Y | X, Z)\)</span>
<ul>
<li>注意到<span class="math inline">\(p(x, y | z) = \frac{p(x, y, z)}{p(z)} = \frac{p(x, y, z)}{p(x, z)} * \frac{p(x, z)}{p(z)} = p(y|x, z) * p(x|z)\)</span></li>
</ul></li>
<li>当且仅当<span class="math inline">\(Y\)</span>是<span class="math inline">\(X\)</span>的一个函数时，<span class="math inline">\(H(Y|X) = 0\)</span>，也即<span class="math inline">\(H(X, Y) = H(X)\)</span></li>
</ul>
<h3 id="relative-entropy">Relative entropy</h3>
<p>对于概率函数<span class="math inline">\(p(x), q(x)\)</span>，定义</p>
<p><span class="math display">\[\begin{align} D(p || q) = \sum_{x \in X} p(x) \log \frac{p(x)}{q(x)}\end{align}\]</span></p>
<p>为相对熵（relative entropy），也称KL距离，用于衡量两个概率函数之间的“距离”</p>
<p>但是KL距离并不是一种度量（metric）</p>
<ul>
<li><p>当<span class="math inline">\(p(x) = 0\)</span>时，<span class="math inline">\(0 \log \frac{0}{q(x)} = 0\)</span>，反之若<span class="math inline">\(p(x) \neq 0, q(x) = 0\)</span>时，<span class="math inline">\(p(x) \log \frac{p(x)}{0} = \infty\)</span></p></li>
<li><p><span class="math inline">\(D(p || q) \geq 0\)</span>​，当且仅当<span class="math inline">\(p = q\)</span>时取等​</p>
<ul>
<li><p><span class="math inline">\(-D(p || q) = \sum_{x\in X} - p(x) \log \frac{q(x)}{p(x)} \leq \log \sum q(x) \leq \log 1 = 0\)</span></p>
<p>其中第一步为琴生不等式</p>
<p>当且仅当<span class="math inline">\(q(x)/p(x) \equiv C\)</span>，并且<span class="math inline">\(\sum q(x) = 1\)</span>时取等，从而<span class="math inline">\(1 = \sum p(x) = \frac{1}{C} \sum q(x) = \frac {1}{C}\)</span>，于是<span class="math inline">\(C = 1\)</span>，进而<span class="math inline">\(p(x) = q(x)\)</span>，对于<span class="math inline">\(0\)</span>的讨论这里略去</p></li>
</ul></li>
</ul>
<p>定义差分距离（也即向量的1-范数）</p>
<p><span class="math display">\[\begin{align} V(p, q) = \sum_{x \in X} |p(x) - q(x)|\end{align}\]</span></p>
<p>Pinsker 不等式：<span class="math inline">\(D(p || q) \geq \frac{1}{2 \ln 2} V^2(p, q)\)</span>​​（不懂，先记着）</p>
<p>对于<span class="math inline">\(p(x, y), q(x, y)\)</span>，定义条件相对熵为</p>
<p><span class="math display">\[\begin{align} D( p(y|x) || q(y|x)) &amp;= \sum_{x} p(x) D(p(Y|x)||q(Y|x)) \\ &amp;= \sum_x \sum_y p(x)p(y|x) \log \frac{p(y|x)}{q(y|x)} \\ &amp;= \sum_{x, y} p(x, y) \frac{\log p(y|x)}{ \log q(y|x)}\end{align}\]</span>​</p>
<p>有了条件相对熵之后，就可以类比的写出链式法则</p>
<p><span class="math display">\[\begin{align} D(p(x, y) || q(x, y)) = D(p(x) || q(x)) + D(p(y|x) || q(y|x))\end{align}\]</span></p>
<p>只需注意到<span class="math inline">\(\log \frac{p(x, y)}{q(x, y)} = \log \frac{p(x) p(y|x)}{q(x) q(y|x)} = \log \frac{p(x)}{q(x)} + \log \frac{p(y|x)}{q(y|x)}\)</span></p>
<h3 id="mutual-information">Mutual information</h3>
<p>定义</p>
<p><span class="math display">\[\begin{align} I(X;Y) &amp;= D(p(x, y) || p(x)p(y)) \\ &amp;= \sum_{x \in X, y \in Y} p(x, y) \log \frac{p(x, y)}{p(x)p(y)}\end{align}\]</span></p>
<p>为<span class="math inline">\(X, Y\)</span>的互信息（mutual information）</p>
<ul>
<li><span class="math inline">\(I(X;Y) = I(Y;X)\)</span></li>
<li><span class="math inline">\(I(X;X) = H(X)\)</span>​</li>
<li>既然<span class="math inline">\(I(X;Y)\)</span>是一个KL距离，那么<span class="math inline">\(I(X;Y) \geq 0\)</span>​，等号成立当且仅当<span class="math inline">\(p(x, y) = p(x)p(y)\)</span>，即<span class="math inline">\(X, Y\)</span>独立</li>
</ul>
<p>由于<span class="math inline">\(\log \frac{p(x, y)}{p(x)p(y)} = \log p(x, y) - \log p(x) - \log p(y)\)</span></p>
<p>因此</p>
<p><span class="math display">\[\begin{align} I(X;Y) &amp;= H(X) + H(Y) - H(X, Y) \\ &amp;= H(X) - H(X | Y)\\ &amp;= H(Y) - H(Y|X)\end{align}\]</span>​</p>
<ul>
<li>由<span class="math inline">\(I(X;Y) = H(X) - H(X|Y) \geq 0\)</span>​，那么<span class="math inline">\(H(X|Y) \leq H(X)\)</span>​​，当<span class="math inline">\(X, Y\)</span>​独立时取等</li>
<li><span class="math inline">\(I(X;Y) \leq H(X)\)</span></li>
</ul>
<p>定义</p>
<p><span class="math display">\[\begin{align} I(X;Y | Z) &amp;= \sum_{x, y, z} p(x ,y, z) \log \frac{p(x, y | z)}{p(x|z) p(y|z) } \\ &amp;= H(X|Z) - H(X|Y,Z)\end{align}\]</span>​</p>
<p>当且仅当在给定<span class="math inline">\(Z\)</span>的情况下，<span class="math inline">\(X, Y\)</span>独立时取等</p>
<p>计算条件互信息时，有链式法则</p>
<p><span class="math display">\[\begin{align} I(X_1, X_2, ..., X_n ; Y) = \sum_{i=1}^n I(X_i ; Y|X_1, X_2, ..., X_{i-1})\end{align}\]</span></p>
<h3 id="entropy-bound">Entropy Bound</h3>
<p><span class="math display">\[H(X_1, X_2, ..., X_n) \leq \sum_{i=1}^n H(X_i)\]</span></p>
<p>取等当且仅当<span class="math inline">\(X_1, ..., X_n\)</span>独立（用链式法则证明）</p>
<p>接下来要引入马尔科夫链，称<span class="math inline">\(X, Y, Z\)</span>形成马尔科夫链，当且仅当</p>
<p><span class="math display">\[\begin{align} p(x, y, z) = p(x)p(y|x)p(z|y)\end{align}\]</span></p>
<p>（也就是<span class="math inline">\(p(z|y) = p(z|x, y)\)</span>），写作<span class="math inline">\(X \to Y \to Z\)</span></p>
<ul>
<li><p>如果<span class="math inline">\(X\to Y \to Z\)</span>，那么<span class="math inline">\(I(X;Z|Y) = 0\)</span></p></li>
<li><p>如果<span class="math inline">\(X \to Y \to Z\)</span>，那么<span class="math inline">\(I(X;Y) \geq I(X;Z)\)</span></p>
<ul>
<li><span class="math inline">\(I(X;Y) - I(X;Z) = I(X;Y,Z) - I(X;Z|Y) - (I(X;Y,Z) - I(X;Y|Z)) = I(X;Y|Z) \geq 0\)</span></li>
<li>由上述等式，还能观察到<span class="math inline">\(I(X;Y) \geq I(X;Y|Z)\)</span></li>
<li>但是，一般情况下，<span class="math inline">\(I(X;Y) \geq I(X;Y|Z)\)</span>不一定成立</li>
</ul></li>
<li><p>如果<span class="math inline">\(X \to Y \to Z\)</span>，那么<span class="math inline">\(H(X|Z) \geq H(X|Y)\)</span></p></li>
<li><p>$ H(X|Z) - H(X|Y,Z) = I(X;Y|Z)I(X;Z|Y) = H(X|Y) - H(X|Y,Z)$</p></li>
</ul>
<h3 id="entropy-rate">Entropy rate</h3>
<p>稳态过程，一个随机过程称为稳态，如果其任意子集的联合分布具有时间不变性，</p>
<p><span class="math display">\[\begin{align} \forall n, l, x_1, x_2,..., x_n \in X, P(X_1 = x_1, X_2 = x_2, ..., X_n = x_n) = P(X_{1+l} = x_1, ..., X_{n+l} = x_n)\end{align}\]</span></p>
<p>稳态过程具有时间可逆性，即</p>
<p><span class="math display">\[\begin{align} H(X_0 | X_{-1},X_{-2},..X_{-n}) = H(X_0 | X_1, X_2, ..., X_n)\end{align}\]</span></p>
<p>而对于马尔科夫链，其为稳态充要条件为<span class="math inline">\(p(X_{n+1}) = p(X_n)\)</span></p>
<p>或者说<span class="math inline">\(P(x_1,x_2,...,x_n)^T = (x_1, ..., x_n)^T\)</span>，其中<span class="math inline">\(P\)</span>为转移矩阵</p>
<hr />
<p>对于随机过程，定义熵率</p>
<p><span class="math display">\[\begin{align} H(X) = \lim_{n \to \infty} \frac{1}{n} H(X_1, X_2, ..., X_n)\end{align}\]</span></p>
<p>熵率不一定存在，但对于稳态而言，熵率是存在的</p>
<p>我们先考虑<span class="math inline">\(A_n = H(X_n | X_{n-1}, ..., X_1)\)</span></p>
<p>注意到<span class="math inline">\(0 \leq A_{n+1} = H(X_{n+1} | X_{n},...,X_1) \leq H(X_{n+1} | X_n,...,X_2) = H(X_n | X_{n-1},...,X_1) = A_n\)</span>，<span class="math inline">\(A_n\)</span>单调递减有下限，因此<span class="math inline">\(A_n\)</span>有极限</p>
<p>那么</p>
<p><span class="math display">\[\begin{align} H&#39;(X) = \lim_{n \to \infty} H(X_n | X_{n-1},...,X_1)\end{align}\]</span></p>
<p>存在，根据数学分析中的结论，我们有</p>
<p><span class="math display">\[\begin{align} H(X) = H&#39;(X)\end{align}\]</span></p>
<p>存在</p>
<p>特别的，对于稳态马尔科夫链，将有<span class="math inline">\(H(X) = H&#39;(X) = H(X_2 | X_1)\)</span></p>
<p>如果设出马尔科夫链的极限分布<span class="math inline">\(\pi\)</span>和转移矩阵<span class="math inline">\(P\)</span>，那么我们将得到</p>
<p><span class="math display">\[\begin{align} H(X) = \sum_{ij} \pi_i P_{ij} \log \frac{1}{P_{ij}}\end{align}\]</span></p>
<hr />
<p>设<span class="math inline">\(Y = f(X)\)</span>，如果<span class="math inline">\(\{X\}\)</span>构成稳态的马尔科夫链，那么<span class="math inline">\(\{Y\}\)</span>也构成稳态的马尔科夫链</p>
<ul>
<li><span class="math inline">\(p(X_{n+1}) = p(X_n) \Rightarrow p(Y_{n+1}) = p(Y_n)\)</span></li>
</ul>
<p>那么，<span class="math inline">\(H(Y) = \lim_{n \to \infty} H(Y_n | Y_{n-1}, ..., Y_1)\)</span></p>
<p>通过一些（奇怪的）技巧，我们可以对<span class="math inline">\(H(Y)\)</span>进行更好的估值，这依赖于以下定理</p>
<p><span class="math display">\[\begin{align} H(Y_n | Y_{n-1},...,Y_1, X_1) \leq H(y) \leq H(Y_n | Y_{n-1},...,Y_1)\end{align}\]</span></p>
<p><span class="math display">\[\begin{align} \lim_{n \to \infty} H(Y_n | Y_{n-1},...,Y_1,X_1) = \lim_{n \to \infty} H(Y_n|Y_{n-2},...,Y_1) = H(y)\end{align}\]</span>​</p>
<ul>
<li>注意到<span class="math inline">\(Y\)</span>是<span class="math inline">\(X\)</span>的函数，尝试在熵的已知中添加<span class="math inline">\(Y\)</span></li>
</ul>
<h3 id="data-compression">Data Compression</h3>
<p>大概到了新的阶段</p>
<p>对于一个随机变量<span class="math inline">\(X\)</span>的信源编码（source code），是一个从随机变量<span class="math inline">\(X\)</span>的样本空间到一个有限长度的字符串的映射（不妨设字母表为<span class="math inline">\(D\)</span>，记所有的有限长度的字符串的集合为<span class="math inline">\(D^*\)</span>），让<span class="math inline">\(C(x)\)</span>表示对应于<span class="math inline">\(x\)</span>的编码，而<span class="math inline">\(l(x)\)</span>表示<span class="math inline">\(C(x)\)</span>的长度</p>
<p>记<span class="math inline">\(L(C) = E_{p(x)}[l(x)] = \sum_{x} p(x) l(x)\)</span>，一般的，我们希望一个编码方式能够最小化<span class="math inline">\(L(C)\)</span></p>
<p>对于一种编码，称其扩展<span class="math inline">\(C^*\)</span>为以<span class="math inline">\(X\)</span>的样本空间为字符集构成的有限字符串映射到有限长度的字符串的映射，满足<span class="math inline">\(C(x_1 + x_2 + ... + x_n) = C(x_1) + C(x_2) + ... + C(x_n)\)</span>，这里的"+"表示字符串的拼接</p>
<ul>
<li>当一种编码的<strong>扩展</strong>是一个单射时，称这种编码是唯一可解码的</li>
<li>一种编码称为前缀码，或者即时码，如果任意两个码都没有互为前缀，类似的定义后缀码</li>
</ul>
<h5 id="kraft-inequality">Kraft inequality</h5>
<p>Kraft 不等式：对于一种前缀码，设其字母表大小为<span class="math inline">\(D\)</span>​​，那么编码长度<span class="math inline">\(l_1, ..., l_m (m = |X|)\)</span>​​将满足</p>
<p><span class="math display">\[\begin{align} \sum_{i=1}^m D^{-l_i} \leq 1\end{align}\]</span></p>
<p>并且，给定一组满足该不等式的编码长度，那么一定存在一种前缀码以这些长度编码</p>
<ul>
<li>考虑用Trie树表示前缀码，反过来则用归纳法证明</li>
<li>这个结论在编码长度有可数无穷的情况下也是对的，可以考虑用<span class="math inline">\([0,1)\)</span>中的<span class="math inline">\(D\)</span>进制小数来证明</li>
</ul>
<p>利用拉格朗日乘数法，得到最优情况下，我们应该控制编码长度为<span class="math inline">\(l_i = -\log_D p_i(p_i = D^{-l_i})\)</span>，此时<span class="math inline">\(L(C) = H_D(X)\)</span></p>
<p>但是一般的，这个长度不是整数，因此一般的有<span class="math inline">\(L(C) \geq H_D(X)\)</span>​，但是我们有<span class="math inline">\(H_D(X) \leq L(C) &lt; H_D(X) + 1\)</span>​</p>
<h5 id="shannon-codes">Shannon codes</h5>
<p>我们直接取<span class="math inline">\(l_i = \lceil -\log_D p_i \rceil\)</span>，就有<span class="math inline">\(-\log_D p_i \leq l_i &lt; -\log_D p_i + 1\)</span>，于是<span class="math inline">\(H_D(X) \leq L(C) &lt; H_D(X) + 1\)</span>，这种编码称为Shannon codes</p>
<p>进一步，如果我们对<span class="math inline">\(X_1, X_2,...,X_n\)</span>​（样本空间相同）一起编码，运用刚刚的结论，得到</p>
<p><span class="math display">\[H(X_1, ..., X_n) \leq E [l(X_1, ..., X_n)] &lt; H(X_1,...,X_n) + 1\]</span></p>
<blockquote>
<p>将<span class="math inline">\(L(C)\)</span>记为编码一个随机变量所用的期望长度，那么<span class="math inline">\(L(C) = \frac{1}{n} E [l(X_1, ..., X_n)]\)</span>，代入上式，得到 <span class="math display">\[\frac{H(X_1, ..., X_n)}{n} \leq L(C)&lt; \frac{H(X_1,...,X_n) + 1}{n}\]</span></p>
<p>如果<span class="math inline">\(X_1,...,X_n,...\)</span>构成一个稳态的话，根据前文的结论，我们有<span class="math inline">\(L(C) \to H(X)\)</span>（这里为熵率）</p>
</blockquote>
<p>这种编码方式称为区块编码，而上述结论称为香农第一定理</p>
<hr />
<p>如果我们运用<span class="math inline">\(\{q(x)\}\)</span>来给一个概率为<span class="math inline">\(\{p(x)\}\)</span>的随机变量编码，那么我们将有</p>
<p><span class="math display">\[\begin{align} H(p) + D(p||q) \leq E_p \; \lceil\log \frac{1}{q(x)} \rceil &lt; H(p) + D(p || q) + 1\end{align}\]</span>​</p>
<p>当然，这里的<span class="math inline">\(\lceil\log \frac{1}{q(x)} \rceil\)</span>表示编码长度</p>
<p>这个式子只需要对取整号进行简单放缩后，运用定义就可以得到</p>
<hr />
<p>Kraft不等式的约束范围非常非常广，事实上，我们只考虑前缀码就足够了</p>
<p>对于一种唯一可解码，设其字母表大小为<span class="math inline">\(D\)</span>​，那么编码长度<span class="math inline">\(l_1, ..., l_m (m = |X|)\)</span>​将满足</p>
<p><span class="math display">\[\begin{align} \sum_{i=1}^m D^{-l_i} \leq 1\end{align}\]</span></p>
<p>并且，给定一组满足该不等式的编码长度，那么一定存在一种唯一可解码以这些长度编码</p>
<h5 id="huffman-codes">Huffman codes</h5>
<p>哈夫曼编码可以使得<span class="math inline">\(L(C)\)</span>最小，并且哈夫曼编码是一种前缀码</p>
<p>这玩意初中生都会了....就不写了</p>
<p>有个扩展叫canonical codes，就先不学了..。</p>
<h5 id="shannon-fano-elias-coding">Shannon-Fano-Elias coding</h5>
<p>考虑<span class="math inline">\(X\)</span>的分布函数<span class="math inline">\(F(x)\)</span>，定义其MCDF为<span class="math inline">\(F^*(x) = F(x) - \frac{1}{2} p(x)\)</span></p>
<p>不难发现，<span class="math inline">\(F^*(x)\)</span>和<span class="math inline">\(p(x) &gt; 0\)</span>的<span class="math inline">\(x\)</span>​之间存在着对应关系，从而可以用于编码</p>
<p>考虑截取<span class="math inline">\(F^*(x)\)</span>的前<span class="math inline">\(l(x) = \lceil \log \frac{1}{p(x)}\rceil + 1\)</span>位（二进制），那么有<span class="math inline">\(F^*(x) - C(x) \leq \frac{1}{2^{l(x)}} \leq \frac{p(x)}{2} = F^*(x) - F^*(x-1)\)</span></p>
<p>因此这种编码方式也构成一种前缀码，由于多用了1个bit来避免重复，因此此时<span class="math inline">\(L &lt; H(x) + 2\)</span>​</p>
<h3 id="channel">Channel</h3>
<p>一个信道的模型，大概就是对信息进行编码，通过信道（可能有噪声，以一个概率来描述），之后解码</p>
<p>我们假设发送了<span class="math inline">\(w = x_1x_2...x_k\)</span>，经过信道后得到<span class="math inline">\(y_1y_2...y_k\)</span></p>
<p>这些数字的生成是有先后顺序的，<span class="math inline">\(w \to x_1 \to y_1 \to x_2 \to y_2 ... \to x_k \to y_k\)</span></p>
<p>为了表示方便，记<span class="math inline">\(x^i = x_1,x_2...,x_i, y^i = y_1, y_2, ..., y_i\)</span></p>
<p>对于一个好的信道，我们希望它能发送更多的信息，也即熵尽可能大</p>
<h5 id="discrete-memoryless-channel">Discrete memoryless channel</h5>
<p>离散无记忆信道（DMC），满足</p>
<p><span class="math display">\[\begin{align} p(y_k | x^k, y^{k-1}) = p(y_k | x_k) \end{align}\]</span></p>
<p>其中<span class="math inline">\(x_k\)</span>是第<span class="math inline">\(k\)</span>个发送的信息，而<span class="math inline">\(x^k\)</span>为前<span class="math inline">\(k\)</span>次发送的信息，<span class="math inline">\(y^{k-1}\)</span>为前<span class="math inline">\(k-1\)</span>​个发送后的信息</p>
<p>而一个无反馈（feedback）的信道，满足</p>
<p><span class="math display">\[\begin{align} p(x_k | x^{k-1}, y^{k-1}) = p(x_k | x^{k-1})\end{align}\]</span></p>
<p>也就是前<span class="math inline">\(k-1\)</span>次经过信道后的信息对于第<span class="math inline">\(k\)</span>次发送的信息没有影响</p>
<p>结合这两个概率，一般默认DMC是没有反馈的</p>
<p>对于DMC而言，有</p>
<p><span class="math display">\[\begin{align} p(y^n |x^n) =  \prod_{i=1}^n p(y_i | x_i)\end{align}\]</span>​</p>
<p>用熵来表示，就是</p>
<p><span class="math display">\[\begin{align} H(Y^n | X^n) = \sum_{i=1}^n H(Y_i | X_i) \end{align}\]</span>​</p>
<p>运用上式，有</p>
<p><span class="math display">\[H(Y^n) - H(Y^n|X^n)= H(Y^n) - \sum_{i=1}^n H(Y_i | X_i) \leq \sum_{i=1}^n (H(Y_i) - H(Y_i | X_i))\]</span></p>
<p><span class="math display">\[\begin{align} I(X^n ; Y^n) \leq \sum_{i=1}^n I(X_i ; Y_i) \end{align}\]</span></p>
<p>在DMC中，<span class="math inline">\(w \to X^n \to Y^n \to w&#39;\)</span>构成一个马尔科夫链，其中<span class="math inline">\(w&#39;\)</span>​为解码后的信息</p>
<h5 id="channel-coding">Channel coding</h5>
<p>编码器（encoder），是一个将信息映射到<span class="math inline">\(X^n\)</span>的映射，并且要求是单射，类似的有解码器</p>
<p>码本（codebook），记录了编码器的映射规则，码本为发送者和接收者共有</p>
<p>码字（codewords），用<span class="math inline">\(x^n(i)\)</span>表示编码<span class="math inline">\(i\)</span>的字符串</p>
<p>对于一个信道<span class="math inline">\((X, p(y|x), Y)\)</span>​​​而言，其一个编码<span class="math inline">\((M, n)\)</span>包括发送信息的集合（<span class="math inline">\(M\)</span>​），编码器（引申出码本和码字），解码器</p>
<p>为了衡量信道发送的信息是否有误，定义</p>
<p><span class="math display">\[\begin{align}\lambda_i = p( g(Y^n) \neq i | X^n = x^n(i)) = \sum_{y^n} p(y^n | x^n(i))* [g(y^n) \neq i] \end{align}\]</span></p>
<p>定义最大错误概率为</p>
<p><span class="math display">\[\begin{align} \lambda^{(n)} = \max_{i \in [M]} \lambda_i\end{align}\]</span></p>
<p>定义平均错误概率为</p>
<p><span class="math display">\[\begin{align} P_e^{(n)} = \frac{1}{M} \sum_{i=1}^M \lambda_i\end{align}\]</span></p>
<p>对于一个信道编码<span class="math inline">\((M, n)\)</span>​，定义码率为</p>
<p><span class="math display">\[\begin{align} R = \frac{\log M}{n} \end{align}\]</span>​</p>
<p>如果存在一系列的编码<span class="math inline">\((2^{nR}, n)\)</span>，使得当<span class="math inline">\(n \to \infty\)</span>时，<span class="math inline">\(\lambda^{(n)} \to 0\)</span>，就称码率<span class="math inline">\(R\)</span>​是可取的</p>
<p>定义信道容量<span class="math inline">\(C\)</span>为所有可取码率的上确界</p>
<ul>
<li><p>信道编码定理</p>
<p><strong>对于DMC而言，一切小于信道容量<span class="math inline">\(C\)</span>​的码率是可取的</strong></p></li>
<li><p>特别的，对于默认的DMC，<span class="math inline">\(C = \max_{p(x)} I(X;Y)\)</span></p>
<p>而对于有反馈的DMC而言，信道容量并不能得到提高</p></li>
</ul>
<h5 id="typical-set">Typical set</h5>
<p>接下来是一点关于典型集的内容...</p>
<blockquote>
<p>如果<span class="math inline">\(X_1,...,X_n,...\)</span>是i.i.d.的，那么</p>
<p><span class="math display">\[\begin{align} -\frac{1}{n} \log p(X_1,...,X_n) \to H(X) (n \to \infty)\end{align}\]</span>​</p>
</blockquote>
<p>这个性质称为AEP（渐进均分性），根据大数定理，我们知道满足上述条件的<span class="math inline">\(X\)</span>序列的概率和几乎是<span class="math inline">\(1\)</span>​</p>
<p>我们把满足上述条件的序列弄成一个集合<span class="math inline">\(A_{\epsilon}^{(n)}\)</span>​，称为典型集（typical set），形式化的讲就是，如果<span class="math inline">\((x_1,...,x_n) \in X^n\)</span>在集合<span class="math inline">\(A_{\epsilon}^{(n)}\)</span>中，那么</p>
<p><span class="math display">\[\begin{align}2^{-n(H(X) + \epsilon)} \leq p(x_1,...,x_n)  \leq 2^{-n(H(X) - \epsilon)}\end{align}\]</span></p>
<ul>
<li>上述式子等价于：<span class="math inline">\(|\frac{1}{n} \log p(x_1,...,x_n) + H(X)| \leq \epsilon\)</span></li>
<li>根据之前的讨论，当<span class="math inline">\(n\)</span>足够大时，典型集中的序列的概率之和趋近于<span class="math inline">\(1\)</span></li>
<li><span class="math inline">\((1 - \epsilon) 2^{n(H(X) - \epsilon)} \leq |A_{\epsilon}^{(n)}| \leq 2^{n(H(X) - \epsilon)}\)</span>，也就是其大小趋近于<span class="math inline">\(2^{nH(X)}\)</span>​
<ul>
<li>注意到<span class="math inline">\(A_{\epsilon}^{(n)}\)</span>的概率和有上界<span class="math inline">\(1\)</span>，有下界<span class="math inline">\(1- \epsilon\)</span>​</li>
</ul></li>
</ul>
<p>对于两个随机过程，我们可以定义联合典型集</p>
<p>如果<span class="math inline">\((x^n , y^n) \in X^n \times Y^n\)</span>在集合<span class="math inline">\(A_{\epsilon}^{(n)}\)</span>中，那么</p>
<p><span class="math inline">\(2^{-n(H(X) + \epsilon)} \leq p(x^n) \leq 2^{-n(H(X) - \epsilon)}\)</span>​</p>
<p><span class="math inline">\(2^{-n(H(X) + \epsilon)} \leq p(y^n) \leq 2^{-n(H(X) - \epsilon)}\)</span>​</p>
<p><span class="math inline">\(2^{-n(H(X,Y) + \epsilon)} \leq p(x^n, y^n) \leq 2^{-n(H(X, Y) - \epsilon)}\)</span>​</p>
<ul>
<li><p><span class="math inline">\(|A_{\epsilon}^{(n)}| \to 2^{nH(X,Y)}\)</span></p></li>
<li><p>如果<span class="math inline">\((X&#39;, Y&#39;) \sim p(x^n)p(y^n)\)</span>，那么<span class="math inline">\(p((X&#39;, Y&#39;) \in A_{\epsilon}^{(n)}) \to 2^{-nI(X;Y)}\)</span>​</p>
<ul>
<li><p><span class="math inline">\(p((X&#39;, Y&#39;) \in A_{\epsilon}^{(n)}) = \sum_{(x^n, y^n)} p(x^n) p(y^n) \to 2^{nH(X, Y)} * 2^{-nH(X)} * 2^{-nH(Y)} = 2^{-nI(X;Y)}\)</span></p>
<p>式中为集合的大小乘上相应的概率，具体的写法就分两个方向放缩</p></li>
</ul></li>
</ul>
<h5 id="source-channel-coding-theorem">Source-channel coding theorem</h5>
<ul>
<li><p>信源信道联合编码定理</p>
<p>如果<span class="math inline">\(X_1, ..., X_n\)</span>是一个满足渐进均分性，并且<span class="math inline">\(H(X) &lt; C\)</span>，那么存在一种信源信道的联合编码方案，使得<span class="math inline">\(p(X^n \neq (X^n)&#39;) \to 0\)</span></p>
<p>反之，对于任何稳态随机过程，如果<span class="math inline">\(H(X) &gt; C\)</span>，那么不存在使得<span class="math inline">\(p(X^n \neq (X^n)&#39;) \to 0\)</span>的一种联合编码方案</p></li>
</ul>
<p>感觉该知道的都差不多了....先记到这里...</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>information theory</tag>
      </tags>
  </entry>
</search>
